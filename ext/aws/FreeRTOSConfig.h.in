/*
 * FreeRTOS Kernel V10.0.1
 * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
 * Copyright (C) 2018 Niklas Hauser
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * http://www.FreeRTOS.org
 * http://aws.amazon.com/freertos
 *
 * 1 tab == 4 spaces!
 */

#ifndef FREERTOS_CONFIG_H
#define FREERTOS_CONFIG_H

/* Here is a good place to include header files that are required across
your application. */
#include <modm/architecture/interface/assert.h>
#include <modm/architecture/utils.hpp>
#include <modm/platform/device.hpp>

/* Define to trap errors during development. */
#define configASSERT( x ) { modm_assert((x), "freertos", __FILE__, MODM_STRINGIFY(__LINE__)); }

// declared in modm:platform:clock
#ifdef __cplusplus
    extern "C" uint32_t SystemCoreClock;
#else
    extern uint32_t SystemCoreClock;
#endif

#define configCPU_CLOCK_HZ                      ( SystemCoreClock )
#define configTICK_RATE_HZ                      ( {{ frequency }} )
/* Memory allocation related definitions. */
#define configSUPPORT_STATIC_ALLOCATION         1
#define configSUPPORT_DYNAMIC_ALLOCATION        {{ 1 if with_heap else 0 }}
// used by modm:platform:clock for modm::Clock::increment(): vApplicationTickHook()
#define configUSE_TICK_HOOK                     1

/* Interrupt priorities used by the kernel port layer itself.  These are generic
to all Cortex-M ports, and do not rely on any particular library functions. */
#define configKERNEL_INTERRUPT_PRIORITY         (((1u << __NVIC_PRIO_BITS) - 1u) << (8u - __NVIC_PRIO_BITS))

/* Definitions that map the FreeRTOS port interrupt handlers to their CMSIS
standard names. */
#define xPortPendSVHandler   PendSV_Handler
#define vPortSVCHandler      SVC_Handler
#define xPortSysTickHandler  SysTick_Handler


/* A header file that overwrites with local project settings. */
#if __has_include(<FreeRTOSConfigLocal.h>)
#	include <FreeRTOSConfigLocal.h>
#endif


/* Required config by FreeRTOS and defaulted by modm */

/* !!!! configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to zero !!!!
See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html. */
#ifndef configMAX_SYSCALL_INTERRUPT_PRIORITY
#	define configMAX_SYSCALL_INTERRUPT_PRIORITY		(__NVIC_PRIO_BITS << (8u - __NVIC_PRIO_BITS))
#endif

#ifndef configMINIMAL_STACK_SIZE
#	define configMINIMAL_STACK_SIZE					128
#endif
#ifndef configMAX_PRIORITIES
#	define configMAX_PRIORITIES						5
#endif
#ifndef configUSE_PREEMPTION
#	define configUSE_PREEMPTION						1
#endif
#ifndef configUSE_IDLE_HOOK
#	define configUSE_IDLE_HOOK						0
#endif
#ifndef configUSE_MALLOC_FAILED_HOOK
#	define configUSE_MALLOC_FAILED_HOOK				0
#endif
#ifndef configUSE_16_BIT_TICKS
#	define configUSE_16_BIT_TICKS					0
#endif
// required for Cortex M23/M33 ports
#ifndef configENABLE_FPU
#	define configENABLE_FPU							{{ 1 if with_fpu else 0 }}
#endif
#ifndef configENABLE_MPU
#	define configENABLE_MPU							0
#endif
#ifndef configENABLE_TRUSTZONE
#	define configENABLE_TRUSTZONE					0
#endif

/* Defaulted by FreeRTOS but changed by modm */

#ifndef configUSE_MUTEXES
#	define configUSE_MUTEXES						1
#endif
#ifndef configUSE_RECURSIVE_MUTEXES
#	define configUSE_RECURSIVE_MUTEXES				1
#endif
#ifndef configUSE_COUNTING_SEMAPHORES
#	define configUSE_COUNTING_SEMAPHORES			1
#endif
#ifndef configQUEUE_REGISTRY_SIZE
#	define configQUEUE_REGISTRY_SIZE				10
#endif
#ifndef configENABLE_BACKWARD_COMPATIBILITY
#	define configENABLE_BACKWARD_COMPATIBILITY		0
#endif
#ifndef configNUM_THREAD_LOCAL_STORAGE_POINTERS
#	define configNUM_THREAD_LOCAL_STORAGE_POINTERS	5
#endif
#ifndef configCHECK_FOR_STACK_OVERFLOW
#	define configCHECK_FOR_STACK_OVERFLOW			1
#endif

/* The timers module relies on xTaskGetSchedulerState(). */
#ifndef configUSE_TIMERS
#	define configUSE_TIMERS							1
#endif
#ifndef configTIMER_TASK_PRIORITY
#	define configTIMER_TASK_PRIORITY				3
#endif
#ifndef configTIMER_QUEUE_LENGTH
#	define configTIMER_QUEUE_LENGTH					10
#endif
#ifndef configTIMER_TASK_STACK_DEPTH
#	define configTIMER_TASK_STACK_DEPTH				configMINIMAL_STACK_SIZE
#endif

/* Optional functions all enabled. */
#ifndef INCLUDE_vTaskPrioritySet
#	define INCLUDE_vTaskPrioritySet					1
#endif
#ifndef INCLUDE_uxTaskPriorityGet
#	define INCLUDE_uxTaskPriorityGet				1
#endif
#ifndef INCLUDE_vTaskDelete
#	define INCLUDE_vTaskDelete						1
#endif
#ifndef INCLUDE_vTaskSuspend
#	define INCLUDE_vTaskSuspend						1
#endif
#ifndef INCLUDE_xTaskDelayUntil
#	define INCLUDE_xTaskDelayUntil					1
#endif
#ifndef INCLUDE_vTaskDelay
#	define INCLUDE_vTaskDelay						1
#endif
#ifndef INCLUDE_xTaskGetIdleTaskHandle
#	define INCLUDE_xTaskGetIdleTaskHandle			1
#endif
#ifndef INCLUDE_xTaskAbortDelay
#	define INCLUDE_xTaskAbortDelay					1
#endif
#ifndef INCLUDE_xQueueGetMutexHolder
#	define INCLUDE_xQueueGetMutexHolder				1
#endif
#ifndef INCLUDE_xSemaphoreGetMutexHolder
#	define INCLUDE_xSemaphoreGetMutexHolder			1
#endif
#ifndef INCLUDE_xTaskGetHandle
#	define INCLUDE_xTaskGetHandle					1
#endif
#ifndef INCLUDE_uxTaskGetStackHighWaterMark
#	define INCLUDE_uxTaskGetStackHighWaterMark		1
#endif
#ifndef INCLUDE_uxTaskGetStackHighWaterMark2
#	define INCLUDE_uxTaskGetStackHighWaterMark2		1
#endif
#ifndef INCLUDE_eTaskGetState
#	define INCLUDE_eTaskGetState					1
#endif
#ifndef INCLUDE_xTaskResumeFromISR
#	define INCLUDE_xTaskResumeFromISR				1
#endif
#ifndef INCLUDE_xTimerPendFunctionCall
#	define INCLUDE_xTimerPendFunctionCall			1
#endif
#ifndef INCLUDE_xTaskGetSchedulerState
#	define INCLUDE_xTaskGetSchedulerState			1
#endif
#ifndef INCLUDE_xTaskGetCurrentTaskHandle
#	define INCLUDE_xTaskGetCurrentTaskHandle		1
#endif

#endif /* FREERTOS_CONFIG_H */

