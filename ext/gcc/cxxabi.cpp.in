/*
 * Copyright (c) 2009-2011, Fabian Greif
 * Copyright (c) 2010, Martin Rosekeit
 * Copyright (c) 2012, Sascha Schade
 * Copyright (c) 2012-2014, 2020, Niklas Hauser
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#include <modm/architecture/interface/assert.hpp>

extern "C"
{

void __cxa_pure_virtual()
{ modm_assert(0, "virt.pure", "A pure virtual function was called!"); }
void __cxa_deleted_virtual()
{ modm_assert(0, "virt.del", "A deleted virtual function was called!"); }

}

%% if with_threadsafe_statics
#include <atomic>
/* One-time construction API, see ARM IHI0041D section 3.2.3.
 * The ARM C++ ABI mandates the guard to be 32-bit aligned, 32-bit values.
 */
enum
{
	UNINITIALIZED = 0,
	INITIALIZED = 1,
	INITIALIZING = 0x100,
};

// This function is only called when `(guard & 1) != 1`!
extern "C" int __cxa_guard_acquire(int *guard)
{
	std::atomic_int *atomic_guard = reinterpret_cast<std::atomic_int *>(guard);
	if (atomic_guard->exchange(INITIALIZING) == INITIALIZING)
	{
		modm_assert(0, "stat.rec",
				"Recursive initialization of a function static!", guard);
	}
	return 1;
}

// After this function the compiler expects `(guard & 1) == 1`!
extern "C" void __cxa_guard_release(int *guard) noexcept
{
	std::atomic_int *atomic_guard = reinterpret_cast<std::atomic_int *>(guard);
	atomic_guard->store(INITIALIZED);
}

// Called if the initialization terminates by throwing an exception.
// After this function the compiler expects `(guard & 3) == 0`!
extern "C" void __cxa_guard_abort([[maybe_unused]] int *guard) noexcept
{
%% if with_exceptions
	std::atomic_int *atomic_guard = reinterpret_cast<std::atomic_int *>(guard);
	atomic_guard->store(UNINITIALIZED);
%% endif
}
%% endif
