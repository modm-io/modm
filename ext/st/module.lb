#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2016, Fabian Greif
# Copyright (c) 2017, Niklas Hauser
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

import os
import re

def getDefineForDevice(device_id, familyDefines):
    # get all defines for this device name
    devName = "STM32{}{}".format(device_id["family"].upper(), device_id["name"].upper())

    # Map STM32F7x8 -> STM32F7x7
    if device_id["family"] == "f7" and devName[8] == "8":
        devName = devName[:8] + "7"

    deviceDefines = sorted([define for define in familyDefines if define.startswith(devName)])
    # if there is only one define thats the one
    if len(deviceDefines) == 1:
        return deviceDefines[0]

    # now we match for the size-id.
    devNameMatch = devName + "x{}".format(device_id["size"].upper())
    for define in deviceDefines:
        if devNameMatch <= define:
            return define

    # now we match for the pin-id.
    devNameMatch = devName + "{}x".format(device_id["pin"].upper())
    for define in deviceDefines:
        if devNameMatch <= define:
            return define

    return None

# -----------------------------------------------------------------------------
def init(module):
    module.parent = "cmsis"
    module.name = "device"
    module.description = FileReader("module.md")

def prepare(module, options):
    device = options[":target"]
    if device.identifier["platform"] != "stm32":
        return False

    module.depends(":cmsis:core")
    return True

bprops = {}
def validate(env):
    device = env[":target"]

    core = device.get_driver("core")["type"]
    core = core.replace("cortex-m", "").replace("+", "plus").replace("f", "").replace("d", "")
    core_header = "core_cm{}.h".format(core)
    core_header = localpath("..", "arm", "cmsis", "CMSIS", "Core", "Include", core_header)

    folder = "stm32{}xx".format(device.identifier["family"])
    family_header = folder + ".h"
    folder = os.path.join("stm32", folder, "Include")
    define = None

    with open(localpath(folder, family_header), "r", errors="replace") as headerFile:
        match = re.findall(r"if defined\((?P<define>STM32[F|L|H].....)\)", headerFile.read())
        if match:
            define = getDefineForDevice(device.identifier, match)
    if define is None:
        raise ValidateException("No device define found for '{}'!".format(device.partname))

    device_header = define.lower() + ".h"
    peripherals = []
    core_features = {}

    for header_path in [core_header, localpath(folder, device_header)]:
        with open(header_path, "r", errors="replace") as deviceFile:
            deviceFileContent = deviceFile.read()
            # find mpu and fpu features
            features = re.findall(r"#define +__([MF]PU)_PRESENT +([01])", deviceFileContent)
            core_features.update({f[0]:bool(int(f[1])) for f in features})
            # find all peripherals
            mperipherals = re.findall(r"#define +(.*?) +\(\((.*?_Type(?:Def)?)", deviceFileContent)
            # We only care about the absolute peripheral addresses
            peripherals.extend([(p[0],p[1]) for p in mperipherals])
    # filter out MPU and/or FPU if required
    peripherals = filter(lambda p: p[0] not in core_features or core_features[p[0]], peripherals)
    peripherals = sorted(peripherals, key=lambda p: p[0])
    # print("\n".join([s+" -> "+hex(a) for (s,k,a) in peripherals]))

    bprops.update({
        "folder": folder,
        "define": define,
        "device_header": device_header,
        "system_header": "system_" + family_header,
        "peripherals": peripherals
    })

def build(env):
    env.add_metadata("include_path", "modm/ext")
    env.add_metadata("include_path", "modm/ext/cmsis/device")

    env.outbasepath = "modm/ext/cmsis/device"
    env.copy(localpath(bprops["folder"], bprops["device_header"]), bprops["device_header"])
    env.copy(localpath(bprops["folder"], bprops["system_header"]), bprops["system_header"])

    env.substitutions = bprops
    env.substitutions.update({
        "headers": [bprops["device_header"], bprops["system_header"]],
        "defines": [bprops["define"]],
    })
    env.outbasepath = "modm/src/modm/platform"
    env.template("device.hpp.in")
