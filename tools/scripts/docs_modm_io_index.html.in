<!doctype html>
<html>
<head>
    <title>doc.modm.io API</title>
    <meta charset="utf-8">

<style type="text/css">
body {
    font-family: "Ubuntu", "Helvetica Neue", Helvetica, Arial, sans-serif;
    text-align: center;
    padding: 0;
    margin: 0;
}
header {
    background-color: #3f51b5;
    color: #fff;
    padding: 0px;
}
table {
    margin: auto;
}
td {
    padding: 0em 0.5em;
}

*{
    box-sizing: border-box;
}
.autocomplete {
    position: relative;
    display: inline-block;
}
input, select {
    border: 1px solid transparent;
    background-color: #f1f1f1;
    padding: 10px;
    font-size: 16px;
    width: 100%;
    border-width: 0px;
    border-color: #fff;
}
input[type=text] {
    background-color: #f1f1f1;
    width: 100%;
}
input[type=text]::placeholder {
    text-transform: none;
}
input[type=submit] {
    background-color: #3f51b5;
    color: #fff;
    border: 0px;
}
.autocomplete-items {
    position: absolute;
    border: 1px solid #d4d4d4;
    border-bottom: none;
    border-top: none;
    z-index: 99;
    top: 100%;
    left: 0;
    right: 0;
}
.autocomplete-items div {
    padding: 10px;
    cursor: pointer;
    background-color: #fff;
    border-bottom: 1px solid #d4d4d4;
}
.autocomplete-items div:hover {
    background-color: #e9e9e9;
}
.autocomplete-active {
    background-color: DodgerBlue !important;
    color: #ffffff;
}

@media (prefers-color-scheme: dark) {
body {
    background: #32363d;
    color: #D8D8D8;
}
input, select {
    background-color: #282923;
}
input[type=text] {
    background-color: #282923;
    color: #fff;
}
.autocomplete-items {
    border: 1px solid #282923;
}
.autocomplete-items div {
    background-color: #282923;
    border-bottom: 1px solid #282923;
}
.autocomplete-items div:hover {
    background-color: #32363d;
}
.autocomplete-active {
    color: #D8D8D8;
}
}
</style>
</head>
<body>
<header>
<a id="h1" href="https://modm.io/">
<img style="height: 10em;" src="https://modm.io/images/logo.svg">
</a>
<h1>API documentation</h1>
</header>
<main>
<p id="numtargets">Documentation is available for {{ num_devices }} devices and {{ num_boards }} boards.</p>
<h3>Select your target:</h3>
<form autocomplete="off" action="javascript:showDocumentation()">
<table>
    <tr>
        <td>Version/Release</td>
        <td>Device or Board</td>
        <td>&nbsp;</td>
    </tr>
    <tr>
        <td>
            <select id="releaseinput" name="releases">
                <option>develop</option>
            </select>
        </td>
        <td>
            <div class="autocomplete" style="width:300px;">
                <input id="targetinput" type="text" name="target" placeholder="Search for e.g. 'F469' or 'NUCLEO'">
            </div>
        </td>
        <td>
            <input type="submit" value="Show Documentation">
        </td>
    </tr>
</table>
</form>
<br />
<small>For most microcontroller sub-families only the variant with largest pin-count and memory is available.</small>
<p>Last updated: {{ date }}</p>

<script type="text/javascript">
var devices = [
{% for d in devices %}
"{{ d | upper }}",
{% endfor %}
{% for (_, b, _) in boards %}
"{{ b }}",
{% endfor %}
];
var name2board = {
{% for (b, n, _) in boards %}
"{{ n }}": "{{ b }}",
{% endfor %}
};

var possible_releases = ["develop"];
var current_year = new Date().getFullYear();
for (var year = 2021; year <= current_year; year++) {
   possible_releases.push(year + "q1");
   possible_releases.push(year + "q2");
   possible_releases.push(year + "q3");
   possible_releases.push(year + "q4");
}
var releases = [];
possible_releases.forEach(function(r, index, array) {
    var request = new XMLHttpRequest();
    request.open("HEAD", "/" + r + "/" + "targets.json", false);
    request.send();
    if (request.status == 200) {
        releases.push(r);
    }
});
var releaseinput = document.getElementById("releaseinput");
while (releaseinput.options.length) {
    releaseinput.remove(0);
}
for (var i = 0; i < releases.length; i++) {
    var release = new Option(releases[i]);
    releaseinput.options.add(release);
}
releaseinput.addEventListener("change", function(event) {
    var url ="/" + releaseinput.value + "/targets.json";
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'json';
    xhr.onload = function() {
        if (xhr.status === 200) {
            devices = xhr.response.devices;
            name2board = xhr.response.name2board;
        } else {
            console.log("Error loading target list for release" + releaseinput.value);
        }
    };
    xhr.send();
});

var targetinput = document.getElementById("targetinput");
var currentFocus;
function showDocumentation() {
    if(!targetinput.value) {
        targetinput.style.transition = "border 5ms ease-out";
        targetinput.style.borderColor = "red";
        setTimeout(function(){
            targetinput.style.transition = "border 5000ms ease-out";
            targetinput.style.borderColor = "#fff";
        }, 5000);
        return;
    }
    if(!releaseinput.value) {
        releaseinput.style.transition = "border 5ms ease-out";
        releaseinput.style.borderColor = "red";
        setTimeout(function(){
            releaseinput.style.transition = "border 5000ms ease-out";
            releaseinput.style.borderColor = "#fff";
        }, 5000);
        return;
    }
    n2b = name2board[targetinput.value]
    var url ="/" + releaseinput.value + "/api/" + (n2b ? n2b : targetinput.value).toLowerCase() + "/";
    location.href = url;
}
targetinput.addEventListener("input", function(event) {
    var a, b, i, val = this.value;
    closeAllLists();
    if (!val) { return false;}
    currentFocus = -1;
    a = document.createElement("DIV");
    a.setAttribute("id", this.id + "autocomplete-list");
    a.setAttribute("class", "autocomplete-items");
    this.parentNode.appendChild(a);
    for (i = 0; i < devices.length; i++) {
        var regex = RegExp(val.toLowerCase());
        if (devices[i].toLowerCase().match(regex) != null) {
            b = document.createElement("DIV");
            b.innerHTML = devices[i].replace(regex, function(str) { return "<strong>" + str + "</strong>" })
            b.innerHTML += "<input type='hidden' value='" + devices[i] + "'>";
            b.addEventListener("click", function(event) {
                targetinput.value = this.getElementsByTagName("input")[0].value;
                closeAllLists();
            });
            a.appendChild(b);
        }
    }
});
targetinput.addEventListener("keydown", function(event) {
    var list = document.getElementById(this.id + "autocomplete-list");
    if (list) {
        list = list.getElementsByTagName("div");
    }
    if (event.keyCode == 40) { // down key
        currentFocus++;
        makeItemActive(list);
    } else if (event.keyCode == 38) { // up key
        currentFocus--;
        makeItemActive(list);
    } else if (event.keyCode == 13) { // enter key
        event.preventDefault();
        if (currentFocus > -1) {
            /*and simulate a click on the "active" item:*/
            if (list) {
                list[currentFocus].click();
            }
        }
    }
});
function removeActiveFromList(list) {
    for (var i = 0; i < list.length; i++) {
        list[i].classList.remove("autocomplete-active");
    }
}
function makeItemActive(list) {
    if (!list) return false;
    removeActiveFromList(list);
    if (currentFocus >= list.length) {
        currentFocus = 0;
    }
    if (currentFocus < 0) {
        currentFocus = (list.length - 1);
    }
    list[currentFocus].classList.add("autocomplete-active");
}
function closeAllLists(element) {
    var items = document.getElementsByClassName("autocomplete-items");
    for (var i = 0; i < items.length; i++) {
        if (element != items[i] && element != targetinput) {
            items[i].parentNode.removeChild(items[i]);
        }
    }
}
document.addEventListener("click", function (element) {
    closeAllLists(element.target);
});
</script>
<noscript>
<h3>Select your target</h3>
<input type="text" id="input" placeholder="Search for e.g. 'F469' or 'NUCLEO'"/>
<ul>
{% for (board, name, _) in boards %}
 <li id="{{ board }}"><a href="/develop/api/{{ board }}/">{{ name }}</a></li>
{% endfor %}
{% for d in devices %}
 <li id="{{ d }}"><a href="/develop/api/{{ d }}/">{{ d | upper }}</a></li>
{% endfor %}
</ul>
</noscript>
</main>
</body>
</html>
