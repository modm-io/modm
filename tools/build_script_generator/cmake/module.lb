#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2018, Sergiy Yevtushenko
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

import os
# import all common code
exec(open(localpath("../common.py")).read())

def init(module):
    module.parent = "build"
    module.name = "cmake"
    module.description = "CMake Build Script Generator"


def prepare(module, options):
    if options[":target"].identifier["platform"] == "stm32":
        return True
    return False


def build(env):
    pass


def post_build(env, buildlog):
    target = env["modm:target"]
    # get CPU information
    subs = common_target(target)
    # Extract all source code files
    subs["sources"] = common_source_files(env, buildlog)
    # get memory information
    subs["memories"] = common_memories(target)
    # get memory information
    subs["flags"] = common_compiler_flags("gcc", target, buildlog)

    # Add SCons specific data
    subs.update({
        "project_path": os.getcwd(),
        "metadata": buildlog.metadata,
        "openocd_config" : buildlog.metadata["openocd.configfile"][0],
        "compiler": "gcc",
        "project_name": env[":build:project.name"],
        "build_path": env[":build:build.path"],
    })
    # Set these substitutions for all templates
    env.substitutions = subs

    def flag_format(flag):
        subs = {
            "target_base": "${CMAKE_PROJECT_NAME}",
            "linkdir": "link"
        }
        flag = flag.format(**subs)
        return flag

    env.append_metadata_unique('include_path', 'src')
    env.template("resources/CMakeLists.txt.in", "CMakeLists.txt")
    env.template("resources/Makefile.in", "Makefile")
    env.copy("cmake_scripts/report-build-options.cmake", "modm/cmake/report-build-options.cmake")
    env.template("cmake_scripts/configure-stm32-gcc.cmake.in", "modm/cmake/configure-stm32-gcc.cmake", filters={"flag_format": flag_format})
