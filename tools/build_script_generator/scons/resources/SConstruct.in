# Copyright (c) 2017-2018, Fabian Greif
# Copyright (c) 2017-2018, Niklas Hauser
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

#!/usr/bin/env python

import os
from os.path import join, abspath

rootpath = "modm"

env = Environment(
        toolpath=[join(rootpath, "scons", "site_tools"),
                  join(rootpath, "ext", "dlr", "scons-build-tools", "site_tools")],

%# ================================== STM32 ===================================
%% if platform in ["stm32"]
        tools=[
            "compiler_arm_none_eabi_gcc",
            "settings_buildpath",
            "utils_buildformat",
            "utils_buildsize",
            "program_openocd",
%% for tool in build_tools
            "{{tool}}",
%% endfor
            ],
        CPU="{{ core }}",
        CFLAGS_language=["-std=gnu99"],
        LINKFLAGS_optimize=[
            "-Wl,--relax",
            "-Wl,--gc-sections",
            "-Wl,-wrap,_malloc_r",
            "-Wl,-wrap,_calloc_r",
            "-Wl,-wrap,_realloc_r",
            "-Wl,-wrap,_free_r",
            "--specs=nano.specs",
            "--specs=nosys.specs",
            "-nostartfiles",
            ],
        ENV=os.environ)

#env.Append(CCFLAGS_warning=["-Werror"])
env.Append(LINKFLAGS_other=["-Wl,--no-wchar-size-warning"])
env.Append(LINKFLAGS_target=[
    "-Lmodm/link",
    "-Tlinkerscript.ld",
    ])

%# =================================== AVR ====================================
%% elif platform in ["avr"]
        tools=[
            "compiler_avr_gcc",
            "settings_buildpath",
            "utils_buildformat",
            # "utils_buildsize",
            # "program_avrdude",
%% for tool in build_tools
            "{{tool}}",
%% endfor
            ],
        CCFLAGS_target=[
            "-mmcu={{ partname }}",
            "-DF_CPU=${CONFIG_CLOCK_F_CPU}"
            ],
        CFLAGS_language=["-std=gnu99"],
        LINKFLAGS_other=[
            "-Wl,--fatal-warnings",
            ],
        ENV=os.environ)

env.Append(ASFLAGS_target=[
    "-mmcu={{ partname }}",
    "-xassembler-with-cpp",
    ])
env.Append(LINKFLAGS_target=[
    "-Lmodm/link",
    "-Tlinkerscript.ld",
    ])

%# ================================== HOSTED ==================================
%% elif platform in ["hosted"]
        tools=[
            "compiler_hosted_{{compiler}}",
            "settings_buildpath",
            "utils_buildformat",
            "utils_buildsize",
%% for tool in build_tools
            "{{tool}}",
%% endfor
            ],
        CXXFLAGS_language=[
            "-std=c++14",
            ],
        ENV=os.environ)
%% endif
%# ============================================================================

env.RemoveFromList("CCFLAGS_warning", [
    "-Wshadow",
    "-Wcast-align",
    "-Wmissing-declarations",
    "-Wcast-qual",
    "-Wredundant-decls",])
env.RemoveFromList("CXXFLAGS_warning", [
    "-Wold-style-cast",
    "-Wnon-virtual-dtor"])

# User Config Options
env["BASEPATH"]  = abspath(rootpath)
env["BUILDPATH"] = abspath("{{ build_path }}")

library = env.SConscript(join(rootpath, "SConscript"), exports="env")

%% if info_git
env.InfoGit()
%% endif
%% if info_build
env.InfoBuild()
%% endif

%% if options["::is_unittest"]
headers = env.Glob("modm/test/*.hpp")
headers += env.Glob("modm/test/*/*.hpp")
headers += env.Glob("modm/test/*/*/*.hpp")
headers += env.Glob("modm/test/*/*/*/*.hpp")
files = env.UnittestRunner(target="main.cpp", source=headers, template="modm/test/runner.cpp.in")
%% else
# FIXME: better globbing! (recursive?)
files = env.Glob("*.cpp")
files += env.Glob("*/*.cpp")
# Needed for communication examples for generated postman include paths!
env.Append(CPPPATH=["."])
%% endif

%% if image_source != ""
for image in Glob(abspath(join("{{image_source}}", "*.pbm"))):
    source, header = env.Bitmap(image)
    files.append(source)
%% endif
%% if xpcc_source != ""
files += env.XpccCommunication(
    abspath("{{xpcc_source}}"),
    "{{xpcc_container}}",
    dtdPath=abspath(join(rootpath, "tools", "system_design", "xml", "dtd")),
    path=abspath("{{xpcc_generate}}"),
    namespace="{{xpcc_namespace}}")
%% endif
program = env.Program(target="project.elf", source=files)

env.Alias("symbols", env.Symbols(program))
%% if platform in ["hosted"]
env.Alias("build", program)
env.Alias("run", env.Run(program))
env.Alias("all", ["build", "run"])
%% else
%% if platform in ["stm32"]
env.Alias("size", env.Size(program))
if "CONFIG_OPENOCD_COMMANDS" in env:
    env.Alias("program", env.OpenOcd(program))
%% endif

hexfile = env.Hex(program)

env.Alias("build", [hexfile, env.Listing(program)])
%% if platform in ["stm32"]
env.Alias("all", ["build", "size"])
%% else
env.Alias("all", ["build"])
%% endif
%% endif

env.Default("all")
