# Copyright (c) 2017-2018, Niklas Hauser
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

#!/usr/bin/env python3

from os.path import join, abspath

Import("env")
profile = ARGUMENTS.get("profile", "release")
%% if is_modm
env["BUILDPATH"] = join(env["CONFIG_BUILD_BASE"], profile)

%% if family == "darwin"
# Using homebrew gcc-8 on macOS
env["COMPILERSUFFIX"] = "-8"
%% endif
%% endif

# SCons tools
env.Append(toolpath=[
%% for toolpath in toolpaths | sort
    abspath(r"{{ toolpath | modm.windowsify(escape_level=0) }}"),
%% endfor
])
%% for tool in tools | sort
env.Tool("{{tool}}")
%% endfor

%% if is_modm
env["BASEPATH"] = abspath(".")

%% if options["info.git"] != "Disabled"
env.InfoGit(with_status={{ "True" if "Status" in options["info.git"] else "False" }})
%% endif
%% if options["info.build"]
env.InfoBuild()
%% endif
%% endif

%% macro generate_flags_for_profile(name, profile, append=False)
env{% if append %}.Append({{name | upper}}{% else %}["{{name | upper}}"]{% endif %} = [
%% for flag in flags[name][profile] | sort
    {{ flag | flags_format }},
%% endfor
]{% if append %}){% endif -%}
%% endmacro

%% macro generate_flags(name, append=False)
%% if not append or flags[name][""] | length
{{ generate_flags_for_profile(name, "", append) }}
%% endif
%% for profile in flags[name].keys()
%% if profile != "" and flags[name][profile] | length
if profile == "{{ profile }}":
    {{ generate_flags_for_profile(name, profile, True) | lbuild.indent(4) }}
%% endif
%% endfor
%% endmacro

# Toolchain configuration
{{ generate_flags("cppdefines", True) }}
{{ generate_flags("ccflags", not is_modm) }}
{{ generate_flags("cflags", not is_modm) }}
{{ generate_flags("cxxflags", not is_modm) }}
{{ generate_flags("asflags", not is_modm) }}
{{ generate_flags("linkflags", not is_modm) }}
{{ generate_flags("archflags", not is_modm) }}

%% if is_modm
# ARCHFLAGS must be known for compiling *and* linking
env.Append(CCFLAGS="$ARCHFLAGS")
env.Append(ASFLAGS="$ARCHFLAGS")
env.Append(LINKFLAGS="$ARCHFLAGS")

%% if family != "darwin"
env["_LIBFLAGS"] = "-Wl,--start-group " + env["_LIBFLAGS"] + " -Wl,--end-group"
%% endif
%% if platform not in ["hosted"]
# We need to link libmodm.a with --whole-archive, so that all weak symbols are visible to the linker.
# Functions placed in a linker section list (like modm_section(".hardware_init")) are typically not
# referenced externally, so the linker will discard them when searching.
# From https://sourceware.org/binutils/docs/ld/Options.html#Options:
#     For each archive mentioned on the command line after the --whole-archive option, include every object
#     file in the archive in the link, rather than searching the archive for the required object files.
env["_LIBFLAGS"] = "-Wl,--whole-archive " + env["_LIBFLAGS"] + " -Wl,--no-whole-archive"
# alternative workarounds
# env["LINKCOM"] = env["LINKCOM"].replace("$_LIBFLAGS", "-Wl,--whole-archive $_LIBFLAGS -Wl,--no-whole-archive")
# workaround for one individual library
# whole_archive = env.Command(join(env.Dir("#").path, "-Wl,--whole-archive"), [], "")
# no_whole_archive = env.Command(join(env.Dir("#").path, "-Wl,--no-whole-archive"), [], "")
# library = whole_archive + library + no_whole_archive
%% endif

# Device configuration
env["CONFIG_DEVICE_NAME"] = "{{ partname }}"
%% if memories | length
env["CONFIG_DEVICE_MEMORY"] = [
%% for memory in memories
    {{ memory }},
%% endfor
]
%% endif

# Programming configuration
%% if platform in ["avr"]
env["CONFIG_AVRDUDE_DEVICE"] = "{{ mcu }}"
env["CONFIG_AVRDUDE_PROGRAMMER"] = "{{ avrdude_programmer }}"
env["CONFIG_AVRDUDE_PORT"] = "{{ avrdude_port }}"
env["CONFIG_AVRDUDE_OPTIONS"] = "{{ avrdude_options }}"
%% if avrdude_baudrate > 0
env["CONFIG_AVRDUDE_BAUDRATE"] = "{{ avrdude_baudrate }}"
%% endif
%% elif platform in ["stm32"] or platform in ["lpc"]
env.Append(MODM_OPENOCD_CONFIGFILES=["$BASEPATH/openocd.cfg"])
env.SetDefault(MODM_OPENOCD_GDBINIT=["$BASEPATH/openocd_gdbinit"])
env.SetDefault(MODM_GDBINIT=["$BASEPATH/gdbinit"])
%% endif

# XPCC generator tool path
env["XPCC_SYSTEM_DESIGN"] = join(abspath("."), "tools", "xpcc_generator")
%% endif


env.AppendUnique(CPPPATH=[
%% if family == "darwin"
	"/usr/local/include",
%% endif
%% for path in include_paths | sort
    abspath(r"{{ path | relocate | modm.windowsify(escape_level=0) }}"),
%% endfor
])

files = [
%% for file, flags in sources if not flags | length
    env.File(r"{{ file | relocate | modm.windowsify(escape_level=0) }}"),
%% endfor
]
%% for file, flags in sources
    %% if flags | length
flags = { {%- for key, profiles in flags.items() if "" in profiles %}"{{ key | upper }}": {{profiles[""]}}, {% endfor -%} }
    %% for key, profiles in flags.items()
        %% for profile, flags in profiles.items() if "" != profile
if profile == "{{profile}}": flags["{{ key | upper }}"].extend({{flags}});
        %% endfor
    %% endfor
files.append(env.Object(r"{{ file | relocate | modm.windowsify(escape_level=0) }}", **flags))
    %% endif
%% endfor

library = env.StaticLibrary(target="{{ repo }}", source=files)

env.AppendUnique(LIBS=[
    library,
%% for library in libraries | sort
    "{{ library }}",
%% endfor
])
env.AppendUnique(LIBPATH=[
%% if family == "darwin"
	"/usr/local/lib",
%% endif
    abspath(str(library[0].get_dir())),
%% for library in library_paths | sort
    abspath(r"{{ library | relocate | modm.windowsify(escape_level=0) }}"),
%% endfor
])
%% if packages | length
env.ParseConfig("pkg-config --cflags --libs {{ packages | sort | join(" ") }}")
%% endif

Return("library")
