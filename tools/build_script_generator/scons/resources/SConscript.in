# Copyright (c) 2017-2018, Niklas Hauser
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

#!/usr/bin/env python3

from os.path import join, abspath

Import("env")
profile = ARGUMENTS.get("profile", "release")

env.Append(toolpath=[abspath("scons/site_tools"), abspath("ext/dlr/scons-build-tools/site_tools")])
%% for tool in build_tools | sort
env.Tool("{{tool}}")
%% endfor
env["BASEPATH"] = abspath(".")

env.Append(CPPPATH=[
%% for path in metadata.include_path | sort
    abspath("{{ path }}"),
%% endfor
])

files = [
%% for file in sources
    env.File("{{ file }}"),
%% endfor
]

library = env.StaticLibrary(target="modm", source=files)

%% if platform not in ["hosted"]
# We need to link libmodm.a with --whole-archive, so that all weak symbols are visible to the linker.
# Functions placed in a linker section list (like modm_section(".hardware_init")) are typically not
# referenced externally, so the linker will discard them when searching.
# From https://sourceware.org/binutils/docs/ld/Options.html#Options:
#     For each archive mentioned on the command line after the --whole-archive option, include every object
#     file in the archive in the link, rather than searching the archive for the required object files.
env["_LIBFLAGS"] = "-Wl,--whole-archive " + env["_LIBFLAGS"] + " -Wl,--no-whole-archive"
# alternative workarounds
# env["LINKCOM"] = env["LINKCOM"].replace("$_LIBFLAGS", "-Wl,--whole-archive $_LIBFLAGS -Wl,--no-whole-archive")
# workaround for one individual library
# whole_archive = env.Command(join(env.Dir("#").path, "-Wl,--whole-archive"), [], "")
# no_whole_archive = env.Command(join(env.Dir("#").path, "-Wl,--no-whole-archive"), [], "")
# library = whole_archive + library + no_whole_archive
%% endif

env.Append(LIBS=[
    library,
%% for library in metadata.required_library | sort
    "{{ library }}",
%% endfor
])
env.AppendUnique(LIBPATH=[abspath(str(library[0].get_dir()))])
%% if "required_pkg" in metadata
env.ParseConfig("pkg-config --cflags --libs {{ metadata.required_pkg | sort | join(" ") }}")
%% endif

# Device configuration
env["CONFIG_DEVICE_NAME"] = "{{ partname }}"
%% if memories | length
env["CONFIG_DEVICE_MEMORY"] = [
%% for memory in memories
    {{ memory }},
%% endfor
]
%% endif

# Programming configuration
%% if platform in ["avr"]
env["CONFIG_AVRDUDE_DEVICE"] = "{{ mcu }}"
env["CONFIG_AVRDUDE_PROGRAMMER"] = "{{ avrdude_programmer }}"
env["CONFIG_AVRDUDE_PORT"] = "{{ avrdude_port }}"
env["CONFIG_AVRDUDE_OPTIONS"] = "{{ avrdude_options }}"
%% if avrdude_baudrate > 0
env["CONFIG_AVRDUDE_BAUDRATE"] = "{{ avrdude_baudrate }}"
%% endif
%% endif

# XPCC generator tool path
env["XPCC_SYSTEM_DESIGN"] = join(abspath("."), "tools", "xpcc_generator")

# Toolchain configuration
%% macro generate_flags_for_profile(name, profile, append=False)
env{% if append %}.Append({{name}}{% else %}["{{name}}"]{% endif %} = [
%% for flag in flags[name][profile] | sort
    {{ flag | flag_format }},
%% endfor
]{% if append %}){% endif -%}
%% endmacro

%% macro generate_flags(name, append=False)
%% if not append or flags[name].base | length
{{ generate_flags_for_profile(name, "base", append) }}
%% endif
%% for profile in flags[name].keys()
%% if profile != "base" and flags[name][profile] | length
if profile == "{{ profile }}":
    {{ generate_flags_for_profile(name, profile, True) | lbuild.indent(4) }}
%% endif
%% endfor
%% endmacro

{{ generate_flags("CPPDEFINES", True) }}
{{ generate_flags("CCFLAGS") }}
{{ generate_flags("CFLAGS") }}
{{ generate_flags("CXXFLAGS") }}
{{ generate_flags("ASFLAGS") }}
{{ generate_flags("ARCHFLAGS") }}
{{ generate_flags("LINKFLAGS") }}
# ARCHFLAGS must be known for compiling *and* linking
env.Append(CCFLAGS="$ARCHFLAGS")
env.Append(ASFLAGS="$ARCHFLAGS")
env.Append(LINKFLAGS="$ARCHFLAGS")

for flags in ["CCFLAGS", "CFLAGS", "CXXFLAGS", "ASFLAGS", "ARCHFLAGS", "LINKFLAGS"]:
	flags_str = ARGUMENTS.get(flags)
	if flags_str is not None:
		flags_list = flags_str.split(",")
		for flag in flags_list:
			if len(flag) > 1 and flag[0] == "~":
				try:
					env[flags].remove(flag[1:])
				except ValueError:
					print("'" + flag[1:] + "' does not exist in " + flags +
						" and therefore can not be removed.")
					print("Info: " + flags + ": " + ", ".join(env[flags]))
					exit(1)
			else:
				env[flags].append(flag)

Return("library")
