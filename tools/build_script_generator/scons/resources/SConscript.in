# Copyright (c) 2017-2018, Fabian Greif
# Copyright (c) 2017-2018, Niklas Hauser
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

#!/usr/bin/env python

import os

Import("env")

env.Append(CPPPATH=[
%% for path in metadata.include_path
    os.path.abspath("{{ path }}"),
%% endfor
])

files = [
%% for file in files
    env.File("{{ file }}"),
%% endfor
]

library = env.StaticLibrary(target="modm", source=files)

env.Append(LIBS=[
    library,
%% for library in metadata.required_library
    "{{ library }}",
%% endfor
])
env.AppendUnique(LIBPATH=[os.path.abspath(str(library[0].get_dir()))])
%% if "required_pkg" in metadata
env.ParseConfig("pkg-config --cflags --libs {{ metadata.required_pkg | join(" ") }}")
%% endif

%% if "cpp.define" in metadata
env.Append(CPPDEFINES=[
%% for define in metadata["cpp.define"]
    "{{ define }}",
%% endfor
])
%% endif

# Device configuration
env["CONFIG_DEVICE_NAME"] = "{{ partname }}"
%% if memories | length
env["CONFIG_DEVICE_MEMORY"] = [
%% for memory in memories
    {{ memory }},
%% endfor
]
%% endif
# Programming configuration
%% if "openocd.configfile" in metadata
env["CONFIG_OPENOCD_SEARCHDIRS"] = []
env["CONFIG_OPENOCD_CONFIGFILES"] = [
%% for configfile in metadata["openocd.configfile"]
    "{{ configfile }}",
%% endfor
]
env["CONFIG_OPENOCD_COMMANDS"] = [
    "init",
    "reset halt",
    "flash write_image erase $SOURCE",
    "reset halt",
    "mww 0xE000EDF0 0xA05F0000",
    "shutdown"
]
%% endif

%% if ":platform:clock:f_cpu" in options
env["CONFIG_CLOCK_F_CPU"] = "{{ options[":platform:clock:f_cpu"] }}"
%% endif

env['XPCC_SYSTEM_BUILDER'] = os.path.join("modm", "tools", "system_design", "builder")

%% if platform not in ["hosted"]
# We need to link libmodm.a with --whole-archive, so that all weak symbols are visible to the linker.
# Functions placed in a linker section list (like modm_section(".hardware_init")) are typically not
# referenced externally, so the linker will discard them when searching.
# From https://sourceware.org/binutils/docs/ld/Options.html#Options:
#     For each archive mentioned on the command line after the --whole-archive option, include every object
#     file in the archive in the link, rather than searching the archive for the required object files.
env["_LIBFLAGS"] = '-Wl,--whole-archive ' + env["_LIBFLAGS"] + ' -Wl,--no-whole-archive'
# alternative workaround
# env["LINKCOM"] = env["LINKCOM"].replace('$_LIBFLAGS', '-Wl,--whole-archive $_LIBFLAGS -Wl,--no-whole-archive')
%% endif

Return("library")
