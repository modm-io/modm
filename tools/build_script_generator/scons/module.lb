#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2017-2018, Niklas Hauser
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

from os.path import join, relpath, isdir

def init(module):
    module.name = ":build:scons"
    module.description = FileReader("module.md")


def prepare(module, options):
    module.add_option(
        BooleanOption(name="include_sconstruct", default=True,
                      description=descr_include_sconstruct))
    module.add_option(
        PathOption(name="cache_dir", default="", empty_ok=True, absolute=True,
                   description=descr_cache_dir))
    module.add_option(
        PathOption(name="image.source", default="", empty_ok=True, absolute=True,
                   description=descr_image_source))

    module.add_option(
        PathOption(name="unittest.source", default="", empty_ok=True, absolute=True,
                   description=descr_unittest_source))
    module.add_option(
        PathOption(name="unittest.runner", default="", empty_ok=True, absolute=True,
                   description=descr_unittest_runner))
    module.add_option(
        EnumerationOption(name="info.git", default="Disabled",
                          enumeration=["Disabled", "Info", "Info+Status"],
                          description=descr_info_git))
    module.add_option(
        BooleanOption(name="info.build", default=False,
                      description=descr_info_build))

    module.add_collector(
        CallableCollector(name="flag_format",
                          description="Formatting compile flags for SCons"))
    module.add_collector(
        PathCollector(name="path.tools",
                      description="SCons tool paths to be added to the Environment"))
    module.add_collector(
        StringCollector(name="tools",
                        description="SCons tools to be added to the Environment"))

    return True


def build(env):
    env.outbasepath = "modm/src/"
    if env["info.git"] != "Disabled":
        env.collect(":build:gitignore", "modm/src/info_git.c")
        env.template("resources/info_git.h.in", "info_git.h",
                     substitutions={"with_status": "Status" in env["info.git"]},)
    if env["info.build"]:
        env.collect(":build:gitignore", "modm/src/info_build.c")
        env.copy("resources/info_build.h", "info_build.h")

    env.outbasepath = "modm/"
    # Copy the scons-build-tools
    env.copy(repopath("ext/dlr/scons-build-tools"), "ext/dlr/scons-build-tools")
    env.copy("site_tools", "scons/site_tools")
    # Generate the env.BuildTarget tool
    env.substitutions = env.query("::device")
    env.substitutions["upload_with_artifact"] = env.has_module(":crashcatcher")
    env.outbasepath = "modm/scons/site_tools"
    env.template("resources/build_target.py.in", "build_target.py")

    def flag_format(flag):
        subs = {
            "target_base": "\"${TARGET.base}\"",
            "linkdir": "abspath(\"link\")"
        }
        flag = '"{}"'.format(flag)
        vals = ["{}={}".format(t, r) for t, r in subs.items() if "{{{}}}".format(t) in flag]
        if len(vals):
            flag = "{}.format({})".format(flag, ", ".join(vals))
            return flag
        return None

    env.collect("flag_format", flag_format)

    is_unittest = env.has_module(":test")
    has_xpcc_generator = env.has_module(":communication:xpcc:generator")
    has_image_source = len(env["image.source"])
    # SCons tools and toolpaths
    toolpaths = {
        "scons/site_tools",
        "ext/dlr/scons-build-tools/site_tools"
    }
    tools = {
        "settings_buildpath",
        "utils_buildformat",
        "find_files",
        "template",
        "qtcreator",
        "gdb",
        "build_target",
        "artifact",
        "log_itm",
    }
    if has_xpcc_generator:
        tools.add("xpcc_generator")
    if has_image_source:
        tools.add("bitmap")
    if env["info.git"] != "Disabled" or env["info.build"]:
        tools.add("info")
    if is_unittest:
        tools.add("unittest")

    device = env.query("::device")
    if device["core"].startswith("cortex-m"):
        tools.update({"compiler_arm_none_eabi_gcc", "program_openocd",
                      "black_magic_probe", "utils_buildsize", "postmortem_gdb"})
    elif device["core"].startswith("avr"):
        tools.update({"compiler_avr_gcc", "utils_buildsize", "program_avrdude"})
    else: # hosted
        tools.update({"compiler_hosted_gcc"})

    env.collect("path.tools", *toolpaths)
    env.collect("tools", *tools)


def post_build(env):
    is_unittest = len(env["unittest.source"])
    has_xpcc_generator = env.has_module(":communication:xpcc:generator")
    has_image_source = len(env["image.source"])
    repositories = [p for p in env.buildlog.repositories if isdir(env.real_outpath(p, basepath="."))]
    repositories = sorted(repositories, key=lambda name: "0" if name == "modm" else name)

    target = env["modm:target"]
    subs = env.query("::device")
    sources = env.query("::source_files")
    if env["info.git"] != "Disabled":
        sources["modm"].append("modm/src/info_git.c")
    if env["info.build"]:
        sources["modm"].append("modm/src/info_build.c")

    cache_dir = env["cache_dir"]
    if cache_dir.endswith("$cache"):
        cache_dir = env[":build:build.path"] + "/cache"
        if "build/" in cache_dir:
            cache_dir = "{}build/cache".format(cache_dir.split("build/")[0])
    if subs["core"].startswith("cortex-m"):
        # get memory information
        subs["memories"] = env.query("::memories")
    else:
        subs["memories"] = []
    # Add SCons specific data
    subs.update({
        "build_path": env.relative_outpath(env[":build:build.path"]),
        "cache_dir": env.relative_outpath(cache_dir) if len(cache_dir) else "",
        "generated_paths": repositories,
        "is_unittest": is_unittest,

        "has_image_source": has_image_source,
        "has_xpcc_generator": has_xpcc_generator,
    })
    if has_image_source:
        subs["image_source"] = env.relative_outpath(env["image.source"])
    if is_unittest:
        subs["unittest_source"] = env.relative_outpath(env["unittest.source"])
        subs["unittest_runner"] = env.relative_outpath(env["unittest.runner"])
    if has_xpcc_generator:
        subs.update({
            "generator_source": env.relative_outpath(env.get(":communication:xpcc:generator:source", "")),
            "generator_container": env.get(":communication:xpcc:generator:container", ""),
            "generator_path": env.relative_outpath(env.get(":communication:xpcc:generator:path", "")),
            "generator_namespace": env.get(":communication:xpcc:generator:namespace", ""),
        })
    if subs["platform"] == "avr":
        subs.update(env.query("::avrdude_options"))
    # Set these substitutions for all templates
    env.substitutions = subs

    for repo in repositories:
        files = []
        repo_filter = lambda scope: scope.repository == repo
        repo_flags = env.query("::collect_flags")(env, repo_filter)

        for f in sources[repo]:
            for flag, profiles in repo_flags[f].items():
                profiles[""].insert(0, "${}".format(flag.upper()))
            files.append( (f, repo_flags[f]) )

        include_paths = env.collector_values("::path.include", filterfunc=repo_filter)
        libary_paths = env.collector_values("::path.library", filterfunc=repo_filter)
        libaries = env.collector_values("::library", filterfunc=repo_filter)
        packages = env.collector_values("::pkg-config", filterfunc=repo_filter)
        toolpaths = env.collector_values("path.tools", filterfunc=repo_filter)
        tools = env.collector_values("tools", filterfunc=repo_filter)

        subs.update({
            "repo": repo,
            "flags": repo_flags[None],
            "sources": files,
            "libraries": libaries,
            "library_paths": libary_paths,
            "include_paths": include_paths,
            "packages": packages,
            "toolpaths": toolpaths,
            "tools": tools,
            "is_modm": repo == "modm",
        })
        def flags_format(flag):
            for fmt in env.collector_values("flag_format"):
                nflag = fmt(flag)
                if nflag: return nflag;
            return '"{}"'.format(flag)
        # Generate library SConscript
        env.outbasepath = repo
        env.template("resources/SConscript.in", "SConscript",
                     filters={"flags_format": flags_format,
                              "relocate": lambda p: env.relative_outpath(p, repo)})

    # these are the ONLY files that are allowed to NOT be namespaced with modm!
    env.outbasepath = "."
    if env["include_sconstruct"]:
        env.template("resources/SConstruct.in", "SConstruct")


# ============================ Option Descriptions ============================
descr_include_sconstruct = """# Generate a SConstruct file

!!! warning "This overwrites any top-level `SConstruct` file!"
"""

descr_cache_dir = """# Path to SConstruct CacheDir

If value is `$cache`, the cache is placed into the top-level `build/` folder.
You can disable CacheDir by setting an empty string.
"""

descr_image_source = """# Path to directory containing .pbm files"""

descr_unittest_source = """# Path to directory containing unittests

When this path is declared, the generated SConstruct will compile **only** the
unittests, not your application source code!
You should use separate project configurations for compiling your unittest and
application!
"""

descr_unittest_runner = """# Path to unittests runner template

See modm/test/runners/*.cpp.in
"""

descr_info_git = """# Generate git repository state information

- `Info`: generates information about the last commit.
- `Info+Status`: like `Info` plus git file status.
"""

descr_info_build = """# Generate build state information"""
