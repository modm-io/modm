#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2017-2018, Niklas Hauser
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

import os
# import all common code
exec(open(localpath("../common.py")).read())

def init(module):
    module.name = "build.scons"
    module.description = "SCons Build Script Generator"


def prepare(module, options):
    _, default_project_name = os.path.split(os.getcwd())
    module.add_option(
        BooleanOption(name="include_demo_project", default=False,
                      description="Include a demo main file to get a full compilable project."))
    module.add_option(
        BooleanOption(name="include_sconstruct", default=True,
                      description="Generate modm specific SConstruct file."))
    module.add_option(
        BooleanOption(name="is_unittest", default=False,
                      description="Generate SConstruct file for modm unittests."))

    module.add_option(
        StringOption(name="project.name", default=default_project_name,
                     description="Project name for executable"))
    module.add_option(
        StringOption(name="build.path", default="build/"+default_project_name,
                     description="Path to the build folder"))

    module.add_option(
        StringOption(name="image.source", default="",
                     description="Path to the image folder"))
    module.add_option(
        StringOption(name="xpcc.source", default="",
                     description="Path to the XPCC source file"))
    module.add_option(
        StringOption(name="xpcc.container", default="",
                     description="Name of the XPCC container to generate for"))
    module.add_option(
        StringOption(name="xpcc.generate", default="communication",
                     description="Path to the XPCC generated folder"))
    module.add_option(
        StringOption(name="xpcc.namespace", default="robot",
                     description="Namespace of the generated XPCC communications"))

    module.add_option(
        EnumerationOption(name="info.git", default="Disabled",
                          enumeration=["Disabled", "Info", "Info+Status"],
                          description="Generate CPP defines about the git repository state"))
    module.add_option(
        BooleanOption(name="info.build", default=False,
                      description="Generate CPP defines about the build state"))

    if options[":target"].identifier["platform"] == "avr":
        # we need the clock:f_cpu option!
        module.depends(":platform:clock")
        module.add_option(
            StringOption(name="avrdude.programmer", default="avrispmkII",
                         description="AvrDude programmer"))
        module.add_option(
            StringOption(name="avrdude.port", default="usb",
                         description="AvrDude programmer port"))
        module.add_option(
            NumericOption(name="avrdude.baudrate", default=-1,
                          description="AvrDude programmer baudrate"))
        module.add_option(
            StringOption(name="avrdude.options", default="",
                         description="AvrDude programmer options"))
    elif options[":target"].identifier["platform"] == "stm32":
        module.add_option(
            StringOption(name="openocd.cfg", default="",
                         description="Path to the OpenOCD configuration file"))
    return True


def build(env):
    env.append_metadata_unique("include_path", "src")
    fcpu = env.get_option(":platform:clock:f_cpu", None)
    if fcpu is not None:
        env.append_metadata_unique("cpp.define", "F_CPU={}".format(fcpu))

def post_build(env, buildlog):
    target = env["modm:target"]
    # get CPU information
    subs = common_target(target)

    build_tools = [
        "settings_buildpath",
        "utils_buildformat",
        "find_files",
        "template",
        "cmake_wrapper",
    ]
    if len(env["xpcc.source"]):
        build_tools += ["system_design"]
    if len(env["image.source"]):
        build_tools += ["bitmap"]
    if env["info.git"] != "Disabled" or env["info.build"]:
        build_tools += ["info"]
    if env["is_unittest"]:
        build_tools += ["unittest"]
    if subs["platform"] in ["stm32"]:
        build_tools += ["compiler_arm_none_eabi_gcc", "program_openocd", "utils_buildsize"]
    elif subs["platform"] in ["avr"]:
        build_tools += ["compiler_avr_gcc", "program_avrdude"]
    else:
        build_tools += ["utils_buildsize", "compiler_hosted_gcc"]

    # Extract all source code files
    subs["sources"] = common_source_files(env, buildlog)
    # get memory information
    subs["memories"] = common_memories(target)
    # get memory information
    subs["flags"] = common_compiler_flags("gcc", target, buildlog)
    # Add SCons specific data
    subs.update({
        "openocd_base_dir": os.path.dirname(env.get_option("::openocd.cfg", "")),
        "openocd_file": os.path.basename(env.get_option("::openocd.cfg", "")),
        "metadata": buildlog.metadata,
        "build_tools": build_tools,
    })
    # Set these substitutions for all templates
    env.substitutions = subs

    def flag_format(flag):
        subs = {
            "target_base": "\"${TARGET.base}\"",
            "linkdir": "abspath(\"link\")"
        }
        flag = "\"{}\"".format(flag)
        vals = ["{}={}".format(t, r) for t, r in subs.items() if "{{{}}}".format(t) in flag]
        if len(vals):
            flag = "{}.format({})".format(flag, ", ".join(vals))
        return flag

    # Generate library SConscript
    env.outbasepath = "modm"
    env.template("resources/SConscript.in", "SConscript", filters={"flag_format": flag_format})
    # Copy the scons-build-tools
    env.copy(repopath("ext/dlr/scons-build-tools"), "ext/dlr/scons-build-tools")
    env.copy("site_tools", "scons/site_tools")
    # Copy XPCC tools
    if "system_design" in build_tools:
        env.copy(repopath("tools/system_design"), "tools/system_design")

    # these are the ONLY files that are allowed to NOT be namespaced with modm!
    env.outbasepath = "."
    if env["include_demo_project"]:
        env.template("resources/main.cpp.in", "main.cpp")
    if env["include_demo_project"] or env["include_sconstruct"]:
        env.template("resources/SConstruct.in", "SConstruct")
