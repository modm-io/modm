#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2017-2018, Niklas Hauser
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

from os.path import join, relpath
# import all common code
exec(open(localpath("../common.py")).read())

def init(module):
    module.parent = "build"
    module.name = "scons"
    module.description = FileReader("module.md")


def prepare(module, options):
    module.add_option(
        BooleanOption(name="include_sconstruct", default=True,
                      description=descr_include_sconstruct))
    module.add_option(
        StringOption(name="image.source", default="",
                     description=descr_image_source))
    module.add_option(
        EnumerationOption(name="info.git", default="Disabled",
                          enumeration=["Disabled", "Info", "Info+Status"],
                          description=descr_info_git))
    module.add_option(
        BooleanOption(name="info.build", default=False,
                      description=descr_info_build))

    return True


def build(env):
    project_name = env[":build:project.name"]
    build_path = env[":build:build.path"]
    env.add_metadata("elf.release", join(build_path, "release", project_name + ".elf"))
    env.add_metadata("elf.debug",   join(build_path, "debug",   project_name + ".elf"))

    if env["info.git"] != "Disabled":
        env.add_metadata("gitignore", "modm/src/info_git.h")
    if env["info.build"]:
        env.add_metadata("gitignore", "modm/src/info_build.h")

    def flag_format(flag):
        subs = {
            "target_base": "\"${TARGET.base}\"",
            "linkdir": "abspath(\"link\")"
        }
        flag = '"{}"'.format(flag)
        vals = ["{}={}".format(t, r) for t, r in subs.items() if "{{{}}}".format(t) in flag]
        if len(vals):
            flag = "{}.format({})".format(flag, ", ".join(vals))
            return flag
        return None

    env.add_metadata("flag_format", flag_format)


def post_build(env, buildlog):
    is_unittest = env.has_module(":test")
    has_xpcc_generator = env.has_module(":communication:xpcc:generator")
    has_image_source = len(env["image.source"])
    repositories = [p for p in buildlog.repositories if os.path.isdir(env.outpath(p, basepath="."))]
    repositories = sorted(repositories, key=lambda name: "0" if name == "modm" else name)

    target = env["modm:target"]
    subs = common_target(target)
    sources = common_source_files(env, buildlog)

    build_tools = [
        "settings_buildpath",
        "utils_buildformat",
        "find_files",
        "template",
        "cmake_wrapper",
        "qtcreator",
        "gdb",
        "build_target",
    ]
    if has_xpcc_generator:
        build_tools += ["xpcc_generator"]
    if has_image_source:
        build_tools += ["bitmap"]
    if env["info.git"] != "Disabled" or env["info.build"]:
        build_tools += ["info"]
    if is_unittest:
        build_tools += ["unittest"]
    if subs["platform"] in ["stm32"]:
        build_tools += ["compiler_arm_none_eabi_gcc", "program_openocd", "utils_buildsize"]
    elif subs["platform"] in ["avr"]:
        build_tools += ["compiler_avr_gcc", "program_avrdude"]
    else:
        build_tools += ["utils_buildsize", "compiler_hosted_gcc"]

    # get memory information
    subs["memories"] = common_memories(target)
    # Add SCons specific data
    subs.update({
        "metadata": buildlog.metadata,
        "generated_paths": repositories,
        "build_tools": build_tools,
        "is_unittest": is_unittest,
        "has_image_source": has_image_source,
        "image_source": env["image.source"],
        "has_xpcc_generator": has_xpcc_generator,
        "generator_source": env.get_option(":communication:xpcc:generator:source", ""),
        "generator_container": env.get_option(":communication:xpcc:generator:container", ""),
        "generator_path": env.get_option(":communication:xpcc:generator:path", ""),
        "generator_namespace": env.get_option(":communication:xpcc:generator:namespace", ""),
        "avrdude_programmer": env.get_option(":build:avrdude.programmer", ""),
        "avrdude_port": env.get_option(":build:avrdude.port", ""),
        "avrdude_options": env.get_option(":build:avrdude.options", ""),
        "avrdude_baudrate": env.get_option(":build:avrdude.baudrate", 0),
    })
    # Set these substitutions for all templates
    env.substitutions = subs

    for repo in repositories:
        subs.update({
            "repo": repo,
            "flags": common_metadata_flags(buildlog, repo),
            "sources": [env.reloutpath(s, repo) for s in sources[repo]],
            "libraries": buildlog.repo_metadata["required_library"][repo],
            "library_paths": [env.reloutpath(p, repo) for p in buildlog.repo_metadata["required_library_path"][repo]],
            "include_paths": [env.reloutpath(p, repo) for p in buildlog.repo_metadata["include_path"][repo]],
        })
        def flags_format(flag):
            for fmt in buildlog.metadata["flag_format"]:
                nflag = fmt(flag)
                if nflag: return nflag;
            return '"{}"'.format(flag)
        # Generate library SConscript
        env.outbasepath = repo
        env.template("resources/SConscript.in", "SConscript", filters={"flags_format": flags_format})

    env.outbasepath = "modm"
    # Copy the scons-build-tools
    env.copy(repopath("ext/dlr/scons-build-tools"), "ext/dlr/scons-build-tools")
    env.copy("site_tools", "scons/site_tools")
    # Generate the env.BuildTarget tool
    env.outbasepath = "modm/scons/site_tools"
    env.template("resources/build_target.py.in", "build_target.py")

    # these are the ONLY files that are allowed to NOT be namespaced with modm!
    env.outbasepath = "."
    if env["include_sconstruct"]:
        env.template("resources/SConstruct.in", "SConstruct")


# ============================ Option Descriptions ============================
globals()["descr_include_sconstruct"] = """# Generate a SConstruct file

!!! warning "This overwrites any top-level `SConstruct` file!"
"""

globals()["descr_image_source"] = """# Path to directory containing .pbm files"""

globals()["descr_info_git"] = """# Generate git repository state information

- `Info`: generates information about the last commit.
- `Info+Status`: like `Info` plus git file status.
"""

globals()["descr_info_build"] = """# Generate build state information"""