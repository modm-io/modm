#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2017-2018, Niklas Hauser
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

import os

# import all common code
with open(localpath("common.py")) as common:
    exec(common.read())


def init(module):
    module.name = ":build"
    module.description = FileReader("module.md")


def prepare(module, options):
    _, default_project_name = os.path.split(os.getcwd())
    default_project_name = default_project_name.replace(".", "_").replace(" ", "_")
    platform = options[":target"].identifier["platform"]
    is_cortex_m = options[":target"].has_driver("core:cortex-m*")

    # Options
    module.add_option(
        StringOption(name="project.name", default=default_project_name,
                     description=descr_project_name))
    module.add_option(
        PathOption(name="build.path", default="build/"+default_project_name, absolute=True,
                   description=descr_build_path))

    if platform in ["avr"]:
        # we need the clock:f_cpu option!
        module.depends(":platform:clock")
        module.add_option(
            StringOption(name="avrdude.programmer", default="",
                         description="AvrDude programmer"))
        module.add_option(
            StringOption(name="avrdude.port", default="",
                         description="AvrDude programmer port"))
        module.add_option(
            NumericOption(name="avrdude.baudrate", minimum=0, default=0,
                          description="AvrDude programmer baudrate"))
        module.add_option(
            StringOption(name="avrdude.options", default="",
                         description="AvrDude programmer options"))

    elif is_cortex_m:
        module.add_option(
            PathOption(name="openocd.cfg", default="", empty_ok=True, absolute=True,
                       description=descr_openocd_cfg))

    # Queries
    module.add_query(
        EnvironmentQuery(name="source_files", factory=common_source_files))
    module.add_query(
        EnvironmentQuery(name="device", factory=common_target))
    module.add_query(
        EnvironmentQuery(name="memories", factory=common_memories))
    module.add_query(
        EnvironmentQuery(name="avrdude_options", factory=common_avrdude_options))
    module.add_query(
        Query(name="collect_flags", function=common_collect_flags_for_scope))

    # Collections
    module.add_collector(
        PathCollector(name="path.include",
                      description="Search path for header files"))
    module.add_collector(
        PathCollector(name="path.library",
                      description="Search path for static libraries"))
    module.add_collector(
        StringCollector(name="library",
                        description="Libraries to link against"))
    module.add_collector(
        StringCollector(name="pkg-config",
                        description="Packages to configure against"))

    module.add_collector(
        PathCollector(name="gitignore",
                      description="Generated files that need to be ignored by Git"))

    if is_cortex_m:
        module.add_collector(
            PathCollector(name="openocd.source",
                          description="Additional OpenOCD source files."))
        module.add_collector(
            PathCollector(name="path.openocd",
                          description="Search path for OpenOCD configuration files"))

    elif platform in ["avr"]:
        module.add_collector(
            StringCollector(name="default.avrdude.programmer",
                            description="Default AvrDude programmer"))
        module.add_collector(
            NumericCollector(name="default.avrdude.baudrate", minimum=0,
                             description="Default AvrDude baudrate"))
        module.add_collector(
            StringCollector(name="default.avrdude.port",
                            description="Default AvrDude port"))

    # Compile flag collectors
    def flag_validate(flag):
        if not flag.startswith("-"):
            raise ValueError("Flags must start with '-'!")
        return flag
    for name, descr in common_build_flag_names.items():
        module.add_collector(
            StringCollector(name=name, description=descr,
                            validate=flag_validate if "flags" in name else None))

    return True


def build(env):
    # Copy crashcatcher binaries
    if env.has_module(":crashcatcher"):
        env.outbasepath = "modm/ext/crashcatcher"
        env.copy(repopath("ext/adamgreen/crashcatcher/CrashDebug/bins/"), "bins/")

    # Append common search paths to metadata
    if env.has_collector(":build:path.openocd"):
        env.collect(":build:path.openocd", "modm/openocd")
        env.outbasepath = "modm"
        env.copy("openocd_gdbinit")
        env.copy("gdbinit")

    # Add compiler flags to metadata
    for flag, values in common_compiler_flags("gcc", env[":target"]).items():
        env.collect(flag, *values)

def post_build(env):
    if env.buildlog._buildlog._metadata:
        env.log.error("'env.add_metadata(key, *values)' is not supported anymore!\n\n"
              "Hint: Use 'env.collect(key, *values)' instead! To discover available\n"
              "      collectors, use 'lbuild discover --developer -t modm:build'.")

    # Generate a gitignore for every repository
    repositories = [p for p in env.buildlog.repositories if os.path.isdir(env.real_outpath(p, basepath="."))]
    for repo in repositories:
        gitignore = [env.relative_outpath(ignore, repo) for ignore in
                     env.collector_values("gitignore", filterfunc=lambda s: s.repository == repo)]
        if len(gitignore):
            env.substitutions["gitignore"] = gitignore
            env.outbasepath = repo
            env.template("gitignore.in", ".gitignore")

    env.outbasepath = "modm"

    if env[":target"].has_driver("core:cortex-m*"):
        # prepare custom path
        openocd_cfg = env.get(":build:openocd.cfg", "")
        if len(openocd_cfg):
            env.substitutions["openocd_user_path"] = env.relative_outpath(openocd_cfg)
        env.template("openocd.cfg.in")


# ============================ Option Descriptions ============================
descr_project_name = """# Project Name

The project name defaults to the folder name you're calling lbuild from.

It's used by your build system to name the executable and it may also be passed
to your application via a string constant or CPP define.
"""

descr_build_path = """# Build Path

The build path is defaulted to `build/{modm:build:project.name}`.

If you have a lot of embedded projects, you may want to change the build path
to a *common* directory so that you don't have `build/` folders everywhere.
Remember to add your build path to your `.gitignore`.

You should use a relative path instead of an absolute one, so that this option
still works for other developers.
"""

descr_openocd_cfg = """# Path to a custom OpenOCD configuration file

If you have a custom configuration file for your target, it will get included
by the generated `modm/openocd.cfg`.

This is useful for not having to duplicate your config if you have several
projects using the same target (like small bring-up and test projects).

!!! tip "Do not execute commands by default"
    When providing your own config file, wrap your specific commands into functions
    and do not execute them by default. A stray `init` or similar in your script
    will mess with modm's ability to program and debug a device correctly.
"""
