version: 2
jobs:
  unittests-linux-generic:
    docker:
      - image: ghcr.io/modm-ext/modm-build-cortex-m:latest
    steps:
      - checkout
      - run:
          name: Checkout code and update modm tools
          command: |
            (git submodule sync && git submodule update --init --jobs 8) & pip3 install --upgrade --upgrade-strategy=eager modm & wait
      - run:
          name: Check environment
          command: |
            env
            locale -a
            python --version  || true
            python3 --version || true
            which scons
            scons --version
            which g++
            g++ --version
            which arm-none-eabi-g++
            arm-none-eabi-g++ --version
            which lbuild
            lbuild --version
      - run:
          name: Hosted Unittests
          when: always
          command: |
            (cd test && make run-hosted-linux)
      - run:
          name: Compile STM32 Unittests
          when: always
          command: |
            (cd test && make compile-nucleo-f411)
            (cd test && make compile-nucleo-l432)
            (cd test && make compile-nucleo-f103_A)
            (cd test && make compile-nucleo-f103_B)
      - run:
          name: Linux Examples
          when: always
          command: |
            (cd examples && ../tools/scripts/examples_compile.py linux)
      - run:
          name: Generic Examples
          when: always
          command: |
            (cd examples && ../tools/scripts/examples_compile.py generic)
      - run:
          name: Examples SAM Devices
          when: always
          command: |
            (cd examples && ../tools/scripts/examples_compile.py samd)
      - run:
          name: Execute Python Scripts
          when: always
          command: |
            python3 tools/scripts/authors.py --handles --count --shoutout --since 2017-01-01
            python3 tools/xpcc_generator/builder/system_layout.py examples/xpcc/xml/communication.xml -o /tmp
      - run:
          name: Check for Trailing Whitespace
          when: always
          command: |
            python3 tools/scripts/rm_whitespace.py
      - run:
          name: Synchronize Documentation
          when: always
          command: |
            python3 tools/scripts/synchronize_docs.py -d
      - run:
          name: Check for Unique Build Paths
          when: always
          command: |
            python3 tools/scripts/examples_check.py examples

  stm32-examples:
    docker:
      - image: ghcr.io/modm-ext/modm-build-cortex-m:latest
    steps:
      - checkout
      - run:
          name: Checkout code and update modm tools
          command: |
            (git submodule sync && git submodule update --init --jobs 8) & pip3 install --upgrade --upgrade-strategy=eager modm & wait
      - run:
          name: Examples STM32F0 Series
          when: always
          command: |
            (cd examples && ../tools/scripts/examples_compile.py stm32f0_discovery stm32f072_discovery nucleo_f031k6 nucleo_f042k6 stm32f030f4p6_demo_board)
      - run:
          name: Examples STM32F1 Series
          when: always
          command: |
            (cd examples && ../tools/scripts/examples_compile.py stm32f1_discovery nucleo_f103rb olimexino_stm32 stm32f103c8t6_blue_pill stm32f103c8t6_black_pill)
      - run:
          name: Examples STM32F3 Series
          when: always
          command: |
            (cd examples && ../tools/scripts/examples_compile.py stm32f3_discovery nucleo_f303k8 nucleo_f303re nucleo_f334r8)
      - run:
          name: Examples STM32F7 Series
          when: always
          command: |
            (cd examples && ../tools/scripts/examples_compile.py stm32f746g_discovery stm32f769i_discovery nucleo_f746zg nucleo_f767zi)
      - run:
          name: Examples STM32G0 Series
          when: always
          command: |
            (cd examples && ../tools/scripts/examples_compile.py nucleo_g071rb)
      - run:
          name: Examples STM32L1 Series
          when: always
          command: |
            (cd examples && ../tools/scripts/examples_compile.py nucleo_l152re stm32l1_discovery)
      - run:
          name: Examples STM32L4 Series
          when: always
          command: |
            (cd examples && ../tools/scripts/examples_compile.py stm32l476_discovery nucleo_l476rg nucleo_l432kc)
      - run:
          name: Examples STM32G4 Series
          when: always
          command: |
            (cd examples && ../tools/scripts/examples_compile.py nucleo_g474re nucleo_g431rb nucleo_g431kb)
  stm32f4-examples:
    docker:
      - image: ghcr.io/modm-ext/modm-build-cortex-m:latest
    steps:
      - checkout
      - run:
          name: Checkout code and update modm tools
          command: |
            (git submodule sync && git submodule update --init --jobs 8) & pip3 install --upgrade --upgrade-strategy=eager modm & wait
      - run:
          name: Examples STM32F4 Only Discovery Board
          when: always
          command: |
            (cd examples && ../tools/scripts/examples_compile.py stm32f4_discovery)
      - run:
          name: Examples STM32F4 Without Discovery Board
          when: always
          command: |
            (cd examples && ../tools/scripts/examples_compile.py stm32f429_discovery stm32f469_discovery nucleo_f401re nucleo_f411re nucleo_f429zi nucleo_f446re stm32f411ccu_mini_f401 stm32f411ceu_mini_f411 stm32f407vet6_devebox stm32_f4ve)

  avr-examples:
    docker:
      - image: ghcr.io/modm-ext/modm-build-avr
    steps:
      - checkout
      - run:
          name: Checkout code and update modm tools
          command: |
            (git submodule sync && git submodule update --init --jobs 8) & pip3 install --upgrade --upgrade-strategy=eager modm & wait
      - run:
          name: Check environment
          command: |
            which avr-g++
            avr-g++ --version
      - run:
          name: Examples AVR Series
          when: always
          command: |
            (cd examples && ../tools/scripts/examples_compile.py avr arduino_uno)
      - run:
          name: Compile AVR Unittests AT90CAN
          when: always
          command: |
            (cd test && make compile-al-avreb-can)
      - run:
          name: Compile AVR Unittests Arduino
          when: always
          command: |
            (cd test && make compile-arduino-uno)
            (cd test && make compile-arduino-nano_A compile-arduino-nano_C compile-arduino-nano_D compile-arduino-nano_E compile-arduino-nano_G)
      - run:
          name: Compile AVR Unittests ATmega
          when: always
          command: |
            (cd test && make compile-mega-2560-pro)

  avr-compile-all:
    docker:
      - image: ghcr.io/modm-ext/modm-build-avr:latest
    steps:
      - checkout
      - run:
          name: Checkout code and update modm tools
          command: |
            (git submodule sync && git submodule update --init --jobs 8) & pip3 install --upgrade --upgrade-strategy=eager modm & wait
      - run:
          name: Compile HAL for all AVRs
          command: |
            (cd test/all && python3 run_all.py at)
      - store_artifacts:
          path: test/all/log
          destination: log

  samd-compile-all:
    docker:
      - image: ghcr.io/modm-ext/modm-build-cortex-m:latest
    steps:
      - checkout
      - run:
          name: Checkout code and update modm tools
          command: |
            (git submodule sync && git submodule update --init --jobs 8) & pip3 install --upgrade --upgrade-strategy=eager modm & wait
      - run:
          name: Compile HAL for all SAMD
          command: |
            (cd test/all && python3 run_all.py samd)
      - store_artifacts:
          path: test/all/log
          destination: log

  stm32f0-compile-all:
    docker:
      - image: ghcr.io/modm-ext/modm-build-cortex-m:latest
    steps:
      - checkout
      - run:
          name: Checkout code and update modm tools
          command: |
            (git submodule sync && git submodule update --init --jobs 8) & pip3 install --upgrade --upgrade-strategy=eager modm & wait
      - run:
          name: Compile HAL for all STM32F0
          command: |
            (cd test/all && python3 run_all.py stm32f0)
      - store_artifacts:
          path: test/all/log
          destination: log

  stm32f1-compile-all:
    docker:
      - image: ghcr.io/modm-ext/modm-build-cortex-m:latest
    steps:
      - checkout
      - run:
          name: Checkout code and update modm tools
          command: |
            (git submodule sync && git submodule update --init --jobs 8) & pip3 install --upgrade --upgrade-strategy=eager modm & wait
      - run:
          name: Compile HAL for all STM32F1
          command: |
            (cd test/all && python3 run_all.py stm32f1)
      - store_artifacts:
          path: test/all/log
          destination: log

  stm32f2-compile-all:
    docker:
      - image: ghcr.io/modm-ext/modm-build-cortex-m:latest
    steps:
      - checkout
      - run:
          name: Checkout code and update modm tools
          command: |
            (git submodule sync && git submodule update --init --jobs 8) & pip3 install --upgrade --upgrade-strategy=eager modm & wait
      - run:
          name: Compile HAL for all STM32F2
          command: |
            (cd test/all && python3 run_all.py stm32f2)
      - store_artifacts:
          path: test/all/log
          destination: log

  stm32f3-compile-all:
    docker:
      - image: ghcr.io/modm-ext/modm-build-cortex-m:latest
    steps:
      - checkout
      - run:
          name: Checkout code and update modm tools
          command: |
            (git submodule sync && git submodule update --init --jobs 8) & pip3 install --upgrade --upgrade-strategy=eager modm & wait
      - run:
          name: Compile HAL for all STM32F3
          command: |
            (cd test/all && python3 run_all.py stm32f3)
      - store_artifacts:
          path: test/all/log
          destination: log

  stm32f4-compile-all:
    docker:
      - image: ghcr.io/modm-ext/modm-build-cortex-m:latest
    steps:
      - checkout
      - run:
          name: Checkout code and update modm tools
          command: |
            (git submodule sync && git submodule update --init --jobs 8) & pip3 install --upgrade --upgrade-strategy=eager modm & wait
      - run:
          name: Compile HAL for all STM32F4
          command: |
            (cd test/all && python3 run_all.py stm32f4)
      - store_artifacts:
          path: test/all/log
          destination: log

  stm32f7-compile-all:
    docker:
      - image: ghcr.io/modm-ext/modm-build-cortex-m:latest
    steps:
      - checkout
      - run:
          name: Checkout code and update modm tools
          command: |
            (git submodule sync && git submodule update --init --jobs 8) & pip3 install --upgrade --upgrade-strategy=eager modm & wait
      - run:
          name: Compile HAL for all STM32F7
          command: |
            (cd test/all && python3 run_all.py stm32f7)
      - store_artifacts:
          path: test/all/log
          destination: log

  stm32l1-compile-all:
    docker:
      - image: ghcr.io/modm-ext/modm-build-cortex-m:latest
    steps:
      - checkout
      - run:
          name: Checkout code and update modm tools
          command: |
            (git submodule sync && git submodule update --init --jobs 8) & pip3 install --upgrade --upgrade-strategy=eager modm & wait
      - run:
          name: Compile HAL for all STM32L1
          command: |
            (cd test/all && python3 run_all.py stm32l1)
      - store_artifacts:
          path: test/all/log
          destination: log

  stm32l4-compile-all:
    docker:
      - image: ghcr.io/modm-ext/modm-build-cortex-m:latest
    steps:
      - checkout
      - run:
          name: Checkout code and update modm tools
          command: |
            (git submodule sync && git submodule update --init --jobs 8) & pip3 install --upgrade --upgrade-strategy=eager modm & wait
      - run:
          name: Compile HAL for all STM32L4
          command: |
            (cd test/all && python3 run_all.py stm32l4)
      - store_artifacts:
          path: test/all/log
          destination: log

  stm32g0-compile-all:
    docker:
      - image: ghcr.io/modm-ext/modm-build-cortex-m:latest
    steps:
      - checkout
      - run:
          name: Checkout code and update modm tools
          command: |
            (git submodule sync && git submodule update --init --jobs 8) & pip3 install --upgrade --upgrade-strategy=eager modm & wait
      - run:
          name: Compile HAL for all STM32G0
          command: |
            (cd test/all && python3 run_all.py stm32g0)
      - store_artifacts:
          path: test/all/log
          destination: log

  stm32g4-compile-all:
    docker:
      - image: ghcr.io/modm-ext/modm-build-cortex-m:latest
    steps:
      - checkout
      - run:
          name: Checkout code and update modm tools
          command: |
            (git submodule sync && git submodule update --init --jobs 8) & pip3 install --upgrade --upgrade-strategy=eager modm & wait
      - run:
          name: Compile HAL for all STM32G4
          command: |
            (cd test/all && python3 run_all.py stm32g4)
      - store_artifacts:
          path: test/all/log
          destination: log

  build-docs:
    docker:
      - image: ghcr.io/modm-ext/modm-build-base:latest
    steps:
      - checkout
      - run:
          name: Update submodules and install lbuild
          command: |
            (git submodule sync && git submodule update --init --jobs 8) & pip3 install -U lbuild & wait
      - run:
          name: Test run of docs.modm.io-generator-script
          when: always
          command: |
            export TERM=xterm-256color
            export COLUMNS=120
            python3 tools/scripts/docs_modm_io_generator.py -t -c -j4
      - run:
          name: Build Homepage
          when: always
          command: |
            python3 tools/scripts/synchronize_docs.py
            python3 tools/scripts/generate_module_docs.py
            (cd docs && mkdocs build)
      # FIXME: Allow localhost:port to work with Docker
      # - run:
      #     name: Check Homepage
      #     command: |
      #       apt install -y nodejs npm
      #       npm install -g broken-link-checker-local
      #       blcl modm/docs/modm.io/docs -ro --host-requests 100 --filter-level 1


  build-upload-docs:
    docker:
      - image: ghcr.io/modm-ext/modm-build-base:latest
    steps:
      - add_ssh_keys:
          fingerprints:
            - "8c:e7:b6:51:2a:40:66:e6:e9:50:ea:fe:38:49:1d:3f"
      - checkout
      - run:
          name: Update submodules and install lbuild
          command: |
            (git submodule sync && git submodule update --init --jobs 8) & pip3 install -U lbuild & wait
      - run:
          name: Build Homepage
          command: |
            git clone --depth 1 --no-checkout git@github.com:modm-ext/modm.io.git docs/modm.io
            python3 tools/scripts/synchronize_docs.py
            python3 tools/scripts/generate_module_docs.py
            (cd docs && mkdocs build)
      - run:
          name: Push New Docs to Github
          command: |
            cd docs/modm.io
            git config user.email "rca@circleci.com"
            git config user.name "CircleCI Deployment Bot"
            git add -A
            git diff-index --quiet HEAD || git commit -m "Update"
            git push origin master

  api-docs-all:
    docker:
      - image: ghcr.io/modm-ext/modm-build-base:latest
    steps:
      - checkout
      - run:
          name: Update submodules and install lbuild
          command: |
            (git submodule sync && git submodule update --init --jobs 8) & pip3 install -U lbuild & wait
      - run:
          name: Full run of docs.modm.io-generator-script
          command: |
            export TERM=xterm-256color
            export COLUMNS=120
            python3 tools/scripts/docs_modm_io_generator.py -c -j4
      - run:
          name: Upload api documentation to docs.modm.io
          when: always
          command: |
            curl https://docs.modm.io/upload/compressed --upload-file modm-api-docs.tar.gz --user $MODM_UPLOAD

workflows:
  version: 2
  build:
    jobs:
      # Examples
      - stm32f4-examples:
          filters:
            branches:
              ignore: /^develop.*/
      - unittests-linux-generic:
          filters:
            branches:
              ignore: /^develop.*/
      - avr-examples:
          filters:
            branches:
              ignore: /^develop.*/
      - stm32-examples:
          filters:
            branches:
              ignore: /^develop.*/

      # Compile all targets
      - avr-compile-all:
          requires:
            - unittests-linux-generic
            - avr-examples
          filters:
            branches:
              ignore: /^develop.*/
      - samd-compile-all:
          requires:
            - unittests-linux-generic
          filters:
            branches:
              ignore: /^develop.*/
      - stm32f0-compile-all:
          requires:
            - unittests-linux-generic
            - stm32-examples
          filters:
            branches:
              ignore: /^develop.*/
      - stm32f1-compile-all:
          requires:
            - unittests-linux-generic
            - stm32-examples
          filters:
            branches:
              ignore: /^develop.*/
      - stm32f2-compile-all:
          requires:
            - unittests-linux-generic
          filters:
            branches:
              ignore: /^develop.*/
      - stm32f3-compile-all:
          requires:
            - unittests-linux-generic
            - stm32-examples
          filters:
            branches:
              ignore: /^develop.*/
      - stm32f4-compile-all:
          requires:
            - unittests-linux-generic
            - stm32f4-examples
          filters:
            branches:
              ignore: /^develop.*/
      - stm32f7-compile-all:
          requires:
            - unittests-linux-generic
            - stm32-examples
          filters:
            branches:
              ignore: /^develop.*/
      - stm32g0-compile-all:
          requires:
            - unittests-linux-generic
            - stm32-examples
          filters:
            branches:
              ignore: /^develop.*/
      - stm32l1-compile-all:
          requires:
            - unittests-linux-generic
            - stm32-examples
          filters:
            branches:
              ignore: /^develop.*/
      - stm32l4-compile-all:
          requires:
            - unittests-linux-generic
            - stm32-examples
          filters:
            branches:
              ignore: /^develop.*/
      - stm32g4-compile-all:
          requires:
            - unittests-linux-generic
            - stm32-examples
          filters:
            branches:
              ignore: /^develop.*/

      # Build test of docs
      - build-docs:
          filters:
            branches:
              ignore: /^develop.*/
          requires:
            - avr-compile-all
            - samd-compile-all
            - stm32f0-compile-all
            - stm32f1-compile-all
            - stm32f2-compile-all
            - stm32f3-compile-all
            - stm32g0-compile-all
            - stm32g4-compile-all


      # Build all docs only on develop
      - api-docs-all:
          filters:
            branches:
              only: /^develop.*/
      - build-upload-docs:
          filters:
            branches:
              only: /^develop.*/
