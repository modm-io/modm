#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2021 Henrik Hose
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

description = """
# STM32F750VB mcudev DevEBox

[STM32F750VB mcudev DevEBox H7xx](https://github.com/mcauser/MCUDEV_DEVEBOX_H7XX_M)

Please note that this BSP uses the Y revision of the STM32H750, which limits the
main clock frequency to â‰¤400MHz and applies an errata bug fix to the SysTick,
whose reference clock cannot be divided by 8.

See the [STM32H750 errata sheet](https://www.st.com/resource/en/errata_sheet/es0396-stm32h750xb-and-stm32h753xi-device-limitations-stmicroelectronics.pdf#page=12).

In case you are using the new revision V of STM32H750, you can overwrite the
target option in your `project.xml`:

```xml
<library>
  <extends>modm:devebox-stm32h750vb</extends>
  <options>
    <option name="modm:target">stm32h750vbt6/revV</option>
  </options>
</library>
```

## Programming

Since the board doesn't have a programmer on-board, you need to use your
own and *specify* which one you're using in a custom `openocd.cfg` file:

```
# Replace this with your custom programmer
source [find interface/stlink.cfg]

# If you use the clone CKS32F103C8T6 chip you need to overwrite this ID
#set CPUTAPID 0x2ba01477

# To select a specific programmer you can specify its serial number
#hla_serial "\\x53\\x3f\\x6f\\x06\\x50\\x77\\x50\\x57\\x12\\x17\\x13\\x3f"
# You can discover the serial via `stlink --hla-serial` or `st-info --hla-serial`.
```

Then include this file in your build options like so:

```xml
<library>
  <extends>modm:devebox-stm32h750vb</extends>
  <options>
    <option name="modm:build:openocd.cfg">openocd.cfg</option>
  </options>
</library>
```
"""

def init(module):
    module.name = ":board:devebox-stm32h750vb"
    module.description = description

def prepare(module, options):
    if not options[":target"].partname.startswith("stm32h750vbt"):
        return False

    module.depends(
        ":debug",
        ":architecture:clock",
        ":platform:core",
        ":platform:gpio",
        ":platform:clock",
        ":platform:uart:1")

    return True

def build(env):
    env.outbasepath = "modm/src/modm/board"
    env.substitutions = {
        "with_logger": False,
        "with_assert": env.has_module(":architecture:assert")
    }
    env.template("../board.cpp.in", "board.cpp")
    env.copy('.')

    env.outbasepath = "modm/openocd/modm/board/"
    env.copy(repopath("tools/openocd/modm/stm32h7xx_devebox.cfg"), "stm32h7xx_devebox.cfg")
    env.collect(":build:openocd.source", "modm/board/stm32h7xx_devebox.cfg")

    # Warn the user if they forgot to set a custom openocd config
    if env.has_option(":build:openocd.cfg") and not len(env.get(":build:openocd.cfg", "")):
        env.log.warning("You need to provide the programmer via a custom OpenOCD config!\n" + description)
