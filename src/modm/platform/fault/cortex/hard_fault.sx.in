/*
 * Copyright (c) 2009, Martin Rosekeit
 * Copyright (c) 2009-2011, Fabian Greif
 * Copyright (c) 2011, Georgi Grinshpun
 * Copyright (c) 2012, 2014-2016, Niklas Hauser
 * Copyright (c) 2013, Kevin LÃ¤ufer
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

.text
	.syntax	unified
	.align	4
	.thumb

	// ------------------------------------------------------------------------
	/**
	 * @brief	Hard fault handler
	 *
	 * Prepares data for the C output handler
	 */
	.global	HardFault_Handler
	.type	HardFault_Handler, %function
	.thumb_func
	.func	HardFault_Handler
HardFault_Handler:

%% if partname.startswith("stm32") and not partname.startswith("stm32f0"):
	/* When a hard fault occurs, this handler will move the stack pointer around.
 	 * This makes it harder to debug a hard fault with a real debugger, so if one is connected we would
	 * like to trigger a software breakpoint before moving the stack pointer.
	 * The decision to trigger the breakpoint needs to happen at runtime and not at compile time,
	 * since when a hard fault has been triggered, you want to debug the binary on the device and not
	 * compile a new binary with the breakpoint in it, which might then prevent the fault from occurring.
	 *
	 * The Cortex-M3 Core Debug module contains the "Debug Halting Control and Status Register" (DHCSR),
	 * which contains the `C_DEBUGEN` bit, which is set by the debugger to enable halting debug.
	 * "If halting debug is enabled [...], captured events will halt the processor in Debug state."
	 * You can test if halting debug is enabled using `(CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk)`.
	 *
	 * !!!WARNING:
	 *    "If DHCSR.C_DEBUGEN is clear and a breakpoint occurs in an NMI or HardFault exception handler,
	 *     the system locks up with an unrecoverable error."
	 *
	 * Since we are using a breakpoint inside the HardFault exception handler, we must therefore always
	 * check this flag, before executing the breakpoint.
	 *
	 * !!!WARNING:
	 *     On ARMv6-M "access to the DHCSR from software running on the processor is IMPLEMENTATION DEFINED."
	 *     This means, that on Cortex-M0, it might not be possible to read the DHCSR from software!
	 *
	 * Neither STM32F0 nor LPC11 implement this access!
	 *
	 * !!!WARNING:
	 *     OpenOcd does not reset the `C_DEBUGEN` bit on the `shutdown` command. This might be a bug.
	 *     A workaround is to issue `reset halt`, then manually reset the bits using `mww 0xE000EDF0 0xA05F0000`.
	 *     This will also clear the `C_HALT` bit and therefore this is equivalent to `reset run`.
	 *
	 * !!!WARNING:
	 *    `C_DEBUGEN` is sticky! It survives all resets but a power-on reset. This means that after debugging
	 *    either power cycle the target or manually clear `C_DEBUGEN` using `mww 0xE000EDF0 0xA05F0000`.
	 */
	mov lr, r0							// save register 0 into the link register
	ldr r0, =0xE000EDF0					// Load the address of the Debug Halting Control and Status Register (DHCSR)
	ldr r0, [r0, #0]					// load the content of DHCSR, we need to check if bit 0 is set
	lsls r0, #31						// test bit 0 by shifting it left 31 times, becoming sign bit
	mov r0, lr							// restore register 0 before triggering the breakpoint
	bpl no_debugger						// branch over breakpoint if lsls resulted in positive integer (MSB not set)

	ldr lr, =0xfffffff9					// restore link register for GDB
	bkpt #42							// trigger a break point, only if a debugger is connected

no_debugger:
%% endif

%% if (options.led == "disabled") and (options["log.level"] == "disabled")
	b HardFault_Handler					// busy wait in a loop forever
%% else
	// Save the current main stack pointer into the PSP register.
	mov lr, r0							// save register 0 into the link register
	mov r0, sp							// move SP into r0
	msr psp, r0							// save SP into the process stack pointer (PSP)

%% if options["log.level"] == "disabled"
	/* The LED blinking code consumes at most 32B of stack.
	 * If there is >32B of space on the main stack, we do not switch the
	 * stack pointer to the reserved hard fault handler stack.
	 * This way you can connect the GDB debugger and it recognizes the stack
	 * frames correctly, even while blinking the LED.
	 */
	ldr r0, =__stack_start
	sub sp, #32							// subtract 32B from the stack pointer
	cmp sp, r0							// compare: SP - R0 => pos. if space left
	add sp, #32							// undo the subtraction
	bpl use_main_stack					// do not switch stack, if there is enough space left
										// otherwise change SP to hard fault handler stack
%% endif
	ldr r0, =__process_stack_top		// load the PSP value into register 0
	mov sp, r0							// write the current stack pointer to the new PSP value

use_main_stack:
	mov r0, lr							// restore register 0 from the LR

%% if options["log.level"] == "disabled"
	/* This sets up and toggles an LED.
	 * The actual setup and toggle code is delegated to C++ world,
	 * so that the modm GPIO API can be used.
	 * This consumes very, very little stack, definitely less than 32B.
	 *
	 * This code clobbers R0,R1,R2 & R3, hopefully they were saved on exception entry.
	 * Note: We are restoring LR to enable GDB stack unwinding.
	 */
	ldr r0, =_initHardFaultHandlerLed
	blx r0 								// call Led::setOutput();
	ldr r0, =0xfffffff9					// ARMv6 cannot load directly into LR
	mov lr, r0							// restore link register for GDB
loop:
	ldr r0, =_ZN4modm5clock4fcpuE		// load modm::clock::fcpu
1:	subs r0, r0, #5						// subtract 5 from value
	bpl	1b								// loop while positive
	ldr r0, =_toggleHardFaultHandlerLed
	blx r0								// call Led::toggle();
	ldr r0, =0xfffffff9					// ARMv6 cannot load directly into LR
	mov lr, r0							// restore link register for GDB
	b loop								// loop forever

%% else
	/* We are switching to the reserved hard fault handler stack, and stack
	 * all 16 CPU registers and 7 fault registers (only on CM3 and up).
	 *
	 *  1. push the registers r0 through r7 onto the stack
	 *  2. load the valid high registers r8-r12 into r0-r4
	 *  3. push the registers r0 through r7 onto the stack (ie. r8-r15 with 3x placeholder)
	 * (4. load fault registers into r1-r7)
	 * (5. push the registers r1 through r7 onto the stack (ie. fault registers))
	 *
	 * Unfortunately the original LR, PC and PSR are (obviously) invalidated upon exception entry,
	 * therefore we do not push these registers onto the stack, but only reserve space for them.
	 * We opportunistically attempt to recover these register from the main stack frame that might have been
	 * preserved during hard fault exception entry, however, a more thorough interpretation of the hard fault
	 * reason and validation of plausibility of these recovered values is done in C code.
	 *
	 * Note: By pushing all these registers to the stack, GDB cannot correctly unwind it anymore!
	 */
	push {r0-r7}				// +8	// push registers r0 through r7 onto the stack
	mov r0, r8							// copy the higher registers into the lower ones
	mov r1, r9							// this is required since the Cortex-M0 cannot
	mov r2, r10							// push the higher registers onto the stack
	mov r3, r11
	mov r4, r12
//	mov r5, lr							// INVALID!
//	mov r6, pc							// INVALID!
//	mrs r7, psr							// INVALID!
	push {r0-r7}				// +8	// push registers r8 through r12, lr, pc, psr onto the stack
	mov r2, sp							// buffer the current PSP for later
%% if not core.startswith("cortex-m0"):

	// we now push all valuable information about the bus fault onto the stack
	// this means loading a range or registers from SCB and preserving them
	ldr r0, =0xE000ED24					// load address of SCB->SHCRS register
	ldm r0, {r1,r2,r3,r4,r5,r6,r7}		// load SHCRS, CFSR, HFSR, DFSR, MMAR, BFAR, AFSR registers
	push {r1-r7}				// +7	// push them onto the stack
%% endif

	// prepare the two arguments for the C hard fault handler function
	mov r0, sp							// load the PSP (the exception stack frame)
	mrs r1, psp							// load the MSP from the PSP register

	// opportunistically copy LR, PC and PSR from main stack over to the process stack
	// this doesn't cause a bus fault (which would result in core lockup) since we disabled that behavior.
	ldr r3, [r1, #20]					// load  LR
	str r3, [r2, #20]					// store LR
	ldr r3, [r1, #24]					// load  PC
	str r3, [r2, #24]					// store PC
	ldr r3, [r1, #28]					// load  PSR
	str r3, [r2, #28]					// store PSR

%% if core.startswith("cortex-m0"):
	// 16 registers have been pushed onto the stack, => 64 bytes of the process stack have already been used!
%% else
	// 23 registers have been pushed onto the stack, => 92 bytes of the process stack have already been used!
%% endif
	dsb

	// call the C code handler
	ldr r2, =_hardFaultHandler
	bx r2

%% endif
%% endif
	.size	HardFault_Handler, . - HardFault_Handler
	.endfunc

	.end
