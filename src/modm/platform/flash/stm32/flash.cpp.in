/*
 * Copyright (c) 2020, Niklas Hauser
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#include "flash.hpp"

static constexpr uint32_t FLASH_SR_ERR = 0xfffe;

namespace modm::platform
{

bool
Flash::unlock()
{
	Flash::enable();
	if (isLocked())
	{
		FLASH->KEYR = 0x45670123;
		FLASH->KEYR = 0xCDEF89AB;
	}
	return not isLocked();
}

uint8_t
Flash::getPage(uintptr_t offset)
{
	const uint8_t index = (offset >> {{ shift }});
%% if has_sectors
	uint8_t small_index{0};
	// 128kB Block 0 and 8 are subdivided into 4x16kB + 64kB
	if (index == 0 or index == 8)
	{
		if (index == 8) small_index += 4;
		// Check upper 64kB first
		if (offset & 0x1'0000ul) small_index += 4;
		// Otherwise check lower 16kB
		else small_index += ((offset & 0xC000) >> 14);
	}
	else small_index += 4;
	// 128kB Blocks
	return index + small_index;
%% else
	return index;
%% endif
}

uint32_t
Flash::getOffset(uint8_t index)
{
%% if has_sectors
	switch(index) {
		case 0: return (1ul << 14);
		case 1: return (2ul << 14);
		case 2: return (3ul << 14);
		case 3: return (4ul << 14);
		case 4: return (1ul << 16);
		default: index -= 4; break;
	}
%% endif
	return (1ul << {{shift}}) * index;
}

size_t
Flash::getSize([[maybe_unused]] uint8_t index)
{
%% if has_sectors
	if (index < 4) return (1ul << 14);
	if (index == 5) return (1ul << 16);
%% endif
	return (1ul	<< {{shift}});
}

modm_ramcode uint32_t
%% if has_sectors
Flash::erase(uint8_t index, WordSize size)
%% else
Flash::erase(uint8_t index)
%% endif
{
%% if family != "f1"
	FLASH->SR = FLASH_SR_ERR;
%% endif
%% if has_sectors
	FLASH->CR = FLASH_CR_STRT | FLASH_CR_SER | uint32_t(size) |
			((index << FLASH_CR_SNB_Pos) & FLASH_CR_SNB_Msk);
%% else
%% if family == "g0"
	FLASH->CR = FLASH_CR_STRT | FLASH_CR_PER |
			((index << FLASH_CR_PNB_Pos) & FLASH_CR_PNB_Msk);
%% else
	FLASH->CR &= ~FLASH_CR_STRT;
	FLASH->CR |= FLASH_CR_PER;
	FLASH->AR = reinterpret_cast<std::uintptr_t>(getAddr(index));
	FLASH->CR |= FLASH_CR_STRT;
%% endif
%% endif

	while(isBusy()) ;
%% if family == "f1"
	FLASH->CR &= ~FLASH_CR_PER;
	return FLASH->SR & FLASH_SR_PGERR;
%% else
	FLASH->CR = 0;
	return FLASH->SR & FLASH_SR_ERR;
%% endif
}

modm_ramcode uint32_t
%% if has_sectors
Flash::program(uintptr_t addr, MaxWordType data, WordSize size)
%% else
Flash::program(uintptr_t addr, MaxWordType data)
%% endif
{
%% if family != "f1"
	FLASH->SR = FLASH_SR_ERR;
%% endif
%% if has_sectors
	FLASH->CR = FLASH_CR_PG | uint32_t(size);
	switch(size)
	{
		case WordSize::B8:
			*(uint8_t *) addr = data;
			break;
		case WordSize::B16:
			*(uint16_t *) addr = data;
			break;
		default:
			*(uint32_t *) addr = data;
			break;
	}
%% else

%% if family == "f1"
	while(isBusy()) ;
	FLASH->CR |= FLASH_CR_PG;
	*(MaxWordType*) addr = data;
%% else
	FLASH->CR = FLASH_CR_PG;
	*(uint64_t*) addr = data;
%% endif
%% endif

	while(isBusy()) ;

%% if family == "f1"
	FLASH->CR &= ~FLASH_CR_PG;
	return FLASH->SR & FLASH_SR_PGERR;
%% else
	FLASH->CR = 0;
	return FLASH->SR & FLASH_SR_ERR;
%% endif
}

} // namespace modm::platform
