/*
 * Copyright (c) 2013, Kevin LÃ¤ufer
 * Copyright (c) 2013-2017, Niklas Hauser
 * Copyright (c) 2014, Daniel Krebs
 * Copyright (c) 2020, Mike Wolfram
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#ifndef MODM_STM32_SPI_HAL{{ id }}_HPP
#	error 	"Don't include this file directly, use 'spi_hal{{ id }}.hpp' instead!"
#endif
#include <modm/platform/clock/rcc.hpp>

void inline
modm::platform::SpiHal{{ id }}::enable()
{
	Rcc::enable<Peripheral::Spi{{id}}>();
	SPI{{ id }}->CR1 |= SPI_CR1_SPE;		// SPI Enable
}

void inline
modm::platform::SpiHal{{ id }}::disable()
{
	SPI{{ id }}->CR1 = 0;
	Rcc::disable<Peripheral::Spi{{id}}>();
}

void inline
modm::platform::SpiHal{{ id }}::initialize(Prescaler prescaler,
		MasterSelection masterSelection, DataMode dataMode,
		DataOrder dataOrder, DataSize dataSize)
{
	enable();
	// disable peripheral
	SPI{{ id }}->CR1 &= ~SPI_CR1_SPE;
	// set parameters
	SPI{{ id }}->CR1 = 	  static_cast<uint32_t>(dataMode)
						| static_cast<uint32_t>(dataOrder)
						| static_cast<uint32_t>(masterSelection)
						| static_cast<uint32_t>(prescaler)
%% if "data-size" not in features
						| static_cast<uint32_t>(dataSize);
%% else
						;
	SPI{{ id }}->CR2 = static_cast<uint32_t>(dataSize);

	if(static_cast<uint8_t>(dataSize) <= static_cast<uint8_t>(DataSize::Bit8))
	{
		SPI{{ id }}->CR2 |= SPI_CR2_FRXTH;
	}

%% endif
	if(masterSelection == MasterSelection::Master) {
		SPI{{ id }}->CR2 |=  SPI_CR2_SSOE; // for master mode
	}
	// reenable peripheral
	SPI{{ id }}->CR1 |= SPI_CR1_SPE;
}

void inline
modm::platform::SpiHal{{ id }}::setDataMode(DataMode dataMode)
{
	SPI{{ id }}->CR1 = (SPI{{ id }}->CR1 & ~static_cast<uint32_t>(DataMode::All))
										 | static_cast<uint32_t>(dataMode);
}

void inline
modm::platform::SpiHal{{ id }}::setDataOrder(DataOrder dataOrder)
{
	SPI{{ id }}->CR1 = (SPI{{ id }}->CR1 & ~static_cast<uint32_t>(DataOrder::All))
										 | static_cast<uint32_t>(dataOrder);
}

void inline
modm::platform::SpiHal{{ id }}::setDataSize(DataSize dataSize)
{
	// TODO: implement as set/reset bit
%% if "data-size" not in features
	SPI{{ id }}->CR1 = (SPI{{ id }}->CR1 & ~static_cast<uint32_t>(DataSize::All))
										 | static_cast<uint32_t>(dataSize);
%% else
	SPI{{ id }}->CR2 = (SPI{{ id }}->CR2 & ~static_cast<uint32_t>(DataSize::All))
										 | static_cast<uint32_t>(dataSize);
%% endif
}

void inline
modm::platform::SpiHal{{ id }}::setMasterSelection(MasterSelection masterSelection)
{
	// TODO: implement as set/reset bit
	SPI{{ id }}->CR1 = (SPI{{ id }}->CR1 & ~static_cast<uint32_t>(MasterSelection::All))
										 | static_cast<uint32_t>(masterSelection);
}

%% if "fifo" in features
inline void
modm::platform::SpiHal{{ id }}::setRxFifoThreshold(RxFifoThreshold threshold)
{
	SPI{{ id }}->CR2 = (SPI{{ id }}->CR2 & ~static_cast<uint32_t>(RxFifoThreshold::QuarterFull))
										 | static_cast<uint32_t>(threshold);
}
%% endif

inline bool
modm::platform::SpiHal{{ id }}::isReceiveRegisterNotEmpty()
{
	return static_cast<bool>(getInterruptFlags() & InterruptFlag::RxBufferNotEmpty);
}

inline bool
modm::platform::SpiHal{{ id }}::isTransmitRegisterEmpty()
{
	return static_cast<bool>(getInterruptFlags() & InterruptFlag::TxBufferEmpty);
}

void inline
modm::platform::SpiHal{{ id }}::write(uint16_t data)
{
	SPI{{ id }}->DR = data;
}

void inline
modm::platform::SpiHal{{ id }}::write(uint8_t data)
{
%% if "data-size" in features
	*((__IO uint8_t *) &SPI{{ id}}->DR) = data;
%% else
	write(static_cast<uint16_t>(data));
%% endif

}

void inline
modm::platform::SpiHal{{ id }}::read(uint8_t &data)
{
	data = static_cast<uint8_t>(SPI{{ id }}->DR);
}

void inline
modm::platform::SpiHal{{ id }}::read(uint16_t &data)
{
	data = static_cast<uint16_t>(SPI{{ id }}->DR);
}

void inline
modm::platform::SpiHal{{ id }}::enableInterruptVector(bool enable, uint32_t priority)
{
	if (enable) {
		// Set priority for the interrupt vector
		NVIC_SetPriority(SPI{{ id }}_IRQn, priority);
		// register IRQ at the NVIC
		NVIC_EnableIRQ(SPI{{ id }}_IRQn);
	}
	else {
		NVIC_DisableIRQ(SPI{{ id }}_IRQn);
	}
}

void inline
modm::platform::SpiHal{{ id }}::enableInterrupt(Interrupt_t interrupt)
{
	SPI{{ id }}->CR2 |= interrupt.value;
}

void inline
modm::platform::SpiHal{{ id }}::disableInterrupt(Interrupt_t interrupt)
{
	SPI{{ id }}->CR2 &= ~interrupt.value;
}

modm::platform::SpiHal{{ id }}::InterruptFlag_t inline
modm::platform::SpiHal{{ id }}::getInterruptFlags()
{
	return InterruptFlag_t(SPI{{ id }}->SR);
}

void inline
modm::platform::SpiHal{{ id }}::acknowledgeInterruptFlag(InterruptFlag_t /*flags*/)
{
	// TODO: implement; see STM32F3 reference manual p. 736
	// SPI{{ id }}->SR = flags.value;
}
