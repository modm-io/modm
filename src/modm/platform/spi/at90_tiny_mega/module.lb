#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2016-2018, Niklas Hauser
# Copyright (c) 2017, Fabian Greif
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

def load_options(module):
    module.add_option(
        BooleanOption(
            name="busywait",
            description="",
            default=False))


class Instance(Module):
    def __init__(self, instance):
        self.instance = instance

    def init(self, module):
        module.name = str(self.instance)
        module.description = "Instance {}".format(self.instance)

    def prepare(self, module, options):
        module.depends(":platform:spi")
        load_options(module)
        return True

    def build(self, env):
        env.substitutions = {
            "target": env[":target"].identifier,
            "partname": env[":target"].partname,
            "id": self.instance,
        }
        env.outbasepath = "modm/src/modm/platform/spi"

        env.template("spi.hpp.in", "spi{}.hpp".format(self.instance))
        env.template("spi_master.hpp.in", "spi_master{}.hpp".format(self.instance))
        env.template("spi_master.cpp.in", "spi_master{}.cpp".format(self.instance))

def init(module):
    module.name = ":platform:spi"
    module.description = "Serial Peripheral Interface (SPI)"

def prepare(module, options):
    device = options[":target"]
    if not device.has_driver("spi:avr"):
        return False

    driver = device.get_driver("spi:avr")
    if "instance" in driver:
        for instance in listify(driver["instance"]):
            module.add_submodule(Instance(int(instance)))
    else:
        load_options(module)

    module.depends(
        ":architecture:atomic",
        ":architecture:spi",
        ":platform:gpio",
        ":math:algorithm",
        ":math:utils")
    return True

def build(env):
    driver = env[":target"].get_driver("spi")
    if "instance" not in driver:
        env.substitutions = {
            "target": env[":target"].identifier,
            "partname": env[":target"].partname,
            "id": "",
        }
        env.outbasepath = "modm/src/modm/platform/spi"
        env.template("spi_master.hpp.in")
        env.template("spi_master.cpp.in")
        env.template("spi.hpp.in")
