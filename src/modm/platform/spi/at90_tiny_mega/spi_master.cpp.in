/*
 * Copyright (c) 2013-2017, Niklas Hauser
 * Copyright (c) 2014, Sascha Schade
 * Copyright (c) 2017, Fabian Greif
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#include "spi_master{{ id }}.hpp"

#include <avr/io.h>
#include <avr/interrupt.h>

#include <modm/utils/bit_constants.hpp>
#include <modm/architecture/interface/atomic_lock.hpp>

// bit 7 (0x80) is used for transfer 1 byte
// bit 6 (0x40) is used for transfer multiple byte
// bit 5-0 (0x3f) are used to store the acquire count
uint8_t
modm::platform::SpiMaster{{ id }}::state(0);

void *
modm::platform::SpiMaster{{ id }}::context(nullptr);

modm::Spi::ConfigurationHandler
modm::platform::SpiMaster{{ id }}::configuration(nullptr);
// ----------------------------------------------------------------------------

void
modm::platform::SpiMaster{{ id }}::initialize(Prescaler prescaler)
{
	modm::atomic::Lock lock;

	SPCR{{ id }} = (1 << SPE{{ id }}) | (1 << MSTR{{ id }}) | (static_cast<uint8_t>(prescaler) & ~0x80);
	SPSR{{ id }} = (static_cast<uint8_t>(prescaler) & 0x80) ? (1 << SPI2X{{ id }}) : 0;
	state &= 0x3f;
}
// ----------------------------------------------------------------------------

uint8_t
modm::platform::SpiMaster{{ id }}::acquire(void *ctx, ConfigurationHandler handler)
{
	if (context == nullptr)
	{
		context = ctx;
		state = (state & ~0x3f) | 1;
		// if handler is not nullptr and is different from previous configuration
		if (handler and configuration != handler) {
			configuration = handler;
			configuration();
		}
		return 1;
	}

	if (ctx == context)
		return (++state & 0x3f);

	return 0;
}

uint8_t
modm::platform::SpiMaster{{ id }}::release(void *ctx)
{
	if (ctx == context)
	{
		if ((--state & 0x3f) == 0)
			context = nullptr;
	}
	return (state & 0x3f);
}
// ----------------------------------------------------------------------------

modm::ResumableResult<uint8_t>
modm::platform::SpiMaster{{ id }}::transfer(uint8_t data)
{
%% if options["busywait"]
	SPDR{{ id }} = data;

	// wait for transfer to finish
	while (!(SPSR{{ id }} & (1 << SPIF{{ id }})))
		;

	data = SPDR{{ id }};
	return {modm::rf::Stop, data};
%% else
	// this is a manually implemented "fast resumable function"
	// there is no context or nesting protection, since we don't need it.
	// there are only two states encoded into 1 bit (LSB of state):
	//   1. waiting to start, and
	//   2. waiting to finish.

	// MSB != Bit7 ?
	if ( !(state & Bit7) )
	{
		// start transfer by copying data into register
		SPDR{{ id }} = data;

		// set MSB = Bit7
		state |= Bit7;
	}

	// wait for transfer to finish
	if (!(SPSR{{ id }} & (1 << SPIF{{ id }})))
		return {modm::rf::Running};

	data = SPDR{{ id }};
	state &= ~Bit7;
	return {modm::rf::Stop, data};
%% endif
}

modm::ResumableResult<void>
modm::platform::SpiMaster{{ id }}::transfer(uint8_t *tx, uint8_t *rx, std::size_t length)
{
%% if options["busywait"]
	for (std::size_t index = 0; index < length; index++)
	{
		modm::ResumableResult<uint8_t> result = transfer(tx ? tx[index] : 0);
		if (rx) rx[index] = result.getResult();
	}
	return {modm::rf::Stop};
%% else
	// this is a manually implemented "fast resumable function"
	// there is no context or nesting protection, since we don't need it.
	// there are only two states encoded into 1 bit (Bit6 of state):
	//   1. initialize index, and
	//   2. wait for 1-byte transfer to finish.

	// we need to globally remember which byte we are currently transferring
	static std::size_t index = 0;

	// we are only interested in Bit6
	switch(state & Bit6)
	{
		case 0:
			// we will only visit this state once
			state |= Bit6;

			// initialize index and check range
			index = 0;
			while (index < length)
			{
		default:
		{
				// call the resumable function
				modm::ResumableResult<uint8_t> result = transfer(tx ? tx[index] : 0);

				// if the resumable function is still running, so are we
				if (result.getState() > modm::rf::NestingError)
					return {modm::rf::Running};

				// if rx != 0, we copy the result into the array
				if (rx) rx[index] = result.getResult();
		}
				index++;
			}

			// clear the state
			state &= ~Bit6;
			return {modm::rf::Stop};
	}
%% endif
}
