/*
 * Copyright (c) 2013-2015, 2017, Niklas Hauser
 * Copyright (c) 2017, Fabian Greif
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#ifndef MODM_AVR_SPI_HPP
#define MODM_AVR_SPI_HPP

#include <avr/io.h>

/// @cond
%% if partname in ["attiny40"]
// The avr-libc Header files for the ATtiny40 is missing the following
// defines although they are meantioned in the datasheet.
#define SPR0    0
#define SPR1    1
#define CPHA    2
#define CPOL    3
#define MSTR    4
#define DORD    5
#define SPE     6
#define SPIE    7

#define SPI2X   0
#define WCOL    6
#define SPIF    7
%% elif partname in ["atmega164pa", "atmega324pa"]
// The avr-libc Header files for the ATmega{16,32}4pa are declaring the
// following registers with a trailing zero. Why, Atmel, whyyyy?
#define SPCR    SPCR0
#define SPR0    SPR00
#define SPR1    SPR10
#define CPHA    CPHA0
#define CPOL    CPOL0
#define MSTR    MSTR0
#define DORD    DORD0
#define SPE     SPE0
#define SPIE    SPIE0
#define SPSR    SPSR0
#define SPI2X   SPI2X0
#define WCOL    WCOL0
#define SPIF    SPIF0
#define SPDR    SPDR0
%% endif
/// @endcond

namespace modm
{

namespace platform
{

/// @ingroup	modm_platform_spi
struct Spi
{
	enum class
	Prescaler : uint8_t
	{
		Div2 = 0x80 | 0,
		Div4 = 0,
		Div8 = 0x80 | (1 << SPR0{{ id }}),
		Div16 = (1 << SPR0{{ id }}),
		Div32 = 0x80 | (1 << SPR1{{ id }}),
		Div64 = (1 << SPR1{{ id }}),
		Div128 = (1 << SPR1{{ id }}) | (1 << SPR0{{ id }}),
	};

	enum State : uint8_t {
		Idle = Bit6,		// Transaction is running
		AutoIncr = Bit7,	// Increment index in tx/rx after each value transmission
	};
	MODM_FLAGS8(State);

	enum ByteCount : uint8_t {
		Byte = 0,		// 1 byte
		HalfWord = 1,	// 2 bytes
		Word = 2,		// 4 bytes
		// WordWord = 3	// 8 bytes
	};
	typedef Configuration<State_t, ByteCount, 0b11, 0> TxByteCount_t; // Right-aligned cause of highest access-rate
};

} // namespace platform

} // namespace modm

#endif	// MODM_AVR_SPI_HPP
