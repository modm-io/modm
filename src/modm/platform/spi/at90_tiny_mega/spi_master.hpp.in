/*
 * Copyright (c) 2013-2017, Niklas Hauser
 * Copyright (c) 2014, Sascha Schade
 * Copyright (c) 2017, Fabian Greif
 * Copyright (c) 2021, Thomas Sommer 
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------
#pragma once

#include <avr/io.h>

#include <modm/architecture/interface/spi_master.hpp>
#include <modm/platform/gpio/connector.hpp>
#include <modm/math/algorithm/prescaler.hpp>
#include <modm/math/utils/binary.hpp>

%% set sck = "Sck"
%% if target["type"] in ["u2"]
	%# Atmel has inconsistent naming schemes!
	%% set sck = "Sclk"
%% endif

#include "spi{{ id }}_base.hpp"

namespace modm::platform
{

/**
 * Implementation of the SpiMaster{{ id }}.
 *
 * @warning	When the !SS pin is configured in input mode and pulled low, the
 *			hardware will switch into SPI slave mode. It is therefore necessary
 *			to configure the pin either in output mode or to pull it high.
 *
 * @author		Niklas Hauser
 * @ingroup		modm_platform_spi modm_platform_spi_{{id}}
 */
class SpiMaster{{ id }} : public modm::SpiMaster, private SpiBase
{
protected:
	static uint8_t count;
	static void *context;
	static ConfigurationHandler configuration;

	static State_t state;
	static uint8_t shift;
	static uint32_t temp;
	
	union unsigned_types_const {
		uint8_t const *u8;
		uint16_t const *u16;
		uint32_t const *u32;
		uint16_t repeat;
	};
	static unsigned_types_const tx, tx_end;
	union unsigned_types {
		uint8_t *u8;
		uint16_t *u16;
		uint32_t *u32;
	};
	static unsigned_types rx, rx_end;
public:
	/// Spi Data Mode, Mode0 is the most common mode
	enum class
	DataMode : uint8_t
	{
		Mode0 = 0,	///< clock normal,   sample on rising  edge
		Mode1 = (1 << CPHA{{ id }}),	///< clock normal,   sample on falling edge
		Mode2 = (1 << CPOL{{ id }}),	///< clock inverted, sample on falling  edge
		Mode3 = (1 << CPOL{{ id }}) | (1 << CPHA{{ id }}),	///< clock inverted, sample on rising edge
	};

public:
	// start documentation inherited
	template< class... Signals >
	static void
	connect()
	{
		using Connector = GpioConnector<Peripheral::Spi{{ id }}, Signals...>;
		using Sck = typename Connector::template GetSignal<Gpio::Signal::{{ sck }}>;
		using Mosi = typename Connector::template GetSignal<Gpio::Signal::Mosi>;
		using Miso = typename Connector::template GetSignal<Gpio::Signal::Miso>;

		// Connector::disconnect();
		Sck::setOutput(Gpio::OutputType::PushPull);
		Mosi::setOutput(Gpio::OutputType::PushPull);
		Miso::setInput(Gpio::InputType::Floating);
		Connector::connect();
	}

	template< class SystemClock, baudrate_t baudrate, percent_t tolerance=pct(5) >
	static void
	initialize()
	{
		constexpr auto result = modm::Prescaler::from_power(SystemClock::Spi, baudrate, 2, 128);
		assertBaudrateInTolerance< result.frequency, baudrate, tolerance >();

		// translate the prescaler into the bitmapping
		constexpr Prescaler prescaler =
				(result.prescaler == 128) ? Prescaler::Div128 : (
				(result.prescaler ==  64) ? Prescaler::Div64  : (
				(result.prescaler ==  32) ? Prescaler::Div32  : (
				(result.prescaler ==  16) ? Prescaler::Div16  : (
				(result.prescaler ==   8) ? Prescaler::Div8   : (
				(result.prescaler ==   4) ? Prescaler::Div4   :
											Prescaler::Div2     )))));

		initialize(prescaler);
	}


	static void
	setDataMode(DataMode mode)
	{
		SPCR{{ id }} = (SPCR{{ id }} & ~((1 << CPOL{{ id }}) | (1 << CPHA{{ id }}))) | static_cast<uint8_t>(mode);
	}

	static void
	setDataOrder(DataOrder order)
	{
		if (order == DataOrder::LsbFirst)
			SPCR{{ id }} |= (1 << DORD{{ id }});
		else
			SPCR{{ id }} &= ~(1 << DORD{{ id }});
	}

	static uint8_t
	acquire(void *ctx, ConfigurationHandler handler = nullptr);

	static uint8_t
	release(void *ctx);

	// TODO Complete the docs

	/**
	 * @brief 
	 * 
	 * @param data 
	 * @return modm::ResumableResult<T> 
	 */
	template <modm::unsigned_integral_max32 T>
	static modm::ResumableResult<T>
	transmit(const T data);

	// OPTIMIZE specialize transmit(byte) without ISR overhead
 	// static modm::ResumableResult<uint8_t>
	// transmit(const uint8_t data);

	/**
	 * @brief 
	 * 
	 * @param data 
	 * @return modm::ResumableResult<T> 
	 */
	template <modm::unsigned_integral_max32 T>
	static modm::ResumableResult<void>
	transmit(const T data, std::size_t repeat);

	/**
	 * @brief 			Send and optional receive data in range begin()->end().
	 * 					Works with C-array or std::array for tx / rx
	 * 
	 * @param tx_first	Pointer to first element to send. f.e. tx.begin() OR tx.begin() + 1
	 * @param tx_first	Pointer to one after last element to send: f.e. tx.end() OR tx.end() - 4
	 * @param rx_first	Pointer to first element to receive: f.e. rx_data.begin() OR rx_data.begin() + 1
	 */
 	template <modm::unsigned_integral_max32 T>
	static modm::ResumableResult<void>
	transmit(const T *tx_first, const T *tx_last, T *rx_first = nullptr);

	/**
	 * @brief 			Send a std::array
	 * 
	 * @param tx_array	std::array with data to send
	 */
	template <std::ranges::forward_range C>
	static modm::ResumableResult<void>
	transmit(const C &tx_arr)
	{ return transmit(tx_arr.begin(), tx_arr.end()); };

	/**
	 * @brief 			Transmit and receive a std::array
	 * 
	 * @param tx_arr	std::array with data to send
	 * @param rx_arr	std::array for received data
	 */
	template <std::ranges::forward_range C>
	static modm::ResumableResult<void>
	transmit(const C &tx_arr, C &rx_arr)
	{ return transmit(tx_arr.begin(), tx_arr.end(), rx_arr.begin()); };

// -- Backwards compatible API --------------------------------------------------------

	// Backwards compatible API
	static uint8_t
	transferBlocking(const uint8_t data)
	{ return RF_CALL_BLOCKING(transmit(data)); }

	static uint16_t
	transferBlocking16(const uint16_t data)
	{ return RF_CALL_BLOCKING(transmit(data)); }

	static uint32_t
	transferBlocking32(const uint32_t data)
	{ return RF_CALL_BLOCKING(transmit(data)); }

	static void
	transferBlocking(const uint8_t data, std::size_t repeat)
	{ RF_CALL_BLOCKING(transmit(data, repeat)); }

	static void
	transferBlocking16(const uint16_t data, std::size_t repeat)
	{ RF_CALL_BLOCKING(transmit(data, repeat)); }

	static void
	transferBlocking32(const uint32_t data, std::size_t repeat)
	{ RF_CALL_BLOCKING(transmit(data, repeat)); }

	static void
	transferBlocking(const uint8_t *tx, uint8_t *rx, std::size_t length)
	{ RF_CALL_BLOCKING(transmit(tx, tx + length, rx)); }

	static void
	transferBlocking16(const uint16_t *tx, uint16_t *rx, std::size_t length)
	{ RF_CALL_BLOCKING(transmit(tx, tx + length, rx)); }

	static void
	transferBlocking32(const uint32_t *tx, uint32_t *rx, std::size_t length)
	{ RF_CALL_BLOCKING(transmit(tx, tx + length, rx)); }
	static modm::ResumableResult<uint8_t>
	transfer(const uint8_t data) {
		return transmit(data);
	}

	static modm::ResumableResult<uint16_t>
	transfer16(const uint16_t data) {
		return transmit(data);
	}

	static modm::ResumableResult<uint32_t>
	transfer32(const uint32_t data) {
		return transmit(data);
	}

	static modm::ResumableResult<void>
	transfer(const uint8_t tx, const std::size_t repeat) {
		return transmit(tx, repeat);
	}

	static modm::ResumableResult<void>
	transfer16(const uint16_t tx, const std::size_t repeat) {
		return transmit(tx, repeat);
	}

	static modm::ResumableResult<void>
	transfer32(const uint32_t tx, const std::size_t repeat) {
		return transmit(tx, repeat);
	}

	static modm::ResumableResult<void>
	transfer(const uint8_t *tx, uint8_t *rx, const std::size_t length) {
		return transmit(tx, tx + length, rx);
	}

	static modm::ResumableResult<void>
	transfer16(const uint16_t *tx, uint16_t *rx, const std::size_t length) {
		return transmit(tx, tx + length, rx);
	}

	static modm::ResumableResult<void>
	transfer32(const uint32_t *tx, uint32_t *rx, const std::size_t length) {
		return transmit(tx, tx + length, rx);
	}
	// end documentation inherited

	// TODO friend with MODM_ISR(SPI_STC) possible?
	static void isr_handler();

private:
	template<std::unsigned_integral T>
	static void
	setup_isr();

	template<std::unsigned_integral T>
	static void
	setup_isr(const T* tx_first, const T* tx_last);

	static bool isRunning() {
		return SPCR{{ id }} & (1 << SPIE);
	}

	static void
	initialize(Prescaler prescaler);
};

} // namespace modm::platform

#include "spi_master_impl.hpp"