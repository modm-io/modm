#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2016-2018, Niklas Hauser
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

class Instance(Module):
    def __init__(self, instance, is_extended = False):
        self.instance = instance
        self.is_extended = is_extended

    def init(self, module):
        module.name = str(self.instance)
        module.description = "Instance {}".format(self.instance)

    def prepare(self, module, options):
        module.depends(":platform:uart:{}".format(self.instance))
        return True

    def build(self, env):
        env.substitutions = {
            "target": env[":target"].identifier,
            "id": self.instance,
            "extended": self.is_extended,
        }
        env.outbasepath = "modm/src/modm/platform/spi"

        env.template("uart_spi_master.hpp.in", "uart_spi_master_{}.hpp".format(self.instance))
        env.template("uart_spi_master.cpp.in", "uart_spi_master_{}.cpp".format(self.instance))


def init(module):
    module.name = ":platform:uart.spi"
    module.description = "USART in SPI Mode"

def prepare(module, options):
    device = options[":target"]
    if not device.has_driver("usart:stm32") and not device.has_driver("usart:stm32-extended"):
        return False

    module.depends(
        ":architecture:spi",
        ":cmsis:device",
        ":platform:gpio",
        ":platform:uart")

    for driver in device.get_all_drivers("usart"):
        for instance in listify(driver["instance"]):
            module.add_submodule(Instance(int(instance), "extended" in driver["type"]))

    return True

def build(env):
    pass
