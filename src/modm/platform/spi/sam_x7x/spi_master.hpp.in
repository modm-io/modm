/*
 * Copyright (c) 2009-2011, Fabian Greif
 * Copyright (c) 2010, Martin Rosekeit
 * Copyright (c) 2011-2017, Niklas Hauser
 * Copyright (c) 2012, Georgi Grinshpun
 * Copyright (c) 2013, Kevin LÃ¤ufer
 * Copyright (c) 2014, Sascha Schade
 * Copyright (c) 2023, Christopher Durand
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#ifndef MODM_SAMX7X_SPI_MASTER{{ id }}_HPP
#define MODM_SAMX7X_SPI_MASTER{{ id }}_HPP

#include <modm/architecture/interface/spi_master.hpp>
#include <modm/platform/gpio/connector.hpp>
#include <modm/math/algorithm/prescaler.hpp>
#include "spi_hal_{{ id }}.hpp"

namespace modm::platform
{

/**
 * Serial peripheral interface (SPI{{ id }}).
 *
 * Simple unbuffered implementation.
 *
 * @ingroup	modm_platform_spi modm_platform_spi_{{id}}
 */
class SpiMaster{{ id }} : public modm::SpiMaster, public SpiBase
{
private:
	// Bit0: single transfer state
	// Bit1: block transfer state
	static inline uint8_t state{0};
	static inline uint8_t count{0};
	static inline void* context{nullptr};
	static inline ConfigurationHandler configuration{nullptr};
public:
	using DataMode = SpiBase::DataMode;
	using Hal = SpiHal{{ id }};

	template<class... Pins>
	static void
	connect()
	{
		using SckPin = GetPin_t<PeripheralPin::Spck, Pins...>;
		using MosiPin = GetPin_t<PeripheralPin::Mosi, Pins...>;
		using MisoPin = GetPin_t<PeripheralPin::Miso, Pins...>;

		using Peripheral = Peripherals::Spi<{{ id | int }}>;

		if constexpr (!std::is_void_v<SckPin>) {
			using SckConnector = typename SckPin::template Connector<Peripheral, Peripheral::Spck>;
			SckConnector::connect();
		}

		if constexpr (!std::is_void_v<MosiPin>) {
			using MosiConnector = typename MosiPin::template Connector<Peripheral, Peripheral::Mosi>;
			MosiConnector::connect();
		}

		if constexpr (!std::is_void_v<MisoPin>) {
			using MisoConnector = typename MisoPin::template Connector<Peripheral, Peripheral::Miso>;
			MisoConnector::connect();
		}
	}

	// start documentation inherited
	template< class SystemClock, baudrate_t baudrate, percent_t tolerance=pct(5) >
	static void
	initialize()
	{
		constexpr auto result = modm::Prescaler::from_range(SystemClock::Spi{{ id }}, baudrate, 1, 255);
		assertBaudrateInTolerance<result.frequency, baudrate, tolerance>();

		SpiHal{{ id }}::initialize(result.prescaler);
		state = 0;
	}

	static void
	setDataMode(DataMode mode)
	{
		SpiHal{{ id }}::setDataMode(mode);
	}

	static void
	setDataSize(DataSize size)
	{
		SpiHal{{ id }}::setDataSize(size);
	}

	static uint8_t
	acquire(void* ctx, ConfigurationHandler handler = nullptr);

	static uint8_t
	release(void* ctx);

	static uint8_t
	transferBlocking(uint8_t data)
	{
		return RF_CALL_BLOCKING(transfer(data));
	}

	static void
	transferBlocking(const uint8_t* tx, uint8_t* rx, std::size_t length)
	{
		RF_CALL_BLOCKING(transfer(tx, rx, length));
	}

	static modm::ResumableResult<uint8_t>
	transfer(uint8_t data);

	static modm::ResumableResult<void>
	transfer(const uint8_t* tx, uint8_t* rx, std::size_t length);
	// end documentation inherited
};

} // namespace modm::platform

#endif // MODM_SAMX7X_SPI_MASTER{{ id }}_HPP
