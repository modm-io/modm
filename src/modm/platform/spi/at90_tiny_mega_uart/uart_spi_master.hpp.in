/*
 * Copyright (c) 2013-2017, Niklas Hauser
 * Copyright (c) 2017, Fabian Greif
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#ifndef MODM_AVR_UART_SPI_MASTER{{id}}_HPP
#define MODM_AVR_UART_SPI_MASTER{{id}}_HPP

#include <avr/io.h>

#include <modm/platform/uart/uart_defines.h>
#include <modm/architecture/interface/spi_master.hpp>
#include <modm/platform/gpio/connector.hpp>


namespace modm
{

namespace platform
{

/**
 * Implementation of the SimpleSpi of the Uart in Spi Master mode.
 *
 * @ingroup		modm_platform_uart_spi modm_platform_uart_spi_{{id}}
 * @author		Niklas Hauser
 */
class UartSpiMaster{{ id }} : public ::modm::SpiMaster
{
	static uint8_t state;
	static void *context;
	static ConfigurationHandler configuration;
public:
	/// Spi Data Mode, Mode0 is the most common mode
%% if not extended
	/// @warning 	Only Mode 0 and 2 are available, Mode 1 and 3 are not
	///				supported on this target.
%% endif
	enum class
	DataMode : uint8_t
	{
		Mode0 = 0,	///< clock normal,   sample on rising  edge
%% if extended
		Mode1 = (1 << UCPHA{{ id }}),	///< clock normal,   sample on falling edge
%% endif
		Mode2 = (1 << UCPOL{{ id }}),	///< clock inverted, sample on falling edge
%% if extended
		Mode3 = (1 << UCPOL{{ id }}) | (1 << UCPHA{{ id }}),
		///< clock inverted, sample on rising edge
%% endif
	};

	/// Spi Data Order, MsbFirst is the most common mode
	enum class
	DataOrder : uint8_t
	{
		MsbFirst = 0,
%% if extended
		LsbFirst = (1 << UDORD{{ id }}),
%% else
		LsbFirst = 1,
%% endif
	};

public:
	// start documentation inherited
	template< class... Signals >
	static void
	connect()
	{
		using Connector = GpioConnector<Peripheral::Spi{{ id }}, Signals...>;
		using Sck = typename Connector::template GetSignal<Gpio::Signal::Sck>;
		using Mosi = typename Connector::template GetSignal<Gpio::Signal::Mosi>;
		using Miso = typename Connector::template GetSignal<Gpio::Signal::Miso>;

		// Connector::disconnect();
		Sck::setOutput(Gpio::OutputType::PushPull);
		Mosi::setOutput(Gpio::OutputType::PushPull);
		Miso::setInput(Gpio::InputType::Floating);
		Connector::connect();
	}

	template< class SystemClock, baudrate_t baudrate, percent_t tolerance=pct(5) >
	static inline void
	initialize()
	{
		// calculate the fractional prescaler value
		constexpr float pre_raw = static_cast<float>(SystemClock::UsartSpi) / ( 2 * baudrate );
		// respect the prescaler range of 1 to 4096
		constexpr uint32_t pre_ceil = std::ceil(pre_raw) > 4096 ? 4096 : std::ceil(pre_raw);
		constexpr uint32_t pre_floor = std::floor(pre_raw) < 1 ? 1 : std::floor(pre_raw);

		// calculate the possible baudrates above and below the requested baudrate
		constexpr uint32_t baud_lower = SystemClock::UsartSpi / ( 2 * pre_ceil );
		constexpr uint32_t baud_upper = SystemClock::UsartSpi / ( 2 * pre_floor );

		// calculate the fractional prescaler value corresponding to the baudrate exactly
		// between the upper and lower baudrate
		constexpr uint32_t baud_middle = (baud_upper + baud_lower) / 2;
		// decide which prescaler value is closer to a possible baudrate
		constexpr uint32_t prescaler = (baudrate < baud_middle) ? pre_ceil : pre_floor;

		// check if within baudrate tolerance
		constexpr uint32_t generated_baudrate = SystemClock::UsartSpi / (2 * prescaler);
		assertBaudrateInTolerance<
			/* clostest available baudrate */ generated_baudrate,
			/* desired baudrate */ baudrate,
			tolerance >();

		initialize(prescaler - 1);
	}


	static inline void
	setDataMode(DataMode mode)
	{
%% if extended
		UCSR{{ id }}C = (UCSR{{ id }}C & ~((1 << UCPOL{{ id }}) | (1 << UCPHA{{ id }}))) | static_cast<uint8_t>(mode);
%% else
		UCSR{{ id }}C = (UCSR{{ id }}C & ~(1 << UCPOL{{ id }})) | static_cast<uint8_t>(mode);
%% endif
	}

%% if not extended
	/// @warning 	On this target, only `DataOrder::MsbFirst` is natively
	///				supported!
	///				`DataOrder::LsbFirst` is reimplemented in software using
	///				modm::bitReverse(), which is quite costly.
	/// @see	modm::bitReverse()
%% endif
	static inline void
	setDataOrder(DataOrder order)
	{
%% if extended
		UCSR{{id}}C = (UCSR{{id}}C & ~(1 << UDORD{{id}})) | static_cast<uint8_t>(order);
%% else
		dataOrder = order;
%% endif
	}


	static uint8_t
	acquire(void *ctx, ConfigurationHandler handler = nullptr);

	static uint8_t
	release(void *ctx);


	static uint8_t
	transferBlocking(uint8_t data)
	{
		return RF_CALL_BLOCKING(transfer(data));
	}

	static void
	transferBlocking(const uint8_t *tx, uint8_t *rx, std::size_t length)
	{
		RF_CALL_BLOCKING(transfer(tx, rx, length));
	}


	static modm::ResumableResult<uint8_t>
	transfer(uint8_t data);

	static modm::ResumableResult<void>
	transfer(const uint8_t *tx, uint8_t *rx, std::size_t length);
	// end documentation inherited

protected:
	static void
	initialize(uint16_t prescaler);

private:
%% if not extended
	static DataOrder dataOrder;
%% endif
};

} // namespace platform

} // namespace modm

#endif // MODM_AVR_UART_SPI_MASTER{{id}}_HPP
