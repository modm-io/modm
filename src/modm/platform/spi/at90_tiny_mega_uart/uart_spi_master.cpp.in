/*
 * Copyright (c) 2013-2017, Niklas Hauser
 * Copyright (c) 2014, Sascha Schade
 * Copyright (c) 2017, Fabian Greif
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

%% if id == ""
#include "uart_spi_master.hpp"
%% else
#include "uart_spi_master_{{ id }}.hpp"
%% endif

#include <modm/architecture/interface/atomic_lock.hpp>
#include <modm/math/utils/bit_operation.hpp>
#include <modm/utils/bit_constants.hpp>

%% if not extended
modm::platform::UartSpiMaster{{id}}::DataOrder
modm::platform::UartSpiMaster{{id}}::dataOrder = DataOrder::MsbFirst;
%% endif

// bit 7 (0x80) is used for transfer 1 byte
// bit 6 (0x40) is used for transfer multiple byte
// bit 5-0 (0x3f) are used to store the acquire count
uint8_t
modm::platform::UartSpiMaster{{id}}::state(0);

void *
modm::platform::UartSpiMaster{{id}}::context(nullptr);

modm::Spi::ConfigurationHandler
modm::platform::UartSpiMaster{{id}}::configuration(nullptr);
// ----------------------------------------------------------------------------

void
modm::platform::UartSpiMaster{{id}}::initialize(uint16_t prescaler)
{
	modm::atomic::Lock lock;

#if defined(UBRR{{ id }})
	UBRR{{ id }} = 0;
#else
	UBRRL = 0;
	UBRRH = 0;
#endif

#if defined(UMSEL)
	UCSRC = (1 << UMSEL);
#else
	// set MSPI mode of operation and SPI data mode
	UCSR{{ id }}C = (1 << UMSEL{{id}}1) | (1 << UMSEL{{id}}0);
#endif

	// enable receiver and transmitter
	UCSR{{ id }}B = (1 << RXEN{{id}}) | (1 << TXEN{{id}});
	// set baudrate _after_ enabling transmitter
#if defined(UBRR{{ id }})
	UBRR{{ id }} = prescaler;
#else
	UBRRH = (prescaler >> 8) & 0xFF;
	UBRRL =  prescaler & 0xFF;
#endif

%% if not extended
	dataOrder = DataOrder::MsbFirst;
%% endif
	state &= 0x3f;
}
// ----------------------------------------------------------------------------

uint8_t
modm::platform::UartSpiMaster{{id}}::acquire(void *ctx, ConfigurationHandler handler)
{
	if (context == nullptr)
	{
		context = ctx;
		state = (state & ~0x3f) | 1;
		// if handler is not nullptr and is different from previous configuration
		if (handler and configuration != handler) {
			configuration = handler;
			configuration();
		}
		return 1;
	}

	if (ctx == context)
		return (++state & 0x3f);

	return 0;
}

uint8_t
modm::platform::UartSpiMaster{{id}}::release(void *ctx)
{
	if (ctx == context)
	{
		if ((--state & 0x3f) == 0)
			context = nullptr;
	}
	return (state & 0x3f);
}
// ----------------------------------------------------------------------------

modm::ResumableResult<uint8_t>
modm::platform::UartSpiMaster{{id}}::transfer(uint8_t data)
{
	// this is a manually implemented "fast resumable function"
	// there is no context or nesting protection, since we don't need it.
	// there are only two states encoded into 1 bit (LSB of state):
	//   1. waiting to start, and
	//   2. waiting to finish.

	// LSB != Bit7 ?
	if ( !(state & Bit7) )
	{
		// wait for transmit register empty
		if (!((UCSR{{id}}A & (1 << UDRE{{id}}))))
			return {modm::rf::Running};

%% if not extended
		if(dataOrder == DataOrder::MsbFirst) {
			data = ::modm::bitReverse(data);
		}
%% endif
		UDR{{id}} = data;

		// set LSB = Bit7
		state |= Bit7;
	}

	// wait for receive register not empty
	if (!((UCSR{{id}}A & (1 << RXC{{id}}))))
		return {modm::rf::Running};

	data = UDR{{id}};
%% if not extended
	if(dataOrder == DataOrder::MsbFirst) {
		data = ::modm::bitReverse(data);
	}
%% endif
	// transfer finished
	state &= ~Bit7;
	return {modm::rf::Stop, data};
}

modm::ResumableResult<void>
modm::platform::UartSpiMaster{{id}}::transfer(
		uint8_t *tx, uint8_t *rx, std::size_t length)
{
	// this is a manually implemented "fast resumable function"
	// there is no context or nesting protection, since we don't need it.
	// there are only two states encoded into 1 bit (Bit6 of state):
	//   1. initialize index, and
	//   2. wait for 1-byte transfer to finish.

	// we need to globally remember which byte we are currently transferring
	static std::size_t index = 0;

	// we are only interested in Bit6
	switch(state & Bit6)
	{
		case 0:
			// we will only visit this state once
			state |= Bit6;

			// initialize index and check range
			index = 0;
			while (index < length)
			{
		default:
		{
				// call the resumable function
				modm::ResumableResult<uint8_t> result = transfer(tx ? tx[index] : 0);

				// if the resumable function is still running, so are we
				if (result.getState() > modm::rf::NestingError)
					return {modm::rf::Running};

				// if rx != 0, we copy the result into the array
				if (rx) rx[index] = result.getResult();
		}
				index++;
			}

			// clear the state
			state &= ~Bit6;
			return {modm::rf::Stop};
	}
}
