/*
 * Copyright (c) 2009, Martin Rosekeit
 * Copyright (c) 2009-2012, Fabian Greif
 * Copyright (c) 2010, Georgi Grinshpun
 * Copyright (c) 2012-2017, 2023, Niklas Hauser
 * Copyright (c) 2013, Kevin LÃ¤ufer
 * Copyright (c) 2014, Sascha Schade
 * Copyright (c) 2021, Jeff McBride
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#include "spi_master_{{id}}.hpp"

// ----------------------------------------------------------------------------

uint8_t
modm::platform::SpiMaster{{ id }}::acquire(void *ctx, ConfigurationHandler handler)
{
	if (context == nullptr)
	{
		context = ctx;
		count = 1;
		// if handler is not nullptr and is different from previous configuration
		if (handler and configuration != handler) {
			configuration = handler;
			configuration();
		}
		return 1;
	}

	if (ctx == context)
		return ++count;

	return 0;
}

uint8_t
modm::platform::SpiMaster{{ id }}::release(void *ctx)
{
	if (ctx == context)
	{
		if (--count == 0)
			context = nullptr;
	}
	return count;
}
// ----------------------------------------------------------------------------

modm::ResumableResult<uint8_t>
modm::platform::SpiMaster{{ id }}::transfer(uint8_t data)
{
%% if use_fiber
	// Clear any stale rx data ready status
	read();

	// wait for previous transfer to finish
	while (!isTransmitDataRegisterEmpty())
		modm::this_fiber::yield();

	// start transfer by copying data into register
	write(data);

	// wait for current transfer to finish
	while(!isReceiveDataRegisterFull())
		modm::this_fiber::yield();

	return read();
%% else
	// this is a manually implemented "fast resumable function"
	// there is no context or nesting protection, since we don't need it.
	// there are only two states encoded into 1 bit (LSB of state):
	//   1. waiting to start, and
	//   2. waiting to finish.

	// LSB != Bit0 ?
	if ( !(state & Bit0) )
	{
		// Clear any stale rx data ready status
		read();

		// wait for previous transfer to finish
		if (!isTransmitDataRegisterEmpty())
			return {modm::rf::Running};

		// start transfer by copying data into register
		write(data);

		// set LSB = Bit0
		state |= Bit0;
	}

	if (!isReceiveDataRegisterFull())
		return {modm::rf::Running};

	// transfer finished
	state &= ~Bit0;
	return {modm::rf::Stop, read()};
%% endif
}

modm::ResumableResult<void>
modm::platform::SpiMaster{{ id }}::transfer(
		const uint8_t * tx, uint8_t * rx, std::size_t length)
{
%% if use_fiber
	for (std::size_t index = 0; index < length; index++)
	{
		// if tx == 0, we use a dummy byte 0x00 else we copy it from the array
		auto result = transfer(tx ? tx[index] : 0);
		// if rx != 0, we copy the result into the array
		if (rx) rx[index] = result;
	}
%% else
	// this is a manually implemented "fast resumable function"
	// there is no context or nesting protection, since we don't need it.
	// there are only two states encoded into 1 bit (Bit1 of state):
	//   1. initialize index, and
	//   2. wait for 1-byte transfer to finish.

	// we need to globally remember which byte we are currently transferring
	static std::size_t index = 0;

	// we are only interested in Bit1
	switch(state & Bit1)
	{
		case 0:
			// we will only visit this state once
			state |= Bit1;

			// initialize index and check range
			index = 0;
			while (index < length)
			{
		default:
		{
				// if tx == 0, we use a dummy byte 0x00
				// else we copy it from the array
				// call the resumable function
				modm::ResumableResult<uint8_t> result = transfer(tx ? tx[index] : 0);

				// if the resumable function is still running, so are we
				if (result.getState() > modm::rf::NestingError)
					return {modm::rf::Running};

				// if rx != 0, we copy the result into the array
				if (rx) rx[index] = result.getResult();
		}
				index++;
			}

			// clear the state
			state &= ~Bit1;
			return {modm::rf::Stop};
	}
%% endif
}

void modm::platform::SpiMaster{{ id }}::transferBlocking(
		const uint8_t *tx, std::size_t length)
{
	uint8_t index = 0;
	while(index < length) {
		// Wait for tx empty
		while(!isTransmitDataRegisterEmpty());
		// Write next byte
		write(tx ? tx[index] : 0);
		index++;
	}
	// wait for the internal shift register to be empty, indicating the transmission of the final byte is complete
	while(!isTxEmpty());
}

