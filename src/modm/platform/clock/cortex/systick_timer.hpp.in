/*
 * Copyright (c) 2013, Kevin LÃ¤ufer
 * Copyright (c) 2014-2017, Niklas Hauser
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#ifndef MODM_CORTEX_SYSTICK_TIMER_HPP
#define MODM_CORTEX_SYSTICK_TIMER_HPP

#include <stdint.h>
#include <cmath>
#include <modm/architecture/interface/peripheral.hpp>

namespace modm
{

namespace cortex
{

typedef void (*InterruptHandler)(void);

/**
 * @brief		SysTick Timer
 * @ingroup		cortex
 */
class SysTickTimer
{
public:
	/**
	 * Initializes the SysTick Timer to generate periodic events.
	 *
	 *
	 * @warning	The SysTick Timer is used by default to increment
	 * 			modm::Clock, which is used by modm::Timeout and other
	 * 			similar processing classes.
	 * 			You must not increment the modm::Clock
	 * 			additionally somewhere else.
	 *
	 * @tparam	SystemClock
	 * 		the currently active system clock
	 * @tparam	rate
	 * 		the desired update rate of the modm::Clock
	 * @tparam	tolerance
	 * 		the allowed absolute tolerance for the resulting clock rate
	 */
	template< class SystemClock, uint16_t tolerance = modm::Tolerance::ZeroPercent >
	static void
	initialize()
	{
		constexpr float desired = float(SystemClock::Frequency) / {{ systick_frequency }};

		// calculate the possible rates above and below the requested rate
		constexpr uint32_t rate_lower = SystemClock::Frequency / std::ceil(desired);
		constexpr uint32_t rate_upper = SystemClock::Frequency / std::floor(desired);

		// calculate the half-point between the upper and lower rate
		constexpr uint32_t rate_middle = (rate_upper + rate_lower) / 2;
		// decide which reload value is closer to a possible rate
		constexpr uint32_t reload = (1000 < rate_middle) ? std::ceil(desired) : std::floor(desired);

		// check if within rate tolerance
		constexpr uint32_t generated_rate = SystemClock::Frequency / reload;
		PeripheralDriver::assertBaudrateInTolerance<
				/* nearest possible value */ generated_rate,
				/* desired = */ {{ systick_frequency }},
				tolerance >();

		enable(reload - 1);
	}

	/**
	 * Disables SysTick Timer.
	 *
	 * @warning	If the SysTick Timer is disabled modm::Clock is not
	 * 			incremented automatically. Workflow classes which
	 * 			rely on modm::Clock will not work if modm::Clock
	 * 			is not incremented.
	 */
	static void
	disable();

	/**
	 * Passed method will be called periodically on each event.
	 * Previously passed interrupt handler will be detached.
	 */
	static void
	attachInterruptHandler(InterruptHandler handler);

	/**
	 * Detaches previously attached interrupt handler.
	 */
	static void
	detachInterruptHandler();

private:
	static void
	enable(uint32_t reload);
};

}

}

#endif	//  MODM_STM32_CORTEX_TIMER_HPP
