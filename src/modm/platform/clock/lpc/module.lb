#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2016-2018, Niklas Hauser
# Copyright (c) 2017, Fabian Greif
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------


def init(module):
    module.name = ":platform:lpc"
    module.description = "System Clock"

def prepare(module, options):
    if not options[":target"].has_driver("clock:lpc"):
        return False

    module.depends(
        ":cmsis:device",
        ":utils",
        ":platform:clock",
    )
    return True

def validate(env):
    device = env[":target"]
    target = device.identifier
    core = device.get_driver("core")["type"]
    if not target["family"] in ["11"]:
        raise ValidateExceptions("Internal RC oscillator frequency yet unknown for family {}".format(target["family"]))
    if not core == "cortex-m0":
        raise ValidateExceptions("Delay loop count yet unknown for core {}".format(core))

def build(env):
    device = env[":target"]
    driver = device.get_driver("clock")

    properties = device.properties

    properties["target"] = target = device.identifier
    properties["partname"] = device.partname
    properties["core"] = core = device.get_driver("core")["type"]
    properties["driver"] = driver

    if target["family"] in ["11"]:
        properties["irc_frequency_mhz"] = 12 # MHz

    if core == "cortex-m0":
        loops = 4

    properties["loops"] = loops


    env.substitutions = properties
    env.outbasepath = "modm/src/modm/platform/clock"

    env.template("clock.cpp.in")
    env.template("clock.hpp.in")
    env.template("clock_impl.hpp.in")

    env.copy("pll_calculator.hpp")
