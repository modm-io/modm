/*
 * Copyright (c) 2013-2014, Kevin LÃ¤ufer
 * Copyright (c) 2014-2017, Niklas Hauser
 * Copyright (c) 2019, Sascha Schade
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#include "../device.hpp"
#include "clock.hpp"

namespace modm::clock
{
uint32_t modm_fastdata fcpu({{ "{0:,}".format(irc_frequency_mhz|int * 1000000).replace(',', "'") }});
uint32_t modm_fastdata fcpu_kHz({{ "{0:,}".format(irc_frequency_mhz|int * 1000).replace(',', "'") }});
uint16_t modm_fastdata fcpu_MHz({{ irc_frequency_mhz }});
uint16_t modm_fastdata ns_per_loop({{ "{0:,}".format((loops * 1000.0 / irc_frequency_mhz)|int).replace(',', "'") }});
}

// TODO: Move to common file
#define PDRUNCFG_SYSOSC_PD		(1<<5)
#define PDRUNCFG_SYSPLL_PD		(1<<7)
#define SYSOSCCTRL_BYPASS		(1<<0)
#define SYSOSCCTRL_FREQRANGE	(1<<1)
#define SYSPLLSTAT_LOCK			(1<<0)
#define SYSAHBCLKCTRL_SYS			(1<<0)
#define SYSAHBCLKCTRL_ROM			(1<<1)
#define SYSAHBCLKCTRL_RAM			(1<<2)
#define SYSAHBCLKCTRL_FLASHREG		(1<<3)
#define SYSAHBCLKCTRL_FLASHARRAY	(1<<4)
#define SYSAHBCLKCTRL_I2C			(1<<5)
#define SYSAHBCLKCTRL_GPIO			(1<<6)
#define SYSAHBCLKCTRL_CT16B0		(1<<7)
#define SYSAHBCLKCTRL_CT16B1		(1<<8)
#define SYSAHBCLKCTRL_CT32B0		(1<<9)
#define SYSAHBCLKCTRL_CT32B1		(1<<10)
#define SYSAHBCLKCTRL_SSP0			(1<<11)
#define SYSAHBCLKCTRL_UART			(1<<12)
#define SYSAHBCLKCTRL_ADC			(1<<13)
#define SYSAHBCLKCTRL_WDT			(1<<15)
#define SYSAHBCLKCTRL_IOCON			(1<<16)	// clock for io configuration block
#define SYSAHBCLKCTRL_CAN			(1<<17)
#define SYSAHBCLKCTRL_SSP1			(1<<18)

// ----------------------------------------------------------------------------
bool
modm::platform::ClockControl::enableExternalClock()
{
	LPC_SYSCON->PDRUNCFG &= ~PDRUNCFG_SYSOSC_PD;	// powerup
	LPC_SYSCON->SYSOSCCTRL |= SYSOSCCTRL_BYPASS;	// enable bypass
	return true;
}

// ----------------------------------------------------------------------------
bool
modm::platform::ClockControl::enablePll(PllSource source, uint8_t pllM, uint8_t pllP, uint32_t waitCycles)
{
	// SYSPLLCLKSEL
	LPC_SYSCON->SYSPLLCLKSEL = (LPC_SYSCON->SYSPLLCLKSEL & 0b11)
								| static_cast<uint32_t>(source);

	// toggle update enable register
	LPC_SYSCON->SYSPLLCLKUEN = 0x01;
	LPC_SYSCON->SYSPLLCLKUEN = 0x00;
	LPC_SYSCON->SYSPLLCLKUEN = 0x01;

	// wait until updated
	while (not(LPC_SYSCON->SYSPLLCLKUEN & 0x01)) {
		if (not --waitCycles)
			return false;
	};

	LPC_SYSCON->SYSPLLCTRL = (0x1f & (pllM-1)) | (0x60 & (pllP << 4));
	LPC_SYSCON->PDRUNCFG &= ~PDRUNCFG_SYSPLL_PD;	// power up pll

	// wait for pll to be locked
	while (not(LPC_SYSCON->SYSPLLSTAT & SYSPLLSTAT_LOCK)) {
		if (not --waitCycles)
			return false;
	};
	return true;
}

// ----------------------------------------------------------------------------
bool
modm::platform::ClockControl::enableSystemClock(SystemClockSource src, uint32_t waitCycles)
{
	LPC_SYSCON->MAINCLKSEL = static_cast<uint32_t>(src);

	// toggle update enable register
	LPC_SYSCON->MAINCLKUEN = 0x01;
	LPC_SYSCON->MAINCLKUEN = 0x00;
	LPC_SYSCON->MAINCLKUEN = 0x01;

	// wait until updated
	while (not(LPC_SYSCON->MAINCLKUEN & 0x01)) {
		if (not --waitCycles)
			return false;
	}

	// TODO: do not enable gpio clock here but in startup.c.in form gpio driver
	LPC_SYSCON->SYSAHBCLKCTRL =   SYSAHBCLKCTRL_SYS | SYSAHBCLKCTRL_ROM
								| SYSAHBCLKCTRL_RAM | SYSAHBCLKCTRL_FLASHREG
								| SYSAHBCLKCTRL_FLASHARRAY | SYSAHBCLKCTRL_GPIO
								| SYSAHBCLKCTRL_IOCON;
	// TODO: set SSP0, UART and SSP1 prescalers in the specific driver file

	return true;
}
