/*
 * Copyright (c) 2013, Kevin LÃ¤ufer
 * Copyright (c) 2014-2017, Niklas Hauser
 * Copyright (c) 2017, Fabian Greif
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#ifndef MODM_LPC_CLOCK_HPP
#define MODM_LPC_CLOCK_HPP

#include <stdint.h>
#include "common.hpp"
#include <modm/platform/device.hpp>

namespace modm::platform
{
/**
 * Clock management
 *
 * \ingroup
 */
class ClockControl
{
public:
	enum class
	PllSource
	{
		IRC = 0,
		SystemOscillator = 1,
		InternalClock = IRC,
		ExternalClock = SystemOscillator,
		ExternalCrystal = SystemOscillator,
	};

	enum class
	SystemClockSource : uint32_t
	{
		IRC = 0x0,
		SystemPllInput = 0x1,
		WatchdogOscillator = 0x2,
		SystemPllOutput = 0x3,
		InternalClock = IRC,
		ExternalClock = SystemPllInput, // FIXME: not quite hitting it
		ExternalCrystal = ExternalClock,
		Pll = SystemPllOutput,
	};

	enum class
	ClockOutputSource : uint32_t
	{
		IRC = 0x0,
		SystemOscillator = 0x1,
		WatchdogOscillator = 0x2,
		MainClock = 0x3,
		InternalClock = IRC,
		ExternalClock = SystemOscillator,
		ExternalCrystal = SystemOscillator,
		SystemClock = MainClock,
	};

	using AhbPrescaler = uint8_t;

public:
	static bool
	enableExternalClock();

	template< uint32_t External_Crystal_Hz >
	static bool
	enableExternalCrystal();

	/**
	 * Enable PLL.
	 *
	 * \param	source
	 * 		Source select for PLL
	 *
	 * \param	pllM
	 * 		???
	 *
	 * \param	pllP
	 * 		???
	 *
	 * Example:
	 *
	 */
	static bool
	enablePll(PllSource source, uint8_t pllM, uint8_t pllP, uint32_t waitCycles = 2'048);

	static bool
	enableSystemClock(SystemClockSource src, uint32_t waitCycles = 2'048);

	static bool
	enableClockOutput(ClockOutputSource src, uint8_t div = 1, uint32_t waitCycles = 2'048)
	{
		bool retval;
		LPC_SYSCON->CLKOUTCLKSEL = 0x3 & static_cast<uint32_t>(src);
		LPC_SYSCON->CLKOUTUEN = 0x01;	// toggle update enable register
		LPC_SYSCON->CLKOUTUEN = 0x00;
		LPC_SYSCON->CLKOUTUEN = 0x01;
		LPC_SYSCON->CLKOUTDIV = 0xff & static_cast<uint8_t>(div);

		while (not (retval = LPC_SYSCON->CLKOUTUEN & 0x01) and --waitCycles)
			;

		return retval;
	}

public:
	static inline bool
	setAhbPrescaler(AhbPrescaler prescaler)
	{
		LPC_SYSCON->SYSAHBCLKDIV = prescaler;
		return true;
	}

public:
	/** Set flash latency for CPU frequency and voltage.
	 * Does nothing if CPU frequency is too high for the available
	 * voltage.
	 *
	 * @returns maximum CPU frequency for voltage.
	 * @retval	<=CPU_Frequency flash latency has been set correctly.
	 * @retval	>CPU_Frequency requested frequency too high for voltage.
	 */
	template< uint32_t Core_Hz, uint16_t Core_mV = 3'300>
	static uint32_t
	setFlashLatency();

	template< uint32_t Core_Hz >
	static void
	updateCoreFrequency();
};
} // modm::platform namespace

#include "clock_impl.hpp"

#endif	//  MODM_LPC_CLOCK_HPP
