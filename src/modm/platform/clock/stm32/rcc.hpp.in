/*
 * Copyright (c) 2012, 2016, Sascha Schade
 * Copyright (c) 2012, 2017, Fabian Greif
 * Copyright (c) 2012, 2014-2017, Niklas Hauser
 * Copyright (c) 2013-2014, Kevin LÃ¤ufer
 * Copyright (c) 2018, 2021, Christopher Durand
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#ifndef MODM_STM32_RCC_HPP
#define MODM_STM32_RCC_HPP

#include <stdint.h>
#include "../device.hpp"
#include <modm/platform/core/peripherals.hpp>
#include <modm/architecture/interface/delay.hpp>

namespace modm::platform
{

/**
 * Reset and Clock Control for STM32 devices.
 *
 * This class abstracts access to clock settings on the STM32.
 * You need to use this class to enable internal and external clock
 * sources & outputs, set PLL parameters and AHB & APB prescalers.
 * Don't forget to set the flash latencies.
 *
 * @author		Niklas Hauser
 * @ingroup		modm_platform_rcc
 */
class Rcc
{
public:
	enum class
	PllSource : uint32_t
	{
%% if target["family"] in ["f2", "f4", "f7", "l4", "g0", "g4"]
		/// High speed internal clock (16 MHz)
		Hsi = RCC_PLLCFGR_PLLSRC_HSI,
		InternalClock = Hsi,
		/// High speed external clock (see HseConfig)
		Hse = RCC_PLLCFGR_PLLSRC_HSE,
%% elif target["family"] in ["f0", "f3"]
		/// High speed internal clock (8 MHz)
		// On STM32F0 and STM32F3 some devices have a fixed /2 pre-divider, some have a configurable
		// pre-divider and some have both, selectable via pll source mux
	%% if (target["family"] == "f0" and (target["name"] in ["42", "48", "70", "71", "72", "78", "91", "98"] or (target["name"] in ["30"] and target["size"] in ["c"]))) or (target["family"] == "f3" and target["name"] in ["02", "03", "98"] and target["size"] in ["d", "e"])
		Hsi = RCC_CFGR_PLLSRC_HSI_PREDIV,
		InternalClock = Hsi,
	%% endif
	%% if (target["family"] == "f0") or (target["family"] == "f3" and target["name"] in ["18", "28", "58", "73", "78"]) or (target["family"] == "f3" and target["size"] in ["8", "c"])
		HsiDiv2 = RCC_CFGR_PLLSRC_HSI_DIV2,
	%% endif
		/// High speed external clock (see HseConfig)
		Hse = RCC_CFGR_PLLSRC_HSE_PREDIV,
%% elif target["family"] in ["f1", "l1"]
		/// High speed internal clock (8 MHz)
		Hsi = 0,
		InternalClock = Hsi,
		/// High speed external clock (see HseConfig)
		Hse = RCC_CFGR_PLLSRC,
%% elif target["family"] == "l0"
		/// High speed internal clock (16 MHz)
		Hsi = 0,
		Hsi16 = Hsi,
		InternalClock = Hsi16,
		/// High speed external clock
		Hse = RCC_CFGR_PLLSRC,
%% endif
%% if hsi48
		/// High speed internal clock (48 MHz)
		Hsi48 = RCC_CFGR_PLLSRC_HSI48_PREDIV,
		InternalClockMHz48 = Hsi48,
%% endif
%% if target["family"] in ["l4"]
		Msi = RCC_PLLCFGR_PLLSRC_MSI,
		MultiSpeedInternalClock = Msi,
%% endif
		ExternalClock = Hse,
		ExternalCrystal = Hse,
	};

%% if target["family"] in ["l0", "l1"]
	enum class
	PllMultiplier : uint32_t
	{
		Mul3 = RCC_CFGR_PLLMUL3,
		Mul4 = RCC_CFGR_PLLMUL4,
		Mul6 = RCC_CFGR_PLLMUL6,
		Mul8 = RCC_CFGR_PLLMUL8,
		Mul12 = RCC_CFGR_PLLMUL12,
		Mul16 = RCC_CFGR_PLLMUL16,
		Mul24 = RCC_CFGR_PLLMUL24,
		Mul32 = RCC_CFGR_PLLMUL32,
		Mul48 = RCC_CFGR_PLLMUL48,
	};
%% endif

	enum class
	SystemClockSource : uint32_t
	{
		Hsi = RCC_CFGR_SW_HSI,
%% if target["family"] == "l0"
		Hsi16 = Hsi,
%% endif
		Hse = RCC_CFGR_SW_HSE,
%% if hsi48
		Hsi48 = RCC_CFGR_SW_HSI48,
		InternalClockMHz48 = Hsi48,
%% endif
%% if target["family"] in ["l0", "l4"]
		Msi = RCC_CFGR_SW_MSI,
		MultiSpeedInternalClock = Msi,
%% endif

		InternalClock = Hsi,
		ExternalClock = Hse,
		ExternalCrystal = Hse,
		Pll = RCC_CFGR_SW_PLL,
	};

	enum class
	RealTimeClockSource : uint32_t
	{
%% if target["family"] in ["l0", "l1"]
		Lsi = RCC_CSR_RTCSEL_1,
		Lse = RCC_CSR_RTCSEL_0,
		Hse = RCC_CSR_RTCSEL_0 | RCC_CSR_RTCSEL_1,
%% else
		Lsi = RCC_BDCR_RTCSEL_1,
		Lse = RCC_BDCR_RTCSEL_0,
		Hse = RCC_BDCR_RTCSEL_0 | RCC_BDCR_RTCSEL_1,
%% endif

		ExternalClock = Hse,
		ExternalCrystal = Hse,
		LowSpeedInternalClock = Lsi,
		LowSpeedExternalClock = Lse,
		LowSpeedExternalCrystal = Lse
	};

	enum class
	WatchdogClockSource : uint32_t
	{
		LowSpeedInternalClock = 0
	};

	enum class
	AhbPrescaler : uint32_t
	{
		Div1   = RCC_CFGR_HPRE_DIV1,
		Div2   = RCC_CFGR_HPRE_DIV2,
		Div4   = RCC_CFGR_HPRE_DIV4,
		Div8   = RCC_CFGR_HPRE_DIV8,
		Div16  = RCC_CFGR_HPRE_DIV16,
		Div64  = RCC_CFGR_HPRE_DIV64,
		Div128 = RCC_CFGR_HPRE_DIV128,
		Div256 = RCC_CFGR_HPRE_DIV256,
		Div512 = RCC_CFGR_HPRE_DIV512
	};

%% if target["family"] in ["f0", "g0"]
	enum class
	ApbPrescaler : uint32_t
	{
		Div1   = RCC_CFGR_PPRE_DIV1,
		Div2   = RCC_CFGR_PPRE_DIV2,
		Div4   = RCC_CFGR_PPRE_DIV4,
		Div8   = RCC_CFGR_PPRE_DIV8,
		Div16  = RCC_CFGR_PPRE_DIV16
	};
%% else
	enum class
	Apb1Prescaler : uint32_t
	{
		Div1   = RCC_CFGR_PPRE1_DIV1,
		Div2   = RCC_CFGR_PPRE1_DIV2,
		Div4   = RCC_CFGR_PPRE1_DIV4,
		Div8   = RCC_CFGR_PPRE1_DIV8,
		Div16  = RCC_CFGR_PPRE1_DIV16
	};

	enum class
	Apb2Prescaler : uint32_t
	{
		Div1   = RCC_CFGR_PPRE2_DIV1,
		Div2   = RCC_CFGR_PPRE2_DIV2,
		Div4   = RCC_CFGR_PPRE2_DIV4,
		Div8   = RCC_CFGR_PPRE2_DIV8,
		Div16  = RCC_CFGR_PPRE2_DIV16
	};
%% endif
%% if usbprescaler
	enum class
	UsbPrescaler : uint32_t
	{
		Div1 = RCC_CFGR_USBPRE,	///< do not divide
		Div1_5 = 0,				///< divide by 1.5
	};
%% endif

%% if pllsai_p_usb
	enum class Clock48Source
	{
		PllQ = 0,
%% if target["family"] == "f4" and target["name"] in ["69", "79"]
		PllSaiP = RCC_DCKCFGR_CK48MSEL
%% else
		PllSaiP = RCC_DCKCFGR2_CK48MSEL
%% endif
	};
%% endif

%% if target["family"] in ["f2", "f4", "f7"]
	enum class
	ClockOutput1Source : uint32_t
	{
		InternalClock = 0,
		ExternalClock = RCC_CFGR_MCO1_1,
		ExternalCrystal = RCC_CFGR_MCO1_1,
		Pll = RCC_CFGR_MCO1_1 | RCC_CFGR_MCO1_0,
	};

	%% if not partname.startswith("stm32f412c")
	enum class
	ClockOutput2Source : uint32_t
	{
		SystemClock = 0,
		ExternalClock = RCC_CFGR_MCO2_1,
		ExternalCrystal = RCC_CFGR_MCO2_1,
		Pll = RCC_CFGR_MCO2_1 | RCC_CFGR_MCO2_0,
	};
	%% endif
%% elif target["family"] in ["l0", "l1", "l4", "g0", "g4"]
	enum class
	ClockOutputSource : uint32_t
	{
		Disable = 0,
		SystemClock = (1 << RCC_CFGR_MCOSEL_Pos), // SYSCLK
%% if target["family"] in ["l4"]
		MultiSpeedInternalClock = (2 << RCC_CFGR_MCOSEL_Pos), // MSI
%% endif
%% if target["family"] in ["l0", "l1"]
		InternalClock = (2 << RCC_CFGR_MCOSEL_Pos), // HSI16
		MultiSpeedInternalClock = (3 << RCC_CFGR_MCOSEL_Pos), // MSI
%% else
		InternalClock = (3 << RCC_CFGR_MCOSEL_Pos), // HSI16
%% endif
		ExternalClock = (4 << RCC_CFGR_MCOSEL_Pos), // HSE
		ExternalCrystal = (4 << RCC_CFGR_MCOSEL_Pos), // HSE
		Pll = (5 << RCC_CFGR_MCOSEL_Pos), // Main PLL
		LowSpeedInternalClock = (6 << RCC_CFGR_MCOSEL_Pos), // LSI
		LowSpeedExternalClock = (7 << RCC_CFGR_MCOSEL_Pos), // LSE
	};
%% else
	enum class
	ClockOutputSource : uint32_t
	{
		SystemClock   = RCC_CFGR_MCO_SYSCLK,
		InternalClock = RCC_CFGR_MCO_HSI,
		ExternalClock = RCC_CFGR_MCO_HSE,
		ExternalCrystal = RCC_CFGR_MCO_HSE,
	%% if target["family"] == "f0"
		InternalClockMHz14 = RCC_CFGR_MCO_HSI14,
	%% endif
	%% if hsi48
		InternalClockMHz48 = RCC_CFGR_MCO_HSI48,
	%% endif
	%% if target["family"] == "f1"
		Pll = RCC_CFGR_MCO_PLLCLK_DIV2,	///< divided by 2
	%% else
		Pll = RCC_CFGR_MCO_PLL,
	%% endif
	};
%% endif

%% if target["family"] == "g4"
	enum class
	CanClockSource : uint32_t
	{
		Hse = 0,
		PllQ = RCC_CCIPR_FDCANSEL_0,
		Pclk = RCC_CCIPR_FDCANSEL_1,
	};

	static void
	setCanClockSource(CanClockSource source)
	{
		RCC->CCIPR = (RCC->CCIPR & ~RCC_CCIPR_FDCANSEL) | uint32_t(source);
	}

	/// FDCAN subsystem prescaler common to all FDCAN instances
	enum class
	CanPrescaler : uint8_t
	{
		Div1  = 0b0000,
		Div2  = 0b0001,
		Div4  = 0b0010,
		Div6  = 0b0011,
		Div8  = 0b0100,
		Div10 = 0b0101,
		Div12 = 0b0110,
		Div14 = 0b0111,
		Div16 = 0b1000,
		Div18 = 0b1001,
		Div20 = 0b1010,
		Div22 = 0b1011,
		Div24 = 0b1100,
		Div26 = 0b1101,
		Div28 = 0b1110,
		Div30 = 0b1111,
	};

	/// Configure CAN subsystem prescaler
	/// \warning Configure the prescaler before enabling the CAN peripherals
	/// \returns true if setting the prescaler was successful
	static bool
	setCanPrescaler(CanPrescaler prescaler);
%% endif

public:
	// sources
	static bool
	enableInternalClock(uint32_t waitCycles = 2048);

%% if target["family"] == "f0"
	static bool
	enableInternalClockMHz14(uint32_t waitCycles = 2048);
%% endif

%% if hsi48
	static bool
	enableInternalClockMHz48(uint32_t waitCycles = 2048);
%% endif

%% if target["family"] in ["l0", "l1", "l4"]
	enum class
	MsiFrequency : uint32_t
	{
%% if target["family"] in ["l0", "l1"]
		kHz65  = RCC_ICSCR_MSIRANGE_0,
		kHz131 = RCC_ICSCR_MSIRANGE_1,
		kHz262 = RCC_ICSCR_MSIRANGE_2,
		kHz524 = RCC_ICSCR_MSIRANGE_3,
		MHz1   = RCC_ICSCR_MSIRANGE_4,
		MHz2   = RCC_ICSCR_MSIRANGE_5,
		MHz4   = RCC_ICSCR_MSIRANGE_6,
%% elif target["family"] in ["l4"]
		kHz100 = RCC_CR_MSIRANGE_0,
		kHz200 = RCC_CR_MSIRANGE_1,
		kHz400 = RCC_CR_MSIRANGE_2,
		kHz800 = RCC_CR_MSIRANGE_3,
		MHz1   = RCC_CR_MSIRANGE_4,
		MHz2   = RCC_CR_MSIRANGE_5,
		MHz4   = RCC_CR_MSIRANGE_6,
		MHz8   = RCC_CR_MSIRANGE_7,
		MHz16  = RCC_CR_MSIRANGE_8,
		MHz24  = RCC_CR_MSIRANGE_9,
		MHz32  = RCC_CR_MSIRANGE_10,
		MHz48  = RCC_CR_MSIRANGE_11,
%% endif
	};

	static bool
	enableMultiSpeedInternalClock(MsiFrequency msi_frequency = MsiFrequency::MHz4, uint32_t waitCycles = 2048);
%% endif

	static bool
	enableExternalClock(uint32_t waitCycles = 2048);

	static bool
	enableExternalCrystal(uint32_t waitCycles = 2048);

	static bool
	enableLowSpeedInternalClock(uint32_t waitCycles = 2048);

	static bool
	enableLowSpeedExternalClock(uint32_t waitCycles = 2048);

	static bool
	enableLowSpeedExternalCrystal(uint32_t waitCycles = 2048);

	/**
%% if target["family"] in ["f2", "f4", "f7", "l4", "g0", "g4"]
	 * \code
	 * VCO input frequency = PLL input clock frequency / PLLM [with 2 <= PLLM <= 63]
	 * VCO output frequency = VCO input frequency Ã PLLN [with 64 <= PLLN <= 432]
	 * \endcode
	 *
	 * \param	pllM
	 * 		Division factor for the main PLL (PLL) and
	 * 		audio PLL (PLLI2S) input clock (with 2 <= pllM <= 63).
	 *		The software has to set these bits correctly to ensure
	 *		that frequency of selected source divided by pllM
	 *		is in ranges from 1 to 2 MHz.
	 *
	 * \param	pllN
	 * 		Main PLL (PLL) multiplication factor for VCO (with 64 <= pllN <= 432).
	 * 		The software has to set these bits correctly to ensure
	 * 		that the VCO output frequency is
	 * 		 - 336 MHz for ST32F4. Core will run at 168 MHz.
	 *		 - 240 MHz for ST32F2. Core will run at 120 MHz.
	 *
%% if target["family"] in ["l4", "g0", "g4"]
	 * \param	pllR
	 *
%% else
	 * \param	pllP
	 *
%% endif
%% elif target["family"] in ["l1"]
	 * \param	pllMul
	 *
	 * \param	pllDiv
	 *
%% else
	 * \param	pllMul
	 *
%% if pllprediv2
	 * \param	pllPrediv
	 *
	 * \param	pllPrediv2
	 *
%% elif pllprediv
	 * \param	pllPrediv
	 *
%% endif
%% endif
	 */
	struct PllFactors
	{
%% if target["family"] in ["f2", "f4", "f7", "l4", "g0", "g4"]
		const uint8_t pllM;
		const uint16_t pllN;
 %% if target["family"] in ["l4", "g0", "g4"]
		const uint8_t pllR;
 %% else
		const uint8_t pllP;
 %% endif
 		const uint8_t pllQ = 0xff;
%% elif target["family"] in ["l0", "l1"]
		const PllMultiplier pllMul;
		const uint8_t pllDiv;
 %% if target["family"] == "l0"
		const bool enableHsiPrediv4 = false;
 %% endif
%% else
		const uint8_t pllMul;
 %% if pllprediv2
		const uint8_t pllPrediv;
		const uint8_t pllPrediv2;
 %% elif pllprediv
		const uint8_t pllPrediv;
 %% elif pll_hse_prediv2
		const bool enableHsePllPrediv2 = false;
 %% endif
 %% if usbprescaler
 		const UsbPrescaler usbPrediv = UsbPrescaler::Div1_5;
 %% endif
%% endif
	};

%% if pllsai_p_usb
	struct PllSaiFactors
	{
%% if target["family"] == "f4" and target["name"] in "46"
		const uint8_t pllSaiM;
%% endif
		const uint16_t pllSaiN;
		const uint8_t pllSaiP;
	};
%% endif

	/**
	 * Enable PLL.
	 *
	 * \param	source
	 * 		Source select for PLL. If you are using HSE you must
	 * 		enable it first (see enableHse()).
	 *
	 * \param	factors
	 * 		Struct with all pll factors. \see PllFactors.
	 *
	 * \param	waitCycles
	 * 		Number of cycles to wait for the pll to stabilise. Default: 2048.
	 */
	static bool
	enablePll(PllSource source, const PllFactors& pllFactors, uint32_t waitCycles = 2048);

%% if pllsai_p_usb
	/**
	 * Enable PLLSAI.
	 *
	 * \warning The PLL source must be selected first by configuring the main PLL.
	 *
	 * \param	factors
	 * 		Struct with all pllsai factors. \see PllSaiFactors.
	 *
	 * \param	waitCycles
	 * 		Number of cycles to wait for the pll to stabilise. Default: 2048.
	 */
	static bool
	enablePllSai(const PllSaiFactors& pllFactors, uint32_t waitCycles = 2048);
%% endif

%% if target["family"] in ["f2", "f4", "f7", "l4", "g0", "g4"]
	/**
	 * Enable PLL.
	 *
	 * \code
	 * VCO input frequency = PLL input clock frequency / PLLM [with 2 <= PLLM <= 63]
	 * VCO output frequency = VCO input frequency Ã PLLN [with 64 <= PLLN <= 432]
	 * \endcode
	 *
	 * \param	source
	 * 		Source select for PLL and for plli2s. If you are using
	 * 		HSE you must enable it first (see enableHse()).
	 *
	 * \param	pllM
	 * 		Division factor for the main PLL (PLL) and
	 * 		audio PLL (PLLI2S) input clock (with 2 <= pllM <= 63).
	 *		The software has to set these bits correctly to ensure
	 *		that frequency of selected source divided by pllM
	 *		is in ranges from 1 to 2 MHz.
	 *
	 * \param	pllN
	 * 		Main PLL (PLL) multiplication factor for VCO (with 64 <= pllN <= 432).
	 * 		The software has to set these bits correctly to ensure
	 * 		that the VCO output frequency is
	 * 		 - 336 MHz for ST32F4. Core will run at 168 MHz.
	 *		 - 240 MHz for ST32F2. Core will run at 120 MHz.
	 *
	 * Example:
	 *
	 */
	[[deprecated("Use PllFactors as argument instead")]] static bool
	enablePll(PllSource source, uint8_t pllM, uint16_t pllN,
%% if target["family"] in ["l4", "g0", "g4"]
	          uint8_t pllR,
%% else
			  uint8_t pllP,
%% endif
			  uint32_t waitCycles = 2048)
	{
		PllFactors pllFactors{
			.pllM = pllM,
			.pllN = pllN,
%% if target["family"] in ["l4", "g0", "g4"]
	          .pllR = pllR,
%% else
			  .pllP = pllP,
%% endif
		};
		return enablePll(source, pllFactors, waitCycles);
	}
%% elif target["family"] in ["l1"]
	[[deprecated("Use PllFactors as argument instead")]] static bool
	enablePll(PllSource source, PllMultiplier pllMul, uint8_t pllDiv,
	          uint32_t waitCycles = 2048)
	{
		PllFactors pllFactors{
			.pllMul = pllMul,
			.pllDiv = pllDiv,
		};
		return enablePll(source, pllFactors, waitCycles);
	}
%% elif target["family"] in ["f0", "f1", "f3"]
	[[deprecated("Use PllFactors as argument instead")]] static bool
	enablePll(PllSource source,
	          uint8_t pllMul,
	%% if pllprediv2
				uint8_t pllPrediv, uint8_t pllPrediv2,
	%% elif pllprediv
				uint8_t pllPrediv,
	%% endif
				uint32_t waitCycles = 2048)
	{
		PllFactors pllFactors{
			.pllMul = pllMul,
	%% if pllprediv2
				.pllPrediv = pllPrediv,
				.pllPrediv2 = pllPrediv2,
	%% elif pllprediv
				.pllPrediv = pllPrediv,
	%% endif
		};
		return enablePll(source, pllFactors, waitCycles);
	}
%% endif
%% if target["family"] == "l0"
	static inline bool
	isHsiPredivider4Active()
	{
		return (RCC->CR & RCC_CR_HSIDIVF);
	}

	static bool
	setHsiPredivider4Enabled(bool divideBy4, uint32_t waitCycles = 2048);
%% endif

%% if target["family"] == "f4"
	/** TODO: comments
	 * \code
	 * input clock is the HSE or HSI divided by M
	 * f(VCO clock) = f(PLLI2S clock input) Ã (PLLI2SN / PLLM)
	 * f(PLL I2S clock output) = f(VCO clock) / PLLI2SR
	 * \endcode
	 * 
	 * 
	 * \param	pllN
	 *	 	PLLI2S multiplication factor for VCO
	 *	 	Caution: The software has to set these bits correctly
	 *	 		to ensure that the VCO output frequency
	 * 			is between 100 and 432 MHz. 
	 *  	50 <= PLLI2SN <= 432
	 * 
	 * \param	pllR
	 * 		PLLI2S division factor for I2S clocks
	 * 		Caution: The I2Ss requires a frequency lower than
	 * 			or equal to 192 MHz to work correctly.
	 * 		2 <= PLLR <= 7
	 */
	struct PllI2sFactors
	{
		const uint16_t pllN;
		const uint16_t pllR;
	};

	/* TODO: comments */
	static bool
	enablePllI2s(const PllI2sFactors& pllFactors, uint32_t waitCycles);
%% endif

	// sinks
	static bool
	enableSystemClock(SystemClockSource src, uint32_t waitCycles = 2048);

	static inline bool
	enableRealTimeClock(RealTimeClockSource src)
	{
%% if target["family"] in ["l0", "l1"]
		RCC->CSR = (RCC->CSR & ~RCC_CSR_RTCSEL) | RCC_CSR_RTCEN | uint32_t(src);
%% else
		RCC->BDCR = (RCC->BDCR & ~RCC_BDCR_RTCSEL) | RCC_BDCR_RTCEN | uint32_t(src);
%% endif
		return true;
	}

	static inline bool
	enableWatchdogClock(WatchdogClockSource /*src*/)
	{ return true; }

%% if pllsai_p_usb
	static inline void
	setClock48Source(Clock48Source source)
	{
%% if target["family"] == "f4" and target["name"] in ["69", "79"]
		RCC->DCKCFGR = (RCC->DCKCFGR & ~RCC_DCKCFGR_CK48MSEL) | uint32_t(source);
%% else
		RCC->DCKCFGR2 = (RCC->DCKCFGR2 & ~RCC_DCKCFGR2_CK48MSEL) | uint32_t(source);
%% endif
	}
%% endif

%% if target["family"] in ["f2", "f4", "f7"]
	static inline bool
	enableClockOutput1(ClockOutput1Source src, uint8_t div)
	{
		uint32_t tmp = RCC->CFGR & ~(RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE);
		if (div > 1) tmp |= (div + 2) << 24;
		RCC->CFGR = tmp | uint32_t(src);
		return true;
	}

	%% if not partname.startswith("stm32f412c")
	static inline bool
	enableClockOutput2(ClockOutput2Source src, uint8_t div)
	{
		uint32_t tmp = RCC->CFGR & ~(RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE);
		if (div > 1) tmp |= (div + 2) << 27;
		RCC->CFGR = tmp | uint32_t(src);
		return true;
	}
	%% endif
%% elif target["family"] in ["l0", "l1", "l4", "g0", "g4"]
	enum class
	ClockOutputPrescaler : uint32_t
	{
		Div1 = 0,
		Div2 = (1 << RCC_CFGR_MCOPRE_Pos),
		Div4 = (2 << RCC_CFGR_MCOPRE_Pos),
		Div8 = (3 << RCC_CFGR_MCOPRE_Pos),
		Div16 = (4 << RCC_CFGR_MCOPRE_Pos),
%% if target["family"] in ["g0"]
		Div32 = (5 << RCC_CFGR_MCOPRE_Pos),
		Div64 = (6 << RCC_CFGR_MCOPRE_Pos),
		Div128 = (7 << RCC_CFGR_MCOPRE_Pos),
%% endif
	};

	static inline bool
	enableClockOutput(ClockOutputSource src, ClockOutputPrescaler div = ClockOutputPrescaler::Div1)
	{
		RCC->CFGR = (RCC->CFGR & ~(RCC_CFGR_MCOPRE)) | uint32_t(src) | uint32_t(div);
		return true;
	}
%% else
	static inline bool
	enableClockOutput(ClockOutputSource src)
	{
		RCC->CFGR = (RCC->CFGR & ~(RCC_CFGR_MCO)) | uint32_t(src);
		return true;
	}
%% endif

public:
	static inline bool
	setAhbPrescaler(AhbPrescaler prescaler)
	{
		RCC->CFGR = (RCC->CFGR & ~RCC_CFGR_HPRE) | uint32_t(prescaler);
		return true;
	}

%% if target["family"] in ["f0", "g0"]
	static inline bool
	setApbPrescaler(ApbPrescaler prescaler)
	{
		RCC->CFGR = (RCC->CFGR & ~RCC_CFGR_PPRE) | uint32_t(prescaler);
		return true;
	}
%% else
	static inline bool
	setApb1Prescaler(Apb1Prescaler prescaler)
	{
		RCC->CFGR = (RCC->CFGR & ~RCC_CFGR_PPRE1) | uint32_t(prescaler);
		return true;
	}

	static inline bool
	setApb2Prescaler(Apb2Prescaler prescaler)
	{
		RCC->CFGR = (RCC->CFGR & ~RCC_CFGR_PPRE2) | uint32_t(prescaler);
		return true;
	}
%% endif

%% if overdrive
	static bool
	enableOverdriveMode(uint32_t waitCycles = 2048);
%% endif

public:
	/** Set flash latency for CPU frequency and voltage.
	 * Does nothing if CPU frequency is too high for the available
	 * voltage.
	 *
	 * @returns maximum CPU frequency for voltage.
	 * @retval	<=CPU_Frequency flash latency has been set correctly.
	 * @retval	>CPU_Frequency requested frequency too high for voltage.
	 */
	template< uint32_t Core_Hz, uint16_t Core_mV = 3300>
	static uint32_t
	setFlashLatency();

	template< uint32_t Core_Hz >
	static void
	updateCoreFrequency();

public:
	template< Peripheral peripheral >
	static void
	enable();

	template< Peripheral peripheral >
	static bool
	isEnabled();

	template< Peripheral peripheral >
	static void
	disable();

private:
	struct flash_latency
	{
		uint32_t latency;
		uint32_t max_frequency;
	};
	static constexpr flash_latency
	computeFlashLatency(uint32_t Core_Hz, uint16_t Core_mV);
};

using ClockControl [[deprecated("Please use `modm::platform:Rcc` instead")]] = Rcc;

}   // namespace modm::platform


#include "rcc_impl.hpp"

#endif	//  MODM_STM32_RCC_HPP
