/*
 * Copyright (c) 2019, 2021 Niklas Hauser
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

namespace modm::platform
{

constexpr Rcc::flash_latency
Rcc::computeFlashLatency(uint32_t Core_Hz, uint16_t Core_mV)
{
	%% for mV, table_Hz in table.items() | sort
	constexpr uint32_t flash_latency_{{ mV }}[] =
	{
		%% for hz in table_Hz
		{{ hz }},
		%% endfor
	};
	%% endfor

	const uint32_t *lut(flash_latency_{{ (table|sort)[0] }});
	uint8_t lut_size(sizeof(flash_latency_{{ (table|sort)[0] }}) / sizeof(uint32_t));
	%% if table|length > 1
	// find the right table for the voltage
		%% for mV in (table|sort)[1:]|reverse
	{% if not loop.first %}else {% endif %}if ({{ mV }} <= Core_mV) {
		lut = flash_latency_{{ mV }};
		lut_size = sizeof(flash_latency_{{ mV }}) / sizeof(uint32_t);
	}
		%% endfor
	%% else
	(void) Core_mV;
	%% endif
	// find the next highest frequency in the table
	uint8_t latency(0);
	uint32_t max_freq(0);
	while (latency < lut_size)
	{
		if (Core_Hz <= (max_freq = lut[latency]))
			break;
		latency++;
	}
	return {latency, max_freq};
}

template< uint32_t Core_Hz, uint16_t Core_mV>
uint32_t
Rcc::setFlashLatency()
{
	constexpr flash_latency fl = computeFlashLatency(Core_Hz, Core_mV);
	static_assert(Core_Hz <= fl.max_frequency, "CPU Frequency is too high for this core voltage!");

%% if not target.string.startswith("stm32f100")
	uint32_t acr = FLASH->ACR & ~FLASH_ACR_LATENCY;
	// set flash latency
	acr |= fl.latency;
%% if target["family"] in ["f2", "f4", "l4", "g4"]
	// enable flash prefetch and data and instruction cache
	acr |= FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_ICEN;
%% elif target["family"] in ["g0"]
	// enable flash prefetch and instruction cache
	acr |= FLASH_ACR_PRFTEN | FLASH_ACR_ICEN;
%% elif target["family"] == "f7"
	// enable flash prefetch and flash accelerator
	acr |= FLASH_ACR_PRFTEN | FLASH_ACR_ARTEN;
%% elif target["family"] in ["l1"]
	// enable 64-bit access, must be enabled *before* prefetch and latency!
	FLASH->ACR |= FLASH_ACR_ACC64;
	// enable flash prefetch
	acr |= FLASH_ACR_PRFTEN;
%% elif target["family"] == "l0"
	// enable flash prefetch and pre-read
	acr |= FLASH_ACR_PRFTEN | FLASH_ACR_PRE_READ;
%% elif target["family"] not in ["h7", "l5"]
	// enable flash prefetch
	acr |= FLASH_ACR_PRFTBE;
%% endif
	FLASH->ACR = acr;
	__DSB(); __ISB();
%% endif

	return fl.max_frequency;
}

template< uint32_t Core_Hz >
void
Rcc::updateCoreFrequency()
{
	SystemCoreClock = Core_Hz;
	delay_fcpu_MHz = computeDelayMhz(Core_Hz);
	delay_ns_per_loop = computeDelayNsPerLoop(Core_Hz);
}

constexpr bool
rcc_check_enable(Peripheral peripheral)
{
	switch(peripheral) {
	%% for peripheral in rcc_enable | sort
		case Peripheral::{{ peripheral }}:
	%% endfor
			return true;
		default:
			return false;
	}
}

template< Peripheral peripheral >
void
Rcc::enable()
{
	static_assert(rcc_check_enable(peripheral),
		"Rcc::enable() doesn't know this peripheral!");

	__DSB();
	%% for peripheral, (st_per, bus) in rcc_enable.items() | sort
	if constexpr (peripheral == Peripheral::{{ peripheral }})
		if (not Rcc::isEnabled<peripheral>()) {
			RCC->{{bus}} |= RCC_{{bus}}_{{st_per}}EN;{% if st_per in rcc_reset %} __DSB();
			RCC->{{rcc_reset[st_per]}} |= RCC_{{rcc_reset[st_per]}}_{{st_per}}RST; __DSB();
			RCC->{{rcc_reset[st_per]}} &= ~RCC_{{rcc_reset[st_per]}}_{{st_per}}RST;{% endif %}{% if peripheral == "Eth" %} __DSB();
			RCC->{{bus}} |= RCC_{{bus}}_{{st_per}}RXEN; __DSB();
			RCC->{{bus}} |= RCC_{{bus}}_{{st_per}}TXEN;{% elif peripheral == "Usbotghs" %} __DSB();
			RCC->{{bus}} |= RCC_{{bus}}_{{st_per}}ULPIEN;{% endif %}
		}
	%% endfor
	__DSB();
}

template< Peripheral peripheral >
void
Rcc::disable()
{
	static_assert(rcc_check_enable(peripheral),
		"Rcc::disable() doesn't know this peripheral!");

	__DSB();
	%% for peripheral, (st_per, bus) in rcc_enable.items() | sort
	if constexpr (peripheral == Peripheral::{{ peripheral }}) {
		RCC->{{bus}} &= ~RCC_{{bus}}_{{st_per}}EN;{% if peripheral == "Eth" %} __DSB();
		RCC->{{bus}} &= ~RCC_{{bus}}_{{st_per}}RXEN; __DSB();
		RCC->{{bus}} &= ~RCC_{{bus}}_{{st_per}}TXEN;{% elif peripheral == "Usbotghs" %} __DSB();
		RCC->{{bus}} &= ~RCC_{{bus}}_{{st_per}}ULPIEN;{% endif %}
	}
	%% endfor
	__DSB();
}

template< Peripheral peripheral >
bool
Rcc::isEnabled()
{
	static_assert(rcc_check_enable(peripheral),
		"Rcc::isEnabled() doesn't know this peripheral!");

	%% for peripheral, (st_per, bus) in rcc_enable.items() | sort
	if constexpr (peripheral == Peripheral::{{ peripheral }})
		return RCC->{{bus}} & RCC_{{bus}}_{{st_per}}EN;
	%% endfor
}

}   // namespace modm::platform
