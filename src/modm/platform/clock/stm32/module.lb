#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2016-2018, Niklas Hauser
# Copyright (c) 2017, Fabian Greif
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

def init(module):
    module.name = "clock"
    module.parent = "platform"

def prepare(module, options):
    if not options[":target"].has_driver("rcc:stm32*"):
        return False

    module.depends(":cmsis:device", ":utils")
    if "stm32f100" in options[":target"].partname:
        module.depends(":architecture:clock")
    return True

def build(env):
    device = env[":target"]
    driver = device.get_driver("rcc")

    properties = device.properties
    properties["target"] = target = device.identifier
    properties["partname"] = device.partname
    properties["driver"] = driver
    properties["core"] = device.get_driver("core")["type"]

    if target["family"] in ["f1", "f3", "f4"]:
        properties["hsi_frequency"] = 8
        properties["lsi_frequency"] = 40
    else:
        properties["hsi_frequency"] = 16
        properties["lsi_frequency"] = 32

    # TODO: Move this data into the device files
    properties["usbprescaler"] = (
        (target["family"] == "f0" and target["name"] in ["42", "48", "70", "72", "78"]) or
        (target["family"] == "f1" and target["name"] in ["02", "03"]) or
        (target["family"] == "f3" and (target["name"] in ["02", "73"] or
            (target["name"] in ["03"] and target["size"] in ["b", "c", "d", "e"]))))
    properties["pllprediv"] = \
        (target["family"] in ["f0", "f3"] or (target["family"] == "f1" and target["name"] in ["00", "05", "07"]))
    properties["pllprediv2"] = False    # FIXME: not sure what value this should have
    properties["hsi48"] = \
        target["family"] == "f0" and target["name"] in ["42", "48", "71", "72", "78", "91", "98"]

    env.substitutions = properties
    env.outbasepath = "modm/src/modm/platform/clock"

    env.template("latency.cpp.in")
    env.template("clock.cpp.in")
    env.template("clock.hpp.in")
    env.copy("../common/common_clock.hpp", "common_clock.hpp")
