#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2016-2019, Niklas Hauser
# Copyright (c) 2017, Fabian Greif
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------


def init(module):
    module.name = ":platform:rcc"
    module.description = "Reset and Clock Control (RCC)"

def prepare(module, options):
    if not options[":target"].has_driver("rcc:stm32*"):
        return False

    module.depends(":cmsis:device", ":utils", ":platform:clock")
    # FIXME: Move Peripherals enum somewhere better
    module.depends(":platform:gpio")
    return True

def build(env):
    device = env[":target"]
    driver = device.get_driver("rcc")

    properties = {}
    properties["target"] = target = device.identifier
    properties["partname"] = device.partname
    properties["core"] = core = device.get_driver("core")["type"]

    if target["family"] in ["f1", "f3", "f4"]:
        properties["hsi_frequency"] = 8
        properties["lsi_frequency"] = 40
    elif target["family"] in ["l1"]:
        properties["hsi_frequency"] = 2.097
        properties["lsi_frequency"] = 37
    else:
        properties["hsi_frequency"] = 16
        properties["lsi_frequency"] = 32

    if core == "cortex-m0":
        loops = 4
    elif core.startswith("cortex-m7"):
        loops = 1
    else:
        loops = 3
    properties["loops"] = loops

    # TODO: Move this data into the device files
    properties["usbprescaler"] = (
        (target["family"] == "f0" and target["name"] in ["42", "48", "70", "72", "78"]) or
        (target["family"] == "f1" and target["name"] in ["02", "03"]) or
        (target["family"] == "f3" and (target["name"] in ["02", "73"] or
            (target["name"] in ["03"] and target["size"] in ["b", "c", "d", "e"]))))
    properties["pllprediv"] = \
        (target["family"] in ["f0", "f3"] or (target["family"] == "f1" and target["name"] in ["00", "05", "07"]))
    properties["pllprediv2"] = False    # FIXME: not sure what value this should have
    properties["hsi48"] = \
        target["family"] == "f0" and target["name"] in ["42", "48", "71", "72", "78", "91", "98"]
    properties["pll_p"] = ((target["family"] == "l4" and target["name"] not in ["12", "22"]) or target["family"] == "g4")

    flash_latencies = {}
    for vcore in device.get_driver("flash")["latency"]:
        flash_latencies[int(vcore["vcore-min"])] = sorted([int(f["hclk-max"]) for f in vcore["wait-state"]])

    properties["table"] = flash_latencies
    env.substitutions = properties
    env.outbasepath = "modm/src/modm/platform/clock"

    env.template("rcc.cpp.in")
    env.template("rcc.hpp.in")

    all_peripherals = set()
    all_drivers = [d for d in device._properties["driver"] if d["name"] not in ["gpio", "core"]]
    translate = lambda s: "".join(p.capitalize() for p in s.split("_"))
    for d in all_drivers:
        dname = translate(d["name"])
        if "instance" in d:
            all_peripherals.update(dname + translate(i) for i in d["instance"])
        else:
            all_peripherals.add(dname)
    all_peripherals = sorted(list(all_peripherals))

    rcc_map = env.query(":cmsis:device:rcc-map")
    rcc_enable = {}
    rcc_reset = {}

    for per, mode in rcc_map.items():
        nper = per
        # Fix CAN vs CAN1
        if "Can" in all_peripherals and per == "CAN1":
            per = "CAN"
            nper = "CAN1"
        # FDCAN
        if "Fdcan1" in all_peripherals and per == "FDCAN":
            per = "FDCAN1"
            nper = "FDCAN"
        # Fix ADC vs ADC1
        if "Adc1" in all_peripherals and per == "ADC":
            per = "ADC1"
            nper = "ADC"
        # Fix DSIHOST vs DSI
        if "Dsihost" in all_peripherals and per == "DSI":
            per = "Dsihost"
            nper = "DSI"
        if per.capitalize() not in all_peripherals:
            continue
        if "EN" in mode:
            rcc_enable[per.capitalize()] = (nper, mode["EN"])
        if "RST" in mode:
            rcc_reset[nper] = mode["RST"]

    env.substitutions.update({
        "rcc_enable": rcc_enable,
        "rcc_reset": rcc_reset,
    })
    env.template("rcc_impl.hpp.in")
