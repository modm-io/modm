#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2016-2019, Niklas Hauser
# Copyright (c) 2017, Fabian Greif
# Copyright (c) 2021, Christopher Durand
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------


def init(module):
    module.name = ":platform:rcc"
    module.description = "Reset and Clock Control (RCC)"

def prepare(module, options):
    if not options[":target"].has_driver("rcc:stm32*"):
        return False

    module.depends(":cmsis:device", ":utils", ":platform:clock", ":platform:core")
    return True

def build(env):
    device = env[":target"]
    driver = device.get_driver("rcc")

    properties = {}
    properties["target"] = target = device.identifier
    properties["partname"] = device.partname
    properties["core"] = core = device.get_driver("core")["type"]

    if target["family"] in ["f1", "f3", "f4"]:
        properties["hsi_frequency"] = 8
        properties["lsi_frequency"] = 40
    elif target["family"] in ["l1"]:
        properties["hsi_frequency"] = 2.097
        properties["lsi_frequency"] = 37
    else:
        properties["hsi_frequency"] = 16
        properties["lsi_frequency"] = 32

    if core == "cortex-m0":
        loops = 4
    elif core.startswith("cortex-m7"):
        loops = 1
    else:
        loops = 3
    properties["loops"] = loops

    # TODO: Move this data into the device files
    properties["usbprescaler"] = device.has_driver("usb") and target.family in ["f0", "f1", "f3"]
    properties["pllprediv"] = \
        (target["family"] in ["f0", "f3"] or (target["family"] == "f1" and target["name"] in ["00", "05", "07"]))
    properties["pllprediv2"] = False    # FIXME: not sure what value this should have
    properties["pll_hse_prediv2"] = target["family"] == "f1" and target["name"] in ["01", "02", "03"]
    properties["hsi48"] = \
        target["family"] == "f0" and target["name"] in ["42", "48", "71", "72", "78", "91", "98"]
    properties["pll_p"] = ((target["family"] == "l4" and target["name"] not in ["12", "22"]) or target["family"] == "g4")
    properties["overdrive"] = (target["family"] == "f7") or \
        ((target["family"] == "f4") and target["name"] in ["27", "29", "37", "39", "46", "69", "79"])
    properties["pllsai_p_usb"] = (target["family"] == "f7") or \
        ((target["family"] == "f4") and target["name"] in ["46", "69", "79"])

    properties["table"] = device.flash.wait_states
    env.substitutions = properties
    env.outbasepath = "modm/src/modm/platform/clock"

    env.template("rcc.cpp.in")
    env.template("rcc.hpp.in")

    rcc_map = env.query(":cmsis:device:rcc-map")
    rcc_enable = {}
    rcc_reset = {}
    all_peripherals = uniquify(map(env.filter("modm.fmt.driver"), env[":target"].peripherals))
    all_peripherals_lut = {p.lower():p for p in all_peripherals}

    for per, mode in rcc_map.items():
        nper = per
        # Fix CAN vs CAN1
        if "Can" in all_peripherals and per == "CAN1":
            per = "CAN"
            nper = "CAN1"
        # Fix ADC vs ADC1
        if "Adc1" in all_peripherals and per == "ADC":
            per = "ADC1"
            nper = "ADC"
        # Fix DSIHOST vs DSI
        if "Dsihost" in all_peripherals and per == "DSI":
            per = "Dsihost"
            nper = "DSI"
        if "Eth" in all_peripherals and per == "ETHMAC":
            per = "Eth"
        # Fix USBOTG OTG
        if "UsbOtgFs" in all_peripherals and per.startswith("OTG"):
            if per == "OTGH": per = "OTGHS";
            per = "USB"+per
            # print(per, mode)
        if per.lower() not in all_peripherals_lut:
            continue
        if "EN" in mode:
            rcc_enable[all_peripherals_lut[per.lower()]] = (nper, mode["EN"])
        if "RST" in mode:
            rcc_reset[nper] = mode["RST"]

    env.substitutions.update({
        "rcc_enable": rcc_enable,
        "rcc_reset": rcc_reset,
    })
    env.template("rcc_impl.hpp.in")
