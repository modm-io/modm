#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2016-2018, 2020, Niklas Hauser
# Copyright (c) 2017, Fabian Greif
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

import os

def init(module):
    module.name = ":platform:clock"
    module.description = FileReader("module.md")

def prepare(module, options):
    if not options[":target"].has_driver("core:cortex-m*"):
        return False

    module.depends(
        ":architecture:clock",
        ":architecture:atomic",
        ":math:algorithm",
        ":cmsis:device")

    return True

def build(env):
    target = env[":target"].identifier
    core = env[":target"].get_driver("core")["type"]

    # Interrupt Frequency must not overflow the 2^24 SysTick->VAL!
    freq = 1000 if "m0" in core else 4
    # STM32H7 goes up to 550MHz, so make the Frequency higher
    if target.family == "h7" and target.get("core", "cm7") == "cm7":
        freq = 100

    # SysTick clock prescaler is dynamically chosen as /1 or /8
    div = 8
    # SAMD: Prescaler not implemented
    if target.platform == "sam" and target.family in ["d"]:
        div = 1
    # H742/43: Prescaler not implemented in revY
    elif target.family == "h7" and target.name in ["42", "43", "50", "53"] and target.revision == "y":
        div = 1
    # RP2040 external reference clock need additional configuration
    elif target.platform == "rp":
        div = 1

    env.substitutions = {
        "systick_frequency": env.get(":freertos:frequency", freq),
        "has_freertos": env.has_module(":freertos"),
        "ref_clk": div
    }
    env.outbasepath = "modm/src/modm/platform/clock"
    env.template("systick_timer.hpp.in")
    env.template("systick_timer.cpp.in")
