/*
 * Copyright (c) 2013, Kevin LÃ¤ufer
 * Copyright (c) 2014-2017, Niklas Hauser
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#ifndef MODM_CORTEX_SYSTICK_TIMER_HPP
#define MODM_CORTEX_SYSTICK_TIMER_HPP

#include <modm/architecture/interface/peripheral.hpp>
#include <modm/architecture/interface/clock.hpp>
#include <modm/math/algorithm/prescaler.hpp>

namespace modm::platform
{

/// @ingroup modm_platform_clock
class SysTickTimer
{
public:
	/**
	 * Initializes the SysTick to provide a timer to `modm::Clock` and
	 * `modm::PreciseClock`.
	 *
	 * @tparam	SystemClock
	 * 		the currently active system clock
	 * @tparam	tolerance
	 * 		the allowed tolerance for the resulting clock rate
	 */
	template< class SystemClock, percent_t tolerance=pct(0) >
	static void
	initialize()
	{
		static_assert(SystemClock::Frequency < (1ull << 24)*{{ref_clk}}*{{systick_frequency}},
		              "HLCK is too fast for the SysTick to run at {{systick_frequency}}Hz!");
%% if ref_clk > 1
		if constexpr (SystemClock::Frequency < {{ref_clk}}'000'000)
%% endif
		{
			constexpr auto result = Prescaler::from_range(
					SystemClock::Frequency, {{ systick_frequency }}, 1, (1ul << 24)-1);
			PeripheralDriver::assertBaudrateInTolerance< result.frequency, {{ systick_frequency }}, tolerance >();

			us_per_Ncycles = ((1ull << Ncycles) * 1'000'000ull) / SystemClock::Frequency;
%% if systick_frequency != 1000
			ms_per_Ncycles = ((1ull << Ncycles) * 1'000ull) / SystemClock::Frequency;
%% endif
			enable(result.index, false);
		}
%% if ref_clk > 1
		else
		{
			constexpr auto result = Prescaler::from_range(
					SystemClock::Frequency/{{ref_clk}}, {{ systick_frequency }}, 1, (1ul << 24)-1);
			PeripheralDriver::assertBaudrateInTolerance< result.frequency, {{ systick_frequency }}, tolerance >();

			us_per_Ncycles = ((1ull << Ncycles) * {{ref_clk}}'000'000ull) / SystemClock::Frequency;
%% if systick_frequency != 1000
			ms_per_Ncycles = ((1ull << Ncycles) * {{ref_clk}}'000ull) / SystemClock::Frequency;
%% endif
			enable(result.index, true);
		}
%% endif
	}

	/**
	 * Disables SysTick Timer.
	 *
	 * @warning	If the SysTick Timer is disabled, `modm::Clock` and
	 *			`modm::PreciseClock` will stop incrementing.
	 */
	static void
	disable();

private:
	static void
	enable(uint32_t reload, bool prescaler8);

%% if systick_frequency != 1000
	// FCPU < 8MHz
	// 536e6/4 < 27-bit, 8e6/4 < 21-bit
	// 2^32*1e6/536e6 < 23-bit, 2^32*1e6/8e6 = 29-bit
	// FCPU >= 8MHz
	// 536e6/8/4 < 24-bit, 8e6/8/4 < 18-bit
	// 2^32*8e6/536e6 < 26-bit, 2^32*8e6/8e6 = 32-bit
	static constexpr uint8_t Ncycles{32};
	static inline uint32_t ms_per_Ncycles{0};
%% else
	// FCPU < 8MHz
	// 536e6/1000 < 20-bit, 8e6/1000 < 13-bit
	// 2^20*1e6/536e6 < 11-bit, 2^20*1e6/8e6 = 17-bit
	// FCPU >= 8MHz
	// 536e6/8/1000 < 17-bit, 8e6/8/1000 < 10-bit
	// 2^20*8e6/536e6 < 14-bit, 2^20*8e6/8e6 = 20-bit
	static constexpr uint8_t Ncycles{20};
%% endif
	static inline uint32_t us_per_Ncycles{0};
	friend class modm::chrono::milli_clock;
	friend class modm::chrono::micro_clock;
};

}

#endif	//  MODM_STM32_CORTEX_TIMER_HPP
