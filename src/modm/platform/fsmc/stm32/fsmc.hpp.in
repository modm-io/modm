/*
 * Copyright (c) 2009-2010, Martin Rosekeit
 * Copyright (c) 2009-2013, 2016-2017, Fabian Greif
 * Copyright (c) 2012, 2014-2017, Niklas Hauser
 * Copyright (c) 2013, Daniel Krebs
 * Copyright (c) 2013, Hans Schily
 * Copyright (c) 2013-2014, Kevin LÃ¤ufer
 * Copyright (c) 2014, 2016, Sascha Schade
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#ifndef MODM_STM32_FSMC_HPP
#define MODM_STM32_FSMC_HPP

#include <stdint.h>
#include "../device.hpp"
#include <modm/platform/clock/rcc.hpp>

namespace modm
{
	namespace platform
	{
		namespace fsmc
		{
			/**
			 * Configure NOR-Flash or (P)SRAM
			 *
			 * NOR non-multiplexed
			 * - CLK
			 * - A[25:0]
			 * - D[15:0]
			 * - NE[x]
			 * - NOE
			 * - NWE
			 * - NL(=NADV)
			 * - NWAIT
			 *
			 * NOR multiplexed
			 * - A[25:16]
			 * - AD[15:0]
			 *
			 * (P)SRAM
			 * - NBL[1]		- Upper byte enable (NUB)
			 * - NBL[0]		- Lower byte enable (NLB)
			 *
			 * Options:
			 * - multiplexed, non-multiplexed
			 * - asynchronous, synchronous
			 *
			 * Mode 1 (SRAM/CRAM)
			 * - NOE directly low
			 * - NWE after address setup
			 * - Timings: address setup, data phase
			 *
			 * Mode A (CRAM)
			 * - NOE, NWE low after address setup
			 * - Timings: address setup, data phase
			 *
			 * Mode 2/B (NOR Flash)
			 * - NADV low during address setup
			 * - NOE directly low
			 * - Mode 2: NWE low after address setup
			 * - Mode B: NWE directly low
			 *
			 * Mode C (NOR Flash)
			 * - NADV low during address setup
			 * - NOE, NWE low after address setup
			 *
			 * Mode D
			 * - Mode C with additional address hold step (NADV, NOE, NWE high)
			 * - Timings: address setup, address hold, data phase
			 *
			 * Mode muxed
			 * - Mode D with lower address bits on data lanes during
			 *   address setup step
			 *
			 * Async wait: only data phase stage is prolonged, address setup
			 * and address hold are not affected.
			 *
			 * Memory Type (MTYP):
			 * - 00 SRAM/ROM 					(asynchronous, non-multiplexed)
			 * - 01 PSRAM/Cellular RAM: CRAM	((a)synchronous read/write, (non-)multiplexed)
			 * - 10 NOR Flash/One NAND Flash	((a)synchronous read, (non-)multiplexed)
			 *
			 * Multiplexed mode only valid for NOR and PSRAM
			 *
			 * Synchronous => burst mode?
			 * NOR Flash and burst write?
			 *
			 * @ingroup modm_platform_fsmc
			 */
			class NorSram
			{
			public:
				/**
				 * Corresponds to NE1..4.
				 */
				enum Region
				{
					CHIP_SELECT_1 = 0,
					CHIP_SELECT_2 = 1,
					CHIP_SELECT_3 = 2,
					CHIP_SELECT_4 = 3,
				};

				enum WaitPolarity
				{
					WAIT_HIGH_ACTIVE,
					WAIT_LOW_ACTIVE,
				};

				enum BusType
				{
					NO_MULTIPLEX_8BIT = 0,
					NO_MULTIPLEX_16BIT = {{ FMC }}_{{ BCRx }}_MWID_0,
					ADDRESS_DATA_MULIPLEX_8BIT = {{ FMC }}_{{ BCRx }}_MUXEN,
					ADDRESS_DATA_MULIPLEX_16BIT = {{ FMC }}_{{ BCRx }}_MUXEN | {{ FMC }}_{{ BCRx }}_MWID_0,
				};

				enum MemoryType
				{
					SRAM_ROM = 0,
					PSRAM = {{ FMC }}_{{ BCRx }}_MTYP_0, ///< PSRAM (CRAM)
					NOR = {{ FMC }}_{{ BCRx }}_MTYP_1, ///< NOR Flash/OneNAND Flash
				};

				enum AccessMode
				{
					MODE_A = 0,	///< access mode A
					MODE_B = {{ FMC }}_{{ BTRx }}_ACCMOD_0, ///< access mode B
					MODE_C = {{ FMC }}_{{ BTRx }}_ACCMOD_1, ///< access mode C
					MODE_D = {{ FMC }}_{{ BTRx }}_ACCMOD_0 | {{ FMC }}_{{ BTRx }}_ACCMOD_1 ///< access mode D
				};

				enum class ExtendedMode : uint32_t
				{
					Disable = 0,
					Enable  = {{ FMC }}_{{ BCRx }}_EXTMOD,
				};

				/**
				 * Timing for asynchronous access
				 */
				struct AsynchronousTiming
				{
					uint8_t readAddressSetup;	///< 0..15

					/// (only for muxed I/O) 1..15
					uint8_t readAddressHold;
					uint8_t readDataPhase;		///< 1..256

					uint8_t writeAddressSetup;	///< 0..15

					/// (only for muxed I/O) 1..15
					uint8_t writeAddressHold;
					uint8_t writeDataPhase;		///< 1..256

					/**
					 * Bus turn around time
					 *
					 * Time from NEx high to NEx low => time between two bus
					 * accesses (0..15 HCLK cycles).
					 */
					uint8_t busTurnAround;
				};

				/**
				 * Timing for synchronous access
				 */
				struct SynchronousTiming
				{
					uint8_t busTurnAround;		///< 0..15

					/** Number of HCLK cycles for one CLK cycle, [1..16] */
					uint8_t clockDivideRatio;

					uint8_t dataLatency;		///< 2..17 CLK cycles
				};

			public:
				static void
				resetRegion(Region region);

				static inline void
				enableRegion(Region region, bool enable = true)
				{
					if (enable) {
						{{ FMC }}_Bank1->BTCR[region] |= {{ FMC }}_{{ BCRx }}_MBKEN;
					}
					else {
						{{ FMC }}_Bank1->BTCR[region] &= ~{{ FMC }}_{{ BCRx }}_MBKEN;
					}

				}

				/**
				 * Configure a region of Bank 1 for synchronous access.
				 *
				 * The region is disabled afterwards and has to be enabled
				 * via enableRegion().
				 */
				static void
				configureSynchronousRegion(Region region,
						BusType multiplex,
						MemoryType memoryType,
						SynchronousTiming timing);

				static void
				configureAsynchronousRegion(Region region,
						BusType multiplex,
						MemoryType memoryType,
						AccessMode accessMode,
						AsynchronousTiming timing,
						 ExtendedMode extended = ExtendedMode::Enable);

				static inline void
				enableAsynchronousWait(Region region,
						WaitPolarity polarity = WAIT_LOW_ACTIVE)
				{
					uint32_t btcr = {{ FMC }}_{{ BCRx }}_ASYNCWAIT;
					if (polarity != WAIT_LOW_ACTIVE)
					{
						btcr |= {{ FMC }}_{{ BCRx }}_WAITPOL;
					}
					{{ FMC }}_Bank1->BTCR[region] = btcr;
				}

				/**
				 * Get mapped memory address of a region.
				 *
				 * Each region is 64 MB in size.
				 */
				template<typename T>
				static constexpr inline T*
				getRegionPointer(Region region)
				{
					return 	(region == CHIP_SELECT_1)? (T *)(0x60000000) :
							(region == CHIP_SELECT_2)? (T *)(0x64000000) :
							(region == CHIP_SELECT_3)? (T *)(0x68000000) :
							(region == CHIP_SELECT_4)? (T *)(0x6C000000) :
															(0x00000000);
				}
			};
		}

		/**
		 * Flexible static memory controller.
		 *
		 * Memory Map:
		 * 0x6000 0000 - 0x6fff ffff : Bank 1 4x NOR or [P]SRAM devices
		 * 0x7000 0000 - 0x7fff ffff : Bank 2 NAND Flash device
		 * 0x8000 0000 - 0x8fff ffff : Bank 3 NAND Flash device
		 * 0x9000 0000 - 0x9fff ffff : Bank 4 PC Card device
		 *   each bank is 4x64 = 256 MB wide
		 *
		 * NOR/PSRAM/SRAM Flash signals:
		 * CLK       - Clock (for synchronous burst)
		 * A[25:0]   - Address Bus
		 * AD[15:0]  - 16-bit multiplexed, bidirectional address/data bus or data bus
		 * NE[x]     - Chip select, x=1..4
		 * NOE       - Output enable
		 * NWE       - Write enable
		 * NL(=NADV) - Latch enable (this signal is called address valid,
		 *             NADV, by some NOR Flash devices)
		 * NWAIT     - NOR Flash wait input signal to the FSMC
		 * NBL1      - Upper byte enable (memory signal name: NUB)
		 * NBL0      - Lowed byte enable (memory signal name: NLB)
		 *
		 *
		 * \author	Fabian Greif
		 * \ingroup modm_platform_fsmc
		 */
		class Fsmc
		{
		public:
			/**
			 * Reset all NAND/NOR/SRAM/... settings
			 */
			static void
			initialize();

		private:
			static inline void
			enable()
			{
				Rcc::enable<Peripheral::{{ FMC | capitalize }}>();
			}

			static inline void
			disable()
			{
				Rcc::disable<Peripheral::{{ FMC | capitalize }}>();
			}
		};
	}
}

#endif
