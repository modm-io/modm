#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2016-2017, Niklas Hauser
# Copyright (c) 2017, Fabian Greif
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

class Instance(Module):
    def __init__(self, instance):
        self.instance = instance

    def init(self, module):
        module.name = str(self.instance)
        module.description = "DMA {} instance".format(self.instance)

    def prepare(self, module, options):
        module.depends(":platform:dma")
        return True

    def build(self, env):
        device = env[":target"]

        properties = device.properties
        properties["target"] = device.identifier
        properties["partname"] = device.partname
        properties["id"] = self.instance

        env.substitutions = properties
        env.outbasepath = "src/modm/platform/dma"

        env.template("dma.hpp.in", "dma_{}.hpp".format(self.instance))
        env.template("dma_impl.hpp.in", "dma_{}_impl.hpp".format(self.instance))

def init(module):
    module.name = "dma"
    module.parent = "platform"

def prepare(module, options):
    device = options[":target"]
    if not device.has_driver("dma:stm32*"):
        return False

    # FIXME the driver is referenced in STM32F0 device files, but appears only to support STM32F3/4
    if device.identifier["family"] not in ["f3", "f4"]:
        return False

    module.depends(":cmsis:device")

    for instance in device.get_driver("dma")["instance"]:
        module.add_submodule(Instance(int(instance)))

    return True

def build(env):
    device = env[":target"]

    properties = device.properties
    properties["target"] = device.identifier
    properties["partname"] = device.partname

    env.substitutions = properties
    env.outbasepath = "src/modm/platform/dma"

    env.template("dma_base.hpp.in")
