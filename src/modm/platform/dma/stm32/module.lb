#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2016-2018, Niklas Hauser
# Copyright (c) 2017, Fabian Greif
# Copyright (c) 2020, Mike Wolfram
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

def init(module):
    module.name = ":platform:dma"
    module.description = "Direct Memory Access (DMA)"

def prepare(module, options):
    device = options[":target"]
    if not device.has_driver("dma:stm32*"):
        return False

    # FIXME the driver is for L4 only
    if device.identifier["family"] not in ["l4"]:
        return False
    if device.identifier["name"] not in ["12", "22", "31", "32", "33", "42", "43", "51", "52", "62", "75", "76", "86", "96", "A6"]:
        return False

    module.depends(":cmsis:device", ":platform:rcc")

    return True

def build(env):
    device = env[":target"]

    properties = {}
    properties["target"] = device.identifier
    dma = device.get_driver("dma")
    properties["dma"] = dma

    # Get the peripheral supported by DMA from device info and create a list of signals
    # (also determines the maximum number of channels per controller)
    signal_names = {}
    controller = []
    for channels in dma["channels"]:
        max_channels = 0
        for channel in channels["channel"]:
            max_channels = channel["position"]
            for request in channel["request"]:
                for signal in request["signal"]:
                    if "name" in signal:
                        signal_name = signal["name"].capitalize()
                        signal_names[signal_name] = 1
        controller.append({"instance": int(channels["instance"]), "channels": int(max_channels)})

    signal_names = sorted(list(set(signal_names)))
    properties["dmaSignals"] = signal_names
    properties["dmaController"] = controller

    env.substitutions = properties
    env.outbasepath = "modm/src/modm/platform/dma"
    env.template("dma_base.hpp.in")
    env.template("dma_hal.hpp.in")
    env.template("dma_hal_impl.hpp.in")
    env.template("dma.hpp.in")
    env.template("dma.cpp.in")

