#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2016-2018, Niklas Hauser
# Copyright (c) 2017, Fabian Greif
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

import collections

def init(module):
    module.name = ":platform:dma"
    module.description = "Direct Memory Access (DMA)"

def prepare(module, options):
    device = options[":target"]
    if not device.has_driver("dma:stm32*"):
        return False

    # FIXME the driver is referenced in STM32F0 device files, but appears only to support STM32F3/4
    if device.identifier["family"] not in ["f3", "f4"]:
        return False

    module.depends(":cmsis:device", ":platform:rcc")

    return True

def build(env):
    device = env[":target"]
    driver = device.get_driver("dma")

    properties = device.properties
    properties["target"] = device.identifier

    properties["ids"] = driver["instance"]
    properties["slots"] = None
    properties["type"] = driver["type"]
    properties["id"] = None

    features = {
        "double_buffer": False,
        "circular_mode": False,
        "request_mux": True,
        "burst": False,
    }
    properties["feature"] = features

    def findInstance(stream, id):
        for s in stream:
            if s["instance"] == str(id):
                return s
        return None

    mux = {}
    if driver["type"] == "stm32-stream-channel":
        for dma_id in properties["ids"]:
            streamlist = findInstance(driver["streams"], dma_id)["stream"]
            for stream in streamlist:
                for channel in stream["channel"]:
                    for signal in channel["signal"]:
                        name = signal["driver"].capitalize() + (signal["instance"] if "instance" in signal else "") + signal["name"].capitalize()
                        if name not in mux:
                            mux[name] = []
                        mux[name].append(dict(instance=int(dma_id), slot=int(stream["position"]), request=int(channel["position"])))
    elif driver["type"] == "stm32-channel-request":
        for dma_id in properties["ids"]:
            channellist = findInstance(driver["channels"], dma_id)["channel"]
            for channel in channellist:
                for request in channel["request"]:
                    for signal in request["signal"]:
                        name = signal["driver"].capitalize() + (signal["instance"] if "instance" in signal else "") + signal["name"].capitalize()
                        if name not in mux:
                            mux[name] = []
                        mux[name].append(dict(instance=int(dma_id), slot=int(channel["position"]), request=int(request["position"])))
    elif driver["type"] == "stm32-channel":
        for dma_id in properties["ids"]:
            channellist = driver["channels"][0]["channel"]
            for channel in channellist:
                for signal in channel["signal"]:
                    name = signal["driver"].capitalize() + (signal["instance"] if "instance" in signal else "") + signal["name"].capitalize()
                    if name not in mux:
                        mux[name] = []
                    mux[name].append(dict(instance=int(dma_id), slot=int(channel["position"])))
    else:
        print("DMA driver type: " + driver["type"])
        raise NotImplementedError

    mux = collections.OrderedDict(sorted(mux.items()))
    properties["peripherals"] = list(mux.keys())

    if driver["type"] == "stm32-stream-channel":
        properties["reg_prefix"] = "DMA_SxCR"
    elif driver["type"] == "stm32-channel-request":
        properties["reg_prefix"] = "DMA_CCR"
    elif driver["type"] == "stm32-channel":
        properties["reg_prefix"] = "DMA_CCR"
    else:
        print("DMA driver type: " + driver["type"])
        raise NotImplementedError

    env.substitutions = properties
    env.outbasepath = "modm/src/modm/platform/dma"

    env.template("dmahal.hpp.in")
    env.template("dmahal_slotbase.hpp.in")
    for dma_id in properties["ids"]:
        slots = []
        for _, l in mux.items():
            for i in l:
                if i["instance"] == int(dma_id):
                    slots.append(i["slot"])
        slots = sorted(set(slots))

        peripherals_available = {}
        for slot_id in slots:
            _peripherals_available = {}
            for p_name, p_data in mux.items():
                available = False
                for r in p_data:
                    if r["instance"] == int(dma_id) and r["slot"] == slot_id:
                        available = True
                if available:
                    if not driver["type"] == "stm32-channel":
                        _peripherals_available[p_name] = r["request"]
                    else:
                        _peripherals_available[p_name] = True
            peripherals_available[slot_id] = _peripherals_available

        properties["id"] = int(dma_id)
        properties["slots"] = slots
        properties["peripherals_available"] = peripherals_available

        env.template("dmahal_id.hpp.in", "dmahal_{}.hpp".format(dma_id))
        env.template("dmahal_id.cpp.in", "dmahal_{}.cpp".format(dma_id))
