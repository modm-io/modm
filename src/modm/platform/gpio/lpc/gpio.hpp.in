/*
 * Copyright (c) 2013-2014, Kevin LÃ¤ufer
 * Copyright (c) 2014-2017, Niklas Hauser
 * Copyright (c) 2017, Fabian Greif
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#ifndef MODM_LPC_GPIO_HPP
#define MODM_LPC_GPIO_HPP

#include "../device.hpp"

// TODO: Move to common file
#define SYSAHBCLKCTRL_GPIO		(1<<6)
#define IOCON_ADMODE_DIGITAL	(1<<7)

#include <modm/architecture/interface/gpio.hpp>

namespace modm
{

namespace platform
{

struct Gpio
{
	/// @ingroup	lpc11xx
	enum class
	InputType
	{
		Floating = (0 << 3),
		PullDown = (1 << 3),
		PullUp   = (2 << 3),
		Repeater = (3 << 3),
	};

	/// @ingroup	lpc11xx
	enum class
	OutputType
	{
		PushPull  = (0 << 10),
		OpenDrain = (1 << 10),
	};

	/// @ingroup	lpc11xx
	enum class
	I2cMode
	{
		StandardMode = (0<<8),
		StandardIO   = (1<<8),
		FastMode     = (2<<8),
	};
};


/**
 * Gpio OpenDrain template, which remaps the behavior of the Gpio pin to
 * simulate an open-drain Output (with internal pullups if needed).
 * You must use this class for `SoftwareI2cMaster`!
 *
 * @see BitBangI2cMaster
 * @ingroup	avr
 * @{
 */
template< class IO >
class GpioOpenDrain : Gpio
{
public:
	/// calls set
	static void set() {
		IO::set();
	}
	/// calls reset
	static void reset() {
		IO::reset();
	}
	static void set(bool status) {
		if (status) { set(); }
		else { reset(); }
	}
	static bool read() {
		bool lastOutput = IO::read();
		IO::setInput();
		bool read = IO::read();
		IO::setOutput(lastOutput);
		return read;
	}
};
/// @}

/**
 * Gpio Classes created from the XML Device File Gpio Description
 */
%% for gpio in driver.gpio
	%% set functions = gpio.func.split(',')
	%% set bits      = gpio.bits.split(',')
	%% set pin  = gpio.id
	%% if "define" in gpio
		%% set conf_reg  = "LPC_IOCON->" ~ gpio.define
	%% elif functions[0]|lower == 'reserved'
		%% set conf_reg  = "LPC_IOCON->R_PIO" ~ gpio.port ~ "_" ~ pin
	%% else
		%% set conf_reg  = "LPC_IOCON->PIO" ~ gpio.port ~ "_" ~ pin
	%% endif
	%% set gpio_reg  = "LPC_GPIO" ~ gpio.port

	%% for type in ["Output", "Input", ""]
		%% set name = "Gpio" ~ type ~ gpio.port ~ "_" ~ gpio.id

/** \brief		{{gpio.port|upper}}{{gpio.id}} {{type}}
 *  \ingroup	lpc11
 */
class {{name}} : Gpio
{
// TODO: Add connect method in order to set function
public:
	enum class
	Function
	{
		%% for f in functions
		{{ f }} = ({{ loop.index - 1 }}<<0),
		%% endfor
	};

	/// change the function of the pin
	static void
	selectFunction(Function f){
		uint32_t temp;
		temp = {{ conf_reg }} & ~(7<<0);	// FUNC REG is 3 bits wide
		temp |= static_cast<uint32_t>(f);
		{{ conf_reg }} = temp;
	}

public:
		%% if "i2c_mode" in bits
	static void
	configure(I2cMode mode) {
		uint32_t temp;
		temp = {{ conf_reg }} & ~(3<<8);
		temp |= static_cast<uint32_t>(mode);
		{{ conf_reg }} = temp;
	}
		%% endif

		%% if type == "" or type == "Output"

			%% if "od" in bits
	static void
	configure(OutputType type) {
		if(type == OutputType::PushPull) {
			{{ conf_reg }} &= ~static_cast<uint32_t>(OutputType::OpenDrain);
		} else {
			{{ conf_reg }} |=  static_cast<uint32_t>(OutputType::OpenDrain);
		}
	}
			%% endif

	static void
	setOutput() {
			%% if "admode" in bits
		{{ conf_reg }} |= IOCON_ADMODE_DIGITAL;	// configure as digital pin
			%% endif
		selectFunction(Function::Gpio);
		{{ gpio_reg }}->DIR |= (1 << {{ pin}});
	}

	static void
	setOutput(bool status) {
		setOutput();
		set(status);
	}

			%% if "od" in bits
	static void
	setOutput(OutputType type) {
		configure(type);
		setOutput();
	}
			%% endif

			%% if "i2c_mode" in bits
	static void
	setOutput(I2cMode type) {
		configure(type);
		setOutput();
	}
			%% endif

	static void
	set() {
		{{ gpio_reg }}->MASKED_ACCESS[1 << {{ pin }}] = (1 << {{pin}});
	}

	static void
	set(bool status) {
		if (status) { set(); }
		else { reset(); }
	}

	static void
	reset() {
		{{ gpio_reg }}->MASKED_ACCESS[1 << {{ pin }}] = 0;
	}

	static void
	toggle() {
		if (({{ gpio_reg }}->MASKED_ACCESS[1 << {{ pin }}]) >> {{ pin }})
		{ reset(); } else { set(); }
	}
		%% endif
		%% if type == "" or type == "Input"

			%% if "mode" in bits
	static void
	configure(InputType type) {
		uint32_t temp;
		temp = {{ conf_reg }} & ~static_cast<uint32_t>(InputType::Repeater);
		temp |= static_cast<uint32_t>(type);
		{{ conf_reg }} = temp;
	}
			%% endif


	static void
	setInput() {
			%% if "admode" in bits
		{{ conf_reg }} |= IOCON_ADMODE_DIGITAL;	// configure as digital pin
			%% endif
		selectFunction(Function::Gpio);
		{{ gpio_reg }}->DIR &= ~(1 << {{ pin}});
	}

	static bool
	read() {
		return ({{ gpio_reg }}->MASKED_ACCESS[1 << {{ pin }}]) >> {{ pin }};
	}

			%% if "mode" in bits
	static void
	setInput(InputType type) {
		configure(type);
		setInput();
	}
			%% endif

			%% if "i2c_mode" in bits
	static void
	setInput(I2cMode type) {
		configure(type);
		setInput();
	}
			%% endif

		%% endif
};
		%% endfor
%% endfor

}	// namespace platform

}	// namespace modm

#endif // MODM_LPC_GPIO_HPP
