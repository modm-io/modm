/*
 * Copyright (c) 2017-2018, Niklas Hauser
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#ifndef MODM_STM32_GPIO_PIN_UNUSED_HPP
#define MODM_STM32_GPIO_PIN_UNUSED_HPP

#include "base.hpp"
#include <modm/architecture/interface/gpio.hpp>

namespace modm
{

namespace platform
{

/**
 * Dummy implementation of an I/O pin.
 *
 * This class can be used when a pin is not required. All functions
 * are dummy functions which do nothing. `read()` will always
 * return `false`.
 *
 * For example when creating a software SPI with the modm::SoftwareSimpleSpi
 * class and the return channel (MISO - Master In Slave Out) is not needed,
 * a good way is to use this class as a parameter when defining the
 * SPI class.
 *
 * Example:
 * @code
 * #include <modm/architecture/platform.hpp>
 *
 * namespace pin
 * {
 *     typedef GpioOutputD7 Clk;
 *     typedef GpioOutputD5 Mosi;
 * }
 *
 * modm::SoftwareSpiMaster< pin::Clk, pin::Mosi, GpioUnused > Spi;
 *
 * ...
 * Spi::write(0xaa);
 * @endcode
 *
 * @author	Fabian Greif
 * @author	Niklas Hauser
 * @ingroup	modm_platform_gpio
 */
class GpioUnused : public Gpio
{
public:
	using Direction = ::modm::Gpio::Direction;
	using Config = ::modm::Gpio::Config;
	using Config_t = ::modm::Gpio::Config_t;

	using Output = GpioUnused;
	using Input = GpioUnused;
	using IO = GpioUnused;
	using Type = GpioUnused;

	static constexpr Direction direction = Direction::InOut;
	static constexpr bool isInverted = false;
	static constexpr Port port = Port(-1);
	static constexpr uint8_t pin = uint8_t(-1);
	static constexpr uint16_t mask = 0;

public:
	/// @cond
	static inline void setAlternateFunction(uint8_t) {}
	static inline void setAnalogInput() {}
	static inline void configure(Config_t) {}
	/// @endcond

public:
	// GpioOutput
	// start documentation inherited
	static inline void setOutput() {}
	static inline void setOutput(bool) {}
	static inline void set() {}
	static inline void set(bool) {}
	static inline void reset() {}
	static inline void toggle() {}
	static inline bool isSet() { return false; }
	// stop documentation inherited
	static inline void configure(OutputSpeed) {}
	static inline void configure(OutputType, OutputSpeed = OutputSpeed::MHz50) {}
	static inline void setOutput(OutputType, OutputSpeed = OutputSpeed::MHz50) {}

	// GpioInput
	// start documentation inherited
	static inline void setInput() {}
	static inline bool read() { return false; }
	// end documentation inherited
	static inline void configure(InputType) {}
	static inline void setInput(InputType) {}
	// External Interrupts
	static inline void enableExternalInterrupt() {}
	static inline void disableExternalInterrupt() {}
	static inline void enableExternalInterruptVector(const uint32_t) {}
	static inline void disableExternalInterruptVector() {}
	static inline void setInputTrigger(const InputTrigger) {}
	static inline bool getExternalInterruptFlag() { return false; }
	/// Reset the interrupt flag in the interrupt routine.
	static inline void acknowledgeExternalInterruptFlag() {}

	// GpioIO
	// start documentation inherited
	static inline Direction getDirection() { return Direction::Special; }
	// end documentation inherited
	static inline void lock() {}
	static inline void disconnect() {}

public:
	/// @cond
%% for name in all_signals
	template< Peripheral _ >
	struct {{ name }}
	{
		using Gpio = GpioUnused;
		static constexpr Gpio::Signal Signal = Gpio::Signal::{{ name }};
		static inline void connect() {}
	};
%% endfor
	/// @endcond
};

} // namespace platform

} // namespace modm

#endif // MODM_STM32_GPIO_PIN_UNUSED_HPP
