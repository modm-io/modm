/*
 * Copyright (c) 2018, Niklas Hauser
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#ifndef MODM_STM32_GPIO_SET_HPP
#define MODM_STM32_GPIO_SET_HPP

#include "../device.hpp"
#include "base.hpp"

namespace modm
{

namespace platform
{

/// @ingroup modm_platform_gpio
template< class... Gpios >
class GpioSet : public Gpio
{
protected:
	static constexpr uint16_t inverteds[{{ ports | length }}] = {
%% for port in ports
		(((Gpios::port == Port::{{port}} and Gpios::isInverted) ? Gpios::mask : 0) | ...),
%% endfor
	};
	static constexpr uint16_t inverted(uint8_t id) { return inverteds[id]; }

	static constexpr uint16_t masks[{{ ports | length }}] = {
%% for port in ports
		(((Gpios::port == Port::{{port}}) ? Gpios::mask : 0) | ...),
%% endfor
	};
	static constexpr uint16_t mask(uint8_t id) { return masks[id]; }
	static constexpr uint32_t mask2(uint8_t id, uint8_t value = 0b11) {
		uint32_t r{0};
		for (int ii=0; ii<16; ii++)
			if (masks[id] & (1 << ii)) r |= (uint32_t(value) << (ii * 2));
		return r;
	}
%% if target.family in ["f1"]
	static constexpr uint64_t mask4(uint8_t id, uint8_t value = 0b1111) {
		uint64_t r{0};
		for (int ii=0; ii<16; ii++)
			if (masks[id] & (1 << ii)) r |= (uint64_t(value) << (ii * 4));
		return r;
	}
	static constexpr uint32_t crh(uint8_t id, uint8_t value = 0b1111) {
		return mask4(id, value) >> 32;
	}
	static constexpr uint32_t crl(uint8_t id, uint8_t value = 0b1111) {
		return mask4(id, value);
	}
%% endif
	static constexpr uint8_t numberOfPorts() {
		uint8_t r{0};
		for (const auto &m: masks) r += (m) ? 1 : 0;
		return r;
	}
public:
	static constexpr uint8_t width = sizeof...(Gpios);
	static constexpr uint8_t number_of_ports = numberOfPorts();
public:
	static void setOutput()
	{
%% if target.family in ["f1"]
		configure(OutputType::PushPull);
%% else
	%% for port in ports
		if constexpr (mask({{loop.index0}})) GPIO{{port}}->MODER = (GPIO{{port}}->MODER & ~mask2({{loop.index0}})) | mask2({{loop.index0}}, i(Mode::Output));
	%% endfor
%% endif
	}

	static void setOutput(bool status)
	{
		set(status);
		setOutput();
	}

	static void setOutput(OutputType type, OutputSpeed speed = OutputSpeed::MHz50)
	{
		configure(type, speed);
%% if target.family not in ["f1"]
		setOutput();
%% endif
	}

	static void configure(OutputType type, OutputSpeed speed = OutputSpeed::MHz50)
	{
%% if target.family in ["f1"]
	%% for port in ports
		if constexpr (crl({{loop.index0}})) GPIO{{port}}->CRL = (GPIO{{port}}->CRL & ~crl({{loop.index0}})) | ((i(type) | i(speed)) * crl({{loop.index0}}, 0b0001));
		if constexpr (crh({{loop.index0}})) GPIO{{port}}->CRH = (GPIO{{port}}->CRH & ~crh({{loop.index0}})) | ((i(type) | i(speed)) * crh({{loop.index0}}, 0b0001));
	%% endfor
%% else
	%% for port in ports
		if constexpr (mask({{loop.index0}})) {
			GPIO{{port}}->OSPEEDR = (GPIO{{port}}->OSPEEDR & ~mask2({{loop.index0}})) | (i(speed) * mask2({{loop.index0}}, 0b01));
			GPIO{{port}}->OTYPER  = (GPIO{{port}}->OTYPER  & ~mask({{loop.index0}}))  | (i(type) ? mask({{loop.index0}}) : 0);
		}
	%% endfor
%% endif
	}

	static void setInput()
	{
%% if target.family in ["f1"]
		configure(InputType::Floating);
%% else
	%% for port in ports
		if constexpr (mask({{loop.index0}})) {
			GPIO{{port}}->MODER &= ~mask2({{loop.index0}});
			GPIO{{port}}->OTYPER &= ~mask({{loop.index0}});
			GPIO{{port}}->OSPEEDR &= ~mask2({{loop.index0}});
		}
	%% endfor
%% endif
	}

	static void setInput(InputType type)
	{
		configure(type);
%% if target.family not in ["f1"]
		setInput();
%% endif
	}

	static void setAnalogInput()
	{
%% if target.family in ["f1"]
	%% for port in ports
		if constexpr (crl({{loop.index0}})) GPIO{{port}}->CRL &= ~crl({{loop.index0}});
		if constexpr (crh({{loop.index0}})) GPIO{{port}}->CRH &= ~crh({{loop.index0}});
	%% endfor
%% else
	%% for port in ports
		if constexpr (mask({{loop.index0}})) GPIO{{port}}->MODER |= mask2({{loop.index0}}, i(Mode::Analog));
		%% if target.family in ["l4"] and target["name"] in ["71", "75", "76", "85", "86"]
		if constexpr (mask({{loop.index0}})) GPIO{{port}}->ASCR |= mask({{loop.index0}});
		%% endif
	%% endfor
%% endif
	}

	static void configure(InputType type)
	{
%% if target.family in ["f1"]
	%% for port in ports
		if constexpr (crl({{loop.index0}})) GPIO{{port}}->CRL = (GPIO{{port}}->CRL & ~crl({{loop.index0}})) | ((i(type) & 0xc) * crl({{loop.index0}}, 0b0001));
		if constexpr (crh({{loop.index0}})) GPIO{{port}}->CRH = (GPIO{{port}}->CRH & ~crh({{loop.index0}})) | ((i(type) & 0xc) * crh({{loop.index0}}, 0b0001));
		if constexpr (mask({{loop.index0}})) GPIO{{port}}->BSRR = mask({{loop.index0}}) << ((type == InputType::PullUp) ? 0 : 16);
	%% endfor
%% else
	%% for port in ports
		if constexpr (mask({{loop.index0}})) {
			GPIO{{port}}->PUPDR = (GPIO{{port}}->PUPDR & ~mask2({{loop.index0}})) | (i(type) * mask2({{loop.index0}}, 0b01));
		}
	%% endfor
%% endif
	}

	static void set()
	{
%% for port in ports
		if constexpr (mask({{loop.index0}})) GPIO{{port}}->BSRR = (inverted({{loop.index0}}) << 16) | (mask({{loop.index0}}) & ~inverted({{loop.index0}}));
%% endfor
	}

	static void set(bool status)
	{
		if (status) set();
		else        reset();
	}

	static void reset()
	{
%% for port in ports
		if constexpr (mask({{loop.index0}})) GPIO{{port}}->BSRR = ((uint32_t(mask({{loop.index0}})) & ~inverted({{loop.index0}})) << 16) | inverted({{loop.index0}});
%% endfor
	}

	static void toggle()
	{
%% for port in ports
		if constexpr (mask({{loop.index0}})) {
			uint32_t are_set = (GPIO{{port}}->ODR & mask({{loop.index0}}));
			uint32_t are_reset = mask({{loop.index0}}) ^ are_set;
			GPIO{{port}}->BSRR = (are_set << 16) | are_reset;
		}
%% endfor
	}

	static void lock()
	{
%% for port in ports
		if constexpr (mask({{loop.index0}})) {
			GPIO{{port}}->LCKR = 0x10000 | mask({{loop.index0}});
			GPIO{{port}}->LCKR = 0x00000 | mask({{loop.index0}});
			GPIO{{port}}->LCKR = 0x10000 | mask({{loop.index0}});
			(void) GPIO{{port}}->LCKR;
		}
%% endfor
	}

	static void disconnect()
	{
		(Gpios::disconnect(), ...);
	}
};

} // namespace platform

} // namespace modm

#endif // MODM_STM32_GPIO_SET_HPP
