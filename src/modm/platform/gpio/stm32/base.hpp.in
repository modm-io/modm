/*
 * Copyright (c) 2016-2017, Niklas Hauser
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#ifndef MODM_STM32_GPIO_BASE_HPP
#define MODM_STM32_GPIO_BASE_HPP

#include "../device.hpp"
#include <modm/architecture/interface/gpio.hpp>
#include <modm/math/utils/bit_operation.hpp>

/**
 * @ingroup 	platform
 * @defgroup	{{partname}}
 */

/**
 * @ingroup 	{{partname}}
 * @defgroup	{{partname}}_gpio GPIO
 */

namespace modm
{

namespace platform
{

/// @ingroup {{partname}}_gpio
enum class
Peripheral
{
	BitBang,
%% for per in all_peripherals
	{{ per }},
%% endfor
};

/// @ingroup {{partname}}_gpio
struct Gpio
{
	enum class
	InputType
	{
%% if target["family"] in ["f1"]
		Floating = 0x4,	///< floating on input
		PullUp = 0x9,	///< pull-up on input
		PullDown = 0x8,	///< pull-down on input
%% else
		Floating = 0x0,	///< floating on input
		PullUp = 0x1,	///< pull-up on input
		PullDown = 0x2,	///< pull-down on input
%% endif
	};

	enum class
	OutputType
	{
		PushPull = 0x0,		///< push-pull on output
%% if target["family"] in ["f1"]
		OpenDrain = 0x4,	///< open-drain on output
%% else
		OpenDrain = 0x1,	///< open-drain on output
%% endif
	};

	enum class
	OutputSpeed
	{
%% if target["family"] in ["f2", "f4", "f7", "l4"]
		MHz2 = 0,		///< Low speed
		MHz25 = 0x1,	///< Medium speed
		MHz50 = 0x2,	///< Fast speed
		MHz100 = 0x3,	///< High speed on 30 pF (80 MHz Output max speed on 15 pF)
%% elif target["family"] in ["f0", "f3"]
		MHz2 = 0,		///< Low speed
		MHz10 = 0x1,	///< Medium speed
		MHz50 = 0x3,	///< Fast speed
%% elif target["family"] in ["f1"]
		MHz2  = 0x2,	///< Low speed
		MHz10 = 0x1,	///< Medium speed
		MHz50 = 0x3,	///< Fast speed
%% endif
	};

	enum class
	InputTrigger
	{
		RisingEdge,
		FallingEdge,
		BothEdges,
	};

	/// The Port a Gpio Pin is connected to.
	enum class
	Port
	{
%% for port in ports
		{{ port | upper }} = {{ port | letterToNum }},
%% endfor
	};

	enum class
	Signal
	{
		BitBang,
%% for signal in all_signals
		{{ signal }},
%% endfor
	};

protected:
	/// @cond
%% if target["family"] not in ["f1"]
	/// I/O Direction Mode values for this specific pin.
	enum class
	Mode
	{
		Input  = 0x0,
		Output = 0x1,
		AlternateFunction = 0x2,
		Analog = 0x3,
		Mask   = 0x3,
	};

	static constexpr uint32_t
	i(Mode mode) { return uint32_t(mode); }
%% endif
	// Enum Class To Integer helper functions.
	static constexpr uint32_t
	i(InputType pull) { return uint32_t(pull); }
	static constexpr uint32_t
	i(OutputType out) { return uint32_t(out); }
	static constexpr uint32_t
	i(OutputSpeed speed) { return uint32_t(speed); }
	/// @endcond
};

} // namespace platform

} // namespace modm

#endif // MODM_STM32_GPIO_BASE_HPP
