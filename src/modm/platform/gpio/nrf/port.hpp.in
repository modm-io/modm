/*
 * Copyright (c) 2016-2018, Niklas Hauser
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#ifndef MODM_NRF_GPIO_PORT_HPP
#define MODM_NRF_GPIO_PORT_HPP

#include "base.hpp"
#include <type_traits>
#include <modm/math/utils/bit_operation.hpp>

namespace modm
{

namespace platform
{

/// @cond
template< Gpio::Port port >
struct GpioPortInfo;
template< class StartGpio, int8_t Width >
struct GpioSetShim
{
	static typename GpioPortInfo<StartGpio::port>::template check<StartGpio::pin, Width> check;
};
/// @endcond

/// @ingroup modm_platform_gpio
template< class StartGpio, int8_t Width >
class GpioPort : public ::modm::GpioPort/** @cond */, public GpioSetShim<StartGpio, Width> /** @endcond */
{
	using PinSet = GpioSetShim<StartGpio, Width>;
public:
	using PinSet::width;
	static_assert(width <= 16, "Only a maximum of 16 pins are supported by GpioPort!");
	using PortType = std::conditional_t< (width > 8),
										 uint16_t,
										 uint8_t >;
	static constexpr DataOrder getDataOrder()
	{ return Width > 0 ? GpioPort::DataOrder::Normal : GpioPort::DataOrder::Reversed; }

protected:
	using PinSet::mask;
	using PinSet::inverted;
	static constexpr uint8_t StartPin = Width > 0 ? StartGpio::pin : StartGpio::pin - width + 1;
	static constexpr uint8_t StartPinReversed = (8 - StartPin - width) + 8;

public:
	static PortType isSet()
	{
		uint16_t r{0};
%% for port, id in ports.items()
		if constexpr (mask({{id}})) r = (GPIOP{{port}}->ODR & mask({{id}})) ^ inverted({{id}});
%% endfor
		if constexpr (getDataOrder() == modm::GpioPort::DataOrder::Reversed)
			 return bitReverse(r) >> StartPinReversed;
		else return            r  >> StartPin;
	}

	static PortType read()
	{
		uint16_t r{0};
%% for port, id in ports.items()
		if constexpr (mask({{id}})) r = (GPIOP{{port}}->IDR & mask({{id}})) ^ inverted({{id}});
%% endfor
		if constexpr (getDataOrder() == modm::GpioPort::DataOrder::Reversed)
			 return bitReverse(r) >> StartPinReversed;
		else return            r  >> StartPin;
	}

	static void write(PortType data)
	{
		uint16_t p;
		if constexpr (getDataOrder() == modm::GpioPort::DataOrder::Reversed)
			 p = bitReverse(uint16_t(uint16_t(data) << StartPinReversed));
		else p =            uint16_t(data) << StartPin;
%% for port, id in ports.items()
		if constexpr (mask({{id}})) { p ^= inverted({{id}});
			GPIOP{{port}}->BSRR = ((~p & mask({{id}})) << 16) | (p & mask({{id}}));
		}
%% endfor
	}
};

/// @cond
// ------ Port Width Information ------
%% for port in ranges
template<>
struct GpioPortInfo<Gpio::Port::{{port["name"]}}>
{
	static constexpr int8_t Width = {{port["width"]}};
	static constexpr int8_t StartPin = {{port["start"]}};
	static constexpr int8_t EndPin = StartPin + Width;

	template< uint8_t QueryStartPin, int8_t QueryWidth >
	struct check
	{
		static constexpr bool isNormal = QueryWidth > 0;
		static constexpr bool isReversed = QueryWidth < 0;
		static constexpr int8_t width = isNormal ? QueryWidth : -QueryWidth;
		static_assert(isReversed or width <= Width,
			"GpioPort Width out of bounds! Maximum is {{port["width"]}}.");

		static_assert(isReversed or (QueryStartPin + QueryWidth <= EndPin),
			"GpioPort StartPin + Width out of bounds! Maximum is {{port["start"] + port["width"] - 1}}.");
		static_assert(isNormal or (StartPin <= QueryStartPin + QueryWidth + 1),
			"GpioPort StartPin - Width out of bounds! Minimum is {{port["start"]}}.");
	};
};
%% endfor

// ------ Translator classes from Gpio + Width -> GpioSet ------
template< class StartGpio, int8_t offset >
struct GpioShim
{
	static constexpr typename StartGpio::Port port = StartGpio::port;
	static constexpr uint16_t mask = (1ul << (StartGpio::pin + offset));
	static constexpr bool isInverted = StartGpio::isInverted;
};
%% for width in range(-16, 0)
template< class StartGpio >
struct GpioSetShim<StartGpio, {{width}}> : public GpioSet<
	%% for offset in (range(width + 1, 1) | reverse)
		GpioShim<StartGpio, {{offset}}>{% if not loop.last %},{% endif %}
	%% endfor
		> { static typename GpioPortInfo<StartGpio::port>::template check<StartGpio::pin, {{width}}> check; };
%% endfor
%% for width in range(0, 17)
template< class StartGpio >
struct GpioSetShim<StartGpio, {{width}}> : public GpioSet<
	%% for offset in (range(width) | reverse)
		GpioShim<StartGpio, {{offset}}>{% if not loop.last %},{% endif %}
	%% endfor
		> { static typename GpioPortInfo<StartGpio::port>::template check<StartGpio::pin, {{width}}> check; };
%% endfor
/// @endcond

} // namespace platform

} // namespace modm

#endif // MODM_NRF_GPIO_PORT_HPP
