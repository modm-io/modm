/*
 * Copyright (c) 2022, Andrey Kunitsyn
 * Copyright (c) 2022, Niklas Hauser
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#pragma once

#include "../device.hpp"
#include "base.hpp"

namespace modm::platform
{

/// @ingroup modm_platform_gpio
template< class... Gpios >
class GpioSet : public Gpio
{
	static constexpr uint32_t inverteds[{{ ports | length }}] = {
%% for port in ports
		(((Gpios::port == Port::{{port}} and Gpios::isInverted) ? Gpios::mask : 0) | ...),
%% endfor
	};

	static constexpr uint32_t masks[{{ ports | length }}] = {
%% for port in ports
		(((Gpios::port == Port::{{port}}) ? Gpios::mask : 0) | ...),
%% endfor
	};
	static constexpr uint8_t numberOfPorts() {
		uint8_t r{0};
		for (const auto &m: masks) r += (m) ? 1 : 0;
		return r;
	}

protected:
	static constexpr uint32_t inverted(uint8_t id) { return inverteds[id]; }
	static constexpr uint32_t mask(uint8_t id) { return masks[id]; }

public:
	static constexpr uint8_t width = sizeof...(Gpios);
	static constexpr uint8_t number_of_ports = numberOfPorts();

public:
	static void setOutput()
	{
		disconnect();
%% for port, id in ports.items()
		if constexpr (mask({{id}})) PortRegs<Port::{{port}}>::sio_oe_set(mask({{id}}));
%% endfor
	}

	static void setOutput(bool status)
	{
		set(status);
		setOutput();
	}

	static void setOutput(OutputType type, OutputSpeed speed = OutputSpeed::Slow)
	{
		setOutput();
		configure(type, speed);
	}

	static void configure(OutputType, OutputSpeed speed = OutputSpeed::Slow)
	{
		(PortRegs<Gpios::port>::set_speed(Gpios::pin, speed), ...);
	}

	static void setInput()
	{
		setInput(InputType::Floating);
	}

	static void setInput(InputType type)
	{
%% for port, id in ports.items()
		if constexpr (mask({{id}})) PortRegs<Port::{{port}}>::sio_oe_clr(mask({{id}}));
%% endfor
		configure(type);
	}

	static void configure(InputType type)
	{
		(PortRegs<Gpios::port>::set_pue_pde(Gpios::pin, type==InputType::PullUp, type==InputType::PullDown), ...);
	}

	static void setSlewRate(SlewRate rate)
	{
		(PortRegs<Gpios::port>::set_slewrate(Gpios::pin, uint8_t(rate)), ...);
	}

	static void set()
	{
%% for port, id in ports.items()
		if constexpr (mask({{id}}) & ~inverted({{id}}))
			PortRegs<Port::{{port}}>::sio_set(mask({{id}}) & ~inverted({{id}}));
		if constexpr (mask({{id}}) &  inverted({{id}}))
			PortRegs<Port::{{port}}>::sio_clr(mask({{id}}) &  inverted({{id}}));
%% endfor
	}

	static void set(bool status)
	{
		if (status) set();
		else reset();
	}

	static void reset()
	{
%% for port, id in ports.items()
		if constexpr (mask({{id}}) &  inverted({{id}}))
			PortRegs<Port::{{port}}>::sio_set(mask({{id}}) &  inverted({{id}}));
		if constexpr (mask({{id}}) & ~inverted({{id}}))
			PortRegs<Port::{{port}}>::sio_clr(mask({{id}}) & ~inverted({{id}}));
%% endfor
	}

	static void toggle()
	{
%% for port, id in ports.items()
		if constexpr (mask({{id}})) PortRegs<Port::{{port}}>::sio_togl(mask({{id}}));
%% endfor
	}

	static void disconnect()
	{
		(Gpios::disconnect(), ...);
	}
};

} // namespace modm::platform
