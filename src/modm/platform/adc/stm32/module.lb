#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2016-2018, Niklas Hauser
# Copyright (c) 2017, Fabian Greif
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

instances = []

class Instance(Module):
    def __init__(self, instance):
        self.instance = instance

    def init(self, module):
        module.name = str(self.instance)
        module.description = "ADC {} instance".format(self.instance)

    def prepare(self, module, options):
        module.depends(":platform:adc")
        return True

    def pre_build(self, env):
        instances.append(self.instance)

    def build(self, env):
        device = env[":target"]
        driver = device.get_driver("adc")

        properties = device.properties
        properties["target"] = target = device.identifier
        properties["partname"] = device.partname
        properties["id"] = self.instance

        # TODO: Consider moving this data to device file!
        properties["temperature_available"] = (target["family"] in ["f2", "f4", "f7"] or
                                              (target["family"] == "f1" and self.instance == 1))
        properties["resolution"] = 12
        properties["max_frequency"] = 36000000 if target["family"] in ["f4", "f7"] else 14000000

        channels = [0,1,2,3,4,5,6,7,8,10,11,12,13]
        if target["family"] in ["f2", "f4", "f7"]:
            channels.extend([9,14,15,16,17,18])
        elif target["family"] in ["f1", "f3"]:
            if self.instance == 1:
                channels.extend([16,17])
            if self.instance < 3:
                channels.extend([9,14,15])
        properties["channels"] = sorted(channels)

        env.substitutions = properties
        env.outbasepath = "modm/src/modm/platform/adc"

        env.template("adc.hpp.in", "adc_{}.hpp".format(self.instance))
        env.template("adc_impl.hpp.in", "adc_{}_impl.hpp".format(self.instance))
        env.template("adc_interrupt.hpp.in", "adc_interrupt_{}.hpp".format(self.instance))
        env.template("adc_interrupt.cpp.in", "adc_interrupt_{}.cpp".format(self.instance))


def init(module):
    module.name = "adc"
    module.parent = "platform"

def prepare(module, options):
    device = options[":target"]
    if not device.has_driver("adc:stm32"):
        return False

    module.depends(
        ":architecture:adc",
        ":architecture:register",
        ":cmsis:device",
        ":platform:gpio",
        ":utils")

    for instance in listify(device.get_driver("adc")["instance"]):
        module.add_submodule(Instance(int(instance)))

    return True

def build(env):
    device = env[":target"]
    driver = device.get_driver("adc")

    properties = device.properties
    properties["target"] = device.identifier
    properties["partname"] = device.partname
    properties["driver"] = driver
    properties["instances"] = instances

    env.substitutions = properties
    env.outbasepath = "modm/src/modm/platform/adc"

    env.template("adc_interrupts.cpp.in")
