/*
 * Copyright (c) 2013-2014, Kevin LÃ¤ufer
 * Copyright (c) 2014-2017, Niklas Hauser
 * Copyright (c) 2016, Fabian Greif
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#ifndef MODM_STM32_ADC{{ id }}_HPP
#	error 	"Don't include this file directly, use 'adc_{{ id }}.hpp' instead!"
#endif

#include <modm/platform/clock/rcc.hpp>
#include <modm/math/algorithm/prescaler.hpp>

template< class SystemClock, modm::frequency_t frequency, modm::percent_t tolerance >
void
modm::platform::Adc{{ id }}::initialize()
{
	constexpr auto result = modm::Prescaler::from_list(SystemClock::Adc, frequency, {2,4,6,8});
	static_assert(result.frequency <= {{ max_frequency }}, "Generated ADC frequency is above maximum frequency!");
	assertBaudrateInTolerance<result.frequency, frequency, tolerance >();

	Rcc::enable<Peripheral::Adc{{id}}>();
	ADC{{ per }}->CR2 |= ADC_CR2_ADON;			// switch on ADC

	setPrescaler(Prescaler{result.index});
}

void
modm::platform::Adc{{ id }}::setPrescaler(const Prescaler prescaler)
{
%% if target["family"] in ["f2", "f4", "f7", "l1"]
	ADC->CCR = (ADC->CCR & ~ADC_CCR_ADCPRE) | (uint32_t(prescaler) << ADC_CCR_ADCPRE_Pos);
%% elif target["family"] in ["f1", "f3"]
	RCC->CFGR = (RCC->CFGR & ~(0b11 << 14)) | (uint32_t(prescaler) << 14);
%% endif
}

%% if temperature_available
void
modm::platform::Adc{{ id }}::enableTemperatureRefVMeasurement()
{
	%% if target["family"] in ["f2", "f4", "f7"]
	ADC->CCR |= ADC_CCR_TSVREFE;
	%% elif target["family"] == "f1"
	ADC{{ per }}->CR2 |= ADC_CR2_TSVREFE;
	%% endif
}

void
modm::platform::Adc{{ id }}::disableTemperatureRefVMeasurement()
{
	%% if target["family"] in ["f2", "f4", "f7"]
	ADC->CCR &= ~ADC_CCR_TSVREFE;
	%% elif target["family"] == "f1"
	ADC{{ per }}->CR2 &= ~ADC_CR2_TSVREFE;
	%% endif
}
%% endif

void
modm::platform::Adc{{ id }}::setLeftAdjustResult()
{
	ADC{{ per }}->CR2 |= ADC_CR2_ALIGN;
}

void
modm::platform::Adc{{ id }}::setRightAdjustResult()
{
	ADC{{ per }}->CR2 &= ~ADC_CR2_ALIGN;
}

%% if target["family"] == "f1"
void
modm::platform::Adc{{ id }}::calibrate()
{
	ADC{{ per }}->CR2 |= ADC_CR2_CAL;
	while (ADC{{ per }}->CR2 & ADC_CR2_CAL);
}
%% endif

bool
modm::platform::Adc{{ id }}::setChannel(const Channel channel,
									 const SampleTime sampleTime)
{
	if (uint32_t(channel) > 18) return false;
	// clear number of conversions in the sequence
	// and set number of conversions to 1
	ADC{{ per }}->SQR1 = 0;
	ADC{{ per }}->SQR2 = 0;
	ADC{{ per }}->SQR3 = uint32_t(channel) & 0x1f;

	setSampleTime(channel, sampleTime);
	return true;
}

modm::platform::Adc{{ id }}::Channel
modm::platform::Adc{{ id }}::getChannel()
{
	return Channel(ADC{{ per }}->SQR3 & 0x1f);
}

bool
modm::platform::Adc{{ id }}::addChannel(const Channel channel,
									const SampleTime sampleTime)
{
	// read channel count
	uint8_t channel_count = (ADC{{ per }}->SQR1 & ADC_SQR1_L) >> 20;
	++channel_count;
	if(channel_count > 0x0f) return false; // emergency exit
	// write channel number
	if(channel_count < 6) {
		ADC{{ per }}->SQR3 |=
			(uint32_t(channel) & 0x1f) << (channel_count*5);
	} else 	if(channel_count < 12) {
		ADC{{ per }}->SQR2 |=
			(uint32_t(channel) & 0x1f) << ((channel_count-6)*5);
	} else {
		ADC{{ per }}->SQR1 |=
			(uint32_t(channel) & 0x1f) << ((channel_count-12)*5);
	}
	// update channel count
	ADC{{ per }}->SQR1 = (ADC{{ per }}->SQR1 & ~ADC_SQR1_L) | (channel_count << 20);
%% if target["family"] not in ["f3"]
	// set hardware scan mode
	ADC{{ per }}->CR1 |= ADC_CR1_SCAN;

%%endif

	setSampleTime(channel, sampleTime);
	return true;
}

void
modm::platform::Adc{{ id }}::setSampleTime(const Channel channel,
										const SampleTime sampleTime)
{
	if (uint32_t(channel) < 10) {
		ADC{{ per }}->SMPR2 |= uint32_t(sampleTime)
								<< (uint32_t(channel) * 3);
	}
	else {
		ADC{{ per }}->SMPR1 |= uint32_t(sampleTime)
								<< ((uint32_t(channel)-10) * 3);
	}
}

void
modm::platform::Adc{{ id }}::enableFreeRunningMode()
{
	ADC{{ per }}->CR2 |= ADC_CR2_CONT;	// set to continuous mode
}

void
modm::platform::Adc{{ id }}::disableFreeRunningMode()
{
	ADC{{ per }}->CR2 &= ~ADC_CR2_CONT;		// set to single mode
}

void
modm::platform::Adc{{ id }}::disable()
{
	ADC{{ per }}->CR2 &= ~(ADC_CR2_ADON);		// switch off ADC
	RCC->APB2ENR &= ~RCC_APB2ENR_ADC{{ per }}EN; // stop ADC Clock
}

void
modm::platform::Adc{{ id }}::startConversion()
{
	acknowledgeInterruptFlags(InterruptFlag::All);
%% if target["family"] == "f1"
	// select the SWSTART event used to trigger the start of
	// conversion of a regular group
	ADC{{ per }}->CR2 |= ADC_CR2_EXTTRIG | ADC_CR2_EXTSEL_0 | ADC_CR2_EXTSEL_1 | ADC_CR2_EXTSEL_2;
%% endif
	// starts single conversion for the regular group
	ADC{{ per }}->CR2 |= ADC_CR2_SWSTART;
}

bool
modm::platform::Adc{{ id }}::isConversionFinished()
{
	return (ADC{{ per }}->SR & ADC_SR_EOC);
}

uint16_t
modm::platform::Adc{{ id }}::getValue()
{
	return ADC{{ per }}->DR;
}


uint16_t
modm::platform::Adc{{ id }}::readChannel(Channel channel)
{
	if (!setChannel(channel)) return 0;

	startConversion();
	// wait until the conversion is finished
	while (!isConversionFinished())
		;

	return getValue();
}

// ----------------------------------------------------------------------------
void
modm::platform::Adc{{ id }}::enableInterruptVector(const uint32_t priority,
												   const bool enable)
{
%% if target["family"] in ["f2", "f4", "f7"]
	const IRQn_Type InterruptVector = ADC_IRQn;
%% elif  target["family"] in ["l1"]
	const IRQn_Type InterruptVector = ADC1_IRQn;
%% elif target["family"] in ["f1", "f3"]
	%% if id < 3
	const IRQn_Type InterruptVector = ADC1_2_IRQn;
	%% elif id == 3
	const IRQn_Type InterruptVector = ADC3_IRQn;
	%% endif
%% endif

	if (enable) {
		NVIC_SetPriority(InterruptVector, priority);
		NVIC_EnableIRQ(InterruptVector);
	} else {
		NVIC_DisableIRQ(InterruptVector);
	}
}

void
modm::platform::Adc{{ id }}::enableInterrupt(const Interrupt_t interrupt)
{
	ADC{{ per }}->CR1 |= interrupt.value;
}

void
modm::platform::Adc{{ id }}::disableInterrupt(const Interrupt_t interrupt)
{
	ADC{{ per }}->CR1 &= ~interrupt.value;
}

modm::platform::Adc{{ id }}::InterruptFlag_t
modm::platform::Adc{{ id }}::getInterruptFlags()
{
	return InterruptFlag_t(ADC{{ per }}->SR);
}

void
modm::platform::Adc{{ id }}::acknowledgeInterruptFlags(const InterruptFlag_t flags)
{
	ADC{{ per }}->SR = ~flags.value;
}
