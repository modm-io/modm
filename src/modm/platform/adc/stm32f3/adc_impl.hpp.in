/*
 * Copyright (c) 2013-2014, Kevin LÃ¤ufer
 * Copyright (c) 2014, Sascha Schade
 * Copyright (c) 2014, 2016-2017, Niklas Hauser
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#ifndef MODM_STM32F3_ADC{{ id }}_HPP
#	error 	"Don't include this file directly, use 'adc_{{ id }}.hpp' instead!"
#endif

#include <modm/architecture/interface/delay.hpp>	// modm::delayMicroseconds
#include <modm/platform/clock/rcc.hpp>

void
modm::platform::Adc{{ id }}::initialize(const ClockMode clk,
%% if clock_mux
		const ClockSource clk_src,
%% endif
		const Prescaler pre,
		const CalibrationMode cal, const bool blocking)
{
	uint32_t tmp = 0;

	// enable clock
%% if target["family"] in ["f3", "g4", "l5"]
	RCC->{{ ahb }}ENR |= RCC_{{ ahb }}ENR_ADC{{ id_common }}EN;
%% elif target["family"] in ["l4"]
	Rcc::enable<Peripheral::Adc1>();
%% endif

%% if clock_mux
	// select clock source
	RCC->{{ ccipr }} |= static_cast<uint32_t>(clk_src);
%% endif

%% if target["family"] in ["l4", "l5", "g4"]
	// Disable deep power down
	ADC{{ id }}->CR &= ~ADC_CR_DEEPPWD;
%% endif

	// reset ADC
	// FIXME: not a good idea since you can only reset both
	// ADC1/ADC2 or ADC3/ADC4 at once ....

	// set ADC "analog" clock source
	if (clk != ClockMode::DoNotChange) {
		if (clk == ClockMode::Asynchronous) {
			setPrescaler(pre);
		}
		tmp  =  ADC{{ id_common_u }}->CCR;
		tmp &= ~{{ adc_ccr }}_CKMODE;
		tmp |=  static_cast<uint32_t>(clk);
		ADC{{ id_common_u }}->CCR = tmp;
	}

	// enable regulator
	ADC{{ id }}->CR &= ~ADC_CR_ADVREGEN;
	ADC{{ id }}->CR |= static_cast<uint32_t>(VoltageRegulatorState::Enabled);
	modm::delay_us(10);	// FIXME: this is ugly -> find better solution

	acknowledgeInterruptFlags(InterruptFlag::Ready);

	calibrate(cal, true);	// blocking calibration

	ADC{{ id }}->CR |= ADC_CR_ADEN;
	if (blocking) {
		// ADEN can only be set 4 ADC clock cycles after ADC_CR_ADCAL gets
		// cleared. Setting it in a loop ensures the flag gets set for ADC
		// clocks slower than the CPU clock.
		while (not isReady()) {
			ADC{{ id }}->CR |= ADC_CR_ADEN;
		}
		acknowledgeInterruptFlags(InterruptFlag::Ready);
	}
}

void
modm::platform::Adc{{ id }}::disable(const bool blocking)
{
	ADC{{ id }}->CR |= ADC_CR_ADDIS;
	if (blocking) {
		// wait for ADC_CR_ADDIS to be cleared by hw
		while(ADC{{ id }}->CR & ADC_CR_ADDIS);
	}
	// disable clock
%% if target["family"] in ["f3", "g4", "l5"]
	RCC->{{ ahb }}ENR &= ~RCC_{{ ahb }}ENR_ADC{{ id_common }}EN;
%% elif target["family"] in ["l4"]
	Rcc::disable<Peripheral::Adc1>();
%% endif
}

void
modm::platform::Adc{{ id }}::setPrescaler(const Prescaler pre)
{
	uint32_t tmp;
%% if target["family"] in ["f3"]
	tmp  = RCC->CFGR2;
	tmp &= ~static_cast<uint32_t>(Prescaler::Div256AllBits);
	tmp |=  static_cast<uint32_t>(pre);
	RCC->CFGR2 = tmp;
%% elif target["family"] in ["l4", "l5", "g4"]
	tmp  = ADC{{ id_common_u }}->CCR;
	tmp &= ~static_cast<uint32_t>(Prescaler::Div256AllBits);
	tmp |=  static_cast<uint32_t>(pre);
	ADC{{ id_common_u }}->CCR = tmp;
%% endif
}

bool
modm::platform::Adc{{ id }}::isReady()
{
	return static_cast<bool>(getInterruptFlags() & InterruptFlag::Ready);
}

void
modm::platform::Adc{{ id }}::calibrate(const CalibrationMode mode,
									const bool blocking)
{
	if (mode != CalibrationMode::DoNotCalibrate) {
		ADC{{ id }}->CR |= ADC_CR_ADCAL |
										static_cast<uint32_t>(mode);
		if(blocking) {
			// wait for ADC_CR_ADCAL to be cleared by hw
			while(ADC{{ id }}->CR & ADC_CR_ADCAL);
		}
	}
}

void
modm::platform::Adc{{ id }}::setLeftAdjustResult(const bool enable)
{
	if (enable) {
		ADC{{ id }}->CFGR |= ADC_CFGR_ALIGN;
	}
	else {
		ADC{{ id }}->CFGR &= ~ADC_CFGR_ALIGN;
	}
}

bool
modm::platform::Adc{{ id }}::setChannel(	const Channel channel,
										const SampleTime sampleTime)
{
	if(static_cast<uint8_t>(channel) > 18) {
		return false;
	}

	uint32_t tmpreg;
	// SQR1[10:6] contain SQ1[4:0]
	ADC{{ id }}->SQR1 = (static_cast<uint8_t>(channel) & 0b11111) << 6;

	if (static_cast<uint8_t>(channel) < 10) {
		tmpreg = ADC{{ id }}->SMPR1
			& ((~ADC_SMPR1_SMP0) << (static_cast<uint8_t>(channel) * 3));
		tmpreg |= static_cast<uint32_t>(sampleTime) <<
						(static_cast<uint8_t>(channel) * 3);
		ADC{{ id }}->SMPR1 = tmpreg;
	}
	else {
		tmpreg = ADC{{ id }}->SMPR2
			& ((~ADC_SMPR2_SMP10) << ((static_cast<uint8_t>(channel)-10) * 3));
		tmpreg |= static_cast<uint32_t>(sampleTime) <<
						((static_cast<uint8_t>(channel)-10) * 3);
		ADC{{ id }}->SMPR2 = tmpreg;
	}
	return true;
}

void
modm::platform::Adc{{ id }}::setFreeRunningMode(const bool enable)
{
	if (enable) {
		ADC{{ id }}->CFGR |=  ADC_CFGR_CONT; // set to continuous mode
	} else {
		ADC{{ id }}->CFGR &= ~ADC_CFGR_CONT; // set to single mode
	}
}


void
modm::platform::Adc{{ id }}::startConversion(void)
{
	// TODO: maybe add more interrupt flags
	acknowledgeInterruptFlags(InterruptFlag::EndOfRegularConversion |
			InterruptFlag::EndOfSampling | InterruptFlag::Overrun);
	// starts single conversion for the regular group
	ADC{{ id }}->CR |= ADC_CR_ADSTART;
}

bool
modm::platform::Adc{{ id }}::isConversionFinished(void)
{
	return static_cast<bool>(getInterruptFlags() & InterruptFlag::EndOfRegularConversion);
}

// ----------------------------------------------------------------------------
void
modm::platform::Adc{{ id }}::enableInterruptVector(const uint32_t priority,
												const bool enable)
{
%% if id <= 2
	const IRQn_Type INTERRUPT_VECTOR = ADC1_2_IRQn;
%% elif id <= 5
	const IRQn_Type INTERRUPT_VECTOR = ADC{{ id }}_IRQn;
%% endif

	if (enable) {
		NVIC_SetPriority(INTERRUPT_VECTOR, priority);
		NVIC_EnableIRQ(INTERRUPT_VECTOR);
	} else {
		NVIC_DisableIRQ(INTERRUPT_VECTOR);
	}
}

void
modm::platform::Adc{{ id }}::enableInterrupt(const Interrupt_t interrupt)
{
	ADC{{ id }}->IER |= interrupt.value;
}

void
modm::platform::Adc{{ id }}::disableInterrupt(const Interrupt_t interrupt)
{
	ADC{{ id }}->IER &= ~interrupt.value;
}

modm::platform::Adc{{ id }}::InterruptFlag_t
modm::platform::Adc{{ id }}::getInterruptFlags()
{
	return InterruptFlag_t(ADC{{ id }}->ISR);
}

void
modm::platform::Adc{{ id }}::acknowledgeInterruptFlags(const InterruptFlag_t flags)
{
	// Flags are cleared by writing a one to the flag position.
	// Writing a zero is ignored.
	ADC{{ id }}->ISR = flags.value;
}
