/*
 * Copyright (c) 2016, Sascha Schade
 * Copyright (c) 2016-2017, Fabian Greif
 * Copyright (c) 2016-2017, 2019, Niklas Hauser
 * Copyright (c) 2021, Raphael Lehmann
 * Copyright (c) 2021, Christopher Durand
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#include "../device.hpp"

/**
 * This code should _only_ enable internal memories and nothing else.
 * Since this is the first code executed after a reset, you do not
 * have access to _any_ data stored in RAM, since it has not yet been
 * initialized.
 * In the worst case you won't even have access to the stack, if the
 * memory containing the stack is not physically enabled yet.
 * In that case, consider using inline assembly to manage stack access
 * manually, until the memory is enabled.
 */
void
__modm_initialize_platform(void)
{
	// Enable SYSCFG
%% if target.family == "g0"
	RCC->APBENR2 |= RCC_APBENR2_SYSCFGEN;
%% elif target.family == "f1"
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
%% elif target.family == "h7"
	RCC->APB4ENR |= RCC_APB4ENR_SYSCFGEN;
%% elif target.family == "u5"
	RCC->APB3ENR |= RCC_APB3ENR_SYSCFGEN;
%% else
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
%% endif

%% if target.family == "f4"
// Only the more powerful F4 targets have CCM or Backup SRAM
#ifdef RCC_AHB1ENR_CCMDATARAMEN
	// Enable power to backup domain
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
	// Enable write access to backup SRAM
	PWR->CR |= PWR_CR_DBP;
	// Enable Core Coupled Memory (CCM) and backup SRAM (BKPSRAM)
	RCC->AHB1ENR |= RCC_AHB1ENR_CCMDATARAMEN | RCC_AHB1ENR_BKPSRAMEN;
#endif
%% elif target.family == "f7"
	// Reset from DFU settings to reset values.
	RCC->DCKCFGR2 = 0;
	// Enable power to backup domain
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
	// Enable write access to backup SRAM
	PWR->CR1 |= PWR_CR1_DBP;
	// Enable Data Tighly Coupled Memory (DTCM) and backup SRAM (BKPSRAM)
	RCC->AHB1ENR |= RCC_AHB1ENR_DTCMRAMEN | RCC_AHB1ENR_BKPSRAMEN;
%% elif target.family in ["g0", "g4", "l4", "l5"]
	// Enable access to RTC and Backup registers
	PWR->CR1 |= PWR_CR1_DBP;
%% if target.family in ["l4", "g4"]
	RCC->APB1ENR1 |= RCC_APB1ENR1_PWREN;
%% elif target.family != "g0"
#ifdef PWR_CR2_IOSV
	RCC->APB1ENR1 |= RCC_APB1ENR1_PWREN;
#endif
%% endif

#ifdef PWR_CR2_IOSV
	// Enable VDDIO2
	PWR->CR2 |= PWR_CR2_IOSV;
#endif
%% elif target.family in ["u5"]
	RCC->AHB3ENR |= RCC_AHB3ENR_PWREN;
	// Enable power for VDDIO2 and USB
	PWR->SVMCR |= PWR_SVMCR_ASV | PWR_SVMCR_IO2SV | PWR_SVMCR_USV;

	// Enable Backup SRAM (BKPSRAM)
	PWR->DBPR |= PWR_DBPR_DBP;
	RCC->AHB1ENR |= RCC_AHB1ENR_BKPSRAMEN;
%% endif

%% if vector_table_location == "ram"
	// Remap SRAM to 0x0 for vector table relocation without VTOR register
	SYSCFG->CFGR1 |= SYSCFG_CFGR1_MEM_MODE;
%% endif
}
