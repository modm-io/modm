/*
 * Copyright (c) 2009, Martin Rosekeit
 * Copyright (c) 2009-2011, 2017, Fabian Greif
 * Copyright (c) 2011-2017, Niklas Hauser
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#ifndef MODM_AVR_INTERRUPTS_HPP
#define MODM_AVR_INTERRUPTS_HPP

#include <avr/interrupt.h>

namespace modm
{

namespace platform
{

/// @ingroup	modm_platform_core
/// @{

/// enables global interrupts
static void
enableInterrupts()
{
	sei();
}

/// disables global interrupts
static void
disableInterrupts()
{
	cli();
}

%% if target.family in ["xmega"]
/// Used to set the interrupt level of all modules.
enum class
InterruptLevel : uint8_t
{
	Off = 0x00,
	Low = 0x01,
	Medium = 0x02,
	High = 0x03,
};

enum class
InterruptControlLevel : uint8_t
{
	Low = PMIC_LOLVLEN_bm,
	Medium = PMIC_MEDLVLEN_bm,
	High = PMIC_HILVLEN_bm,
	All = PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm,
};

/// @cond
static constexpr uint8_t
i(InterruptLevel level) { return static_cast<uint8_t>(level); }
static constexpr uint8_t
i(InterruptControlLevel level) { return static_cast<uint8_t>(level); }
/// @endcond

/**
 * Enable one or more of the three Interrupt levels.
 *
 * In order to work with interrupts on a xMEGA you need to enable
 * interrupts in general (enableInterrupts()) and enable the
 * level you wont to work with.
 *
 * Example:
 * @code
 * using namespace modm::platform;
 * // reset all interrupt levels
 * resetInterruptLevel(InterruptControlLevel::All);
 * // set only High and Medium
 * setInterruptLevel(InterruptControlLevel::High);
 * setInterruptLevel(InterruptControlLevel::Medium);
 * enableInterrupts();
 * @endcode
 */
static inline void
enableInterruptLevel(InterruptControlLevel level)
{
	PMIC_CTRL |= i(level);
}

/**
 * Disable interrupt levels.
 */
static inline void
disableInterruptLevel(InterruptControlLevel level)
{
	PMIC_CTRL &= ~i(level);
}
%% endif

/// @}

}	// namespace platform

}	// namespace modm


#endif	// MODM_AVR_INTERRUPTS_HPP
