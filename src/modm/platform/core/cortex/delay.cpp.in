/*
 * Copyright (c) 2015-2016, Niklas Hauser
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#include "../device.hpp"
#include <modm/platform/clock/common.hpp>
#include "hardware_init.hpp"

%% if core == "cortex-m0":
	%% set loop = 4
%% elif core.startswith("cortex-m7"):
	%# Cortex-M7 is superscalar with dual issue ALU and a 6-stage pipeline
	%# _and_ branches in 1 cycle => The entire loop is in the pipeline.
	%% set loop = 1
%% else
	%% set loop = 3
%% endif

%# FIXME: Move out of this modules, maybe remove completely
%# TODO: These numbers were measured from a few example applications.
%#       A statistical analysis of the average overhead cycles is required!
%% if partname.startswith("stm32f4")
	%% set overhead = 25
%% elif partname.startswith("stm32f1")
	%% set overhead = 12
%% else
	%% set overhead = 30
%% endif

extern "C"
{

void modm_fastcode
_delay_ns(uint16_t ns)
{
	// ns_per_loop = nanoseconds per cycle times cycles per loop ({{loop}} cycles)
	asm volatile (
		".syntax unified"       "\n\t"
		"muls.n	%2, %2, %1"     "\n\t"  // multiply the overhead cycles with the ns per cycle:  1-2 cycles on cm3, up to 32 cycles on cm0
		"subs.n	%0, %0, %2"     "\n\t"  // subtract the overhead in ns from the input:          1 cycle
	"1:  subs.n	%0, %0, %1"     "\n\t"  // subtract the ns per loop from the input:             1 cycle
		"bpl.n	1b"             "\n\t"  // keep doing that while result is still positive:      2 cycles (when taken)
	:: "r" (ns), "r" (modm::clock::ns_per_loop), "r" ({{ (overhead / loop) | int}}));
	// => loop is {{loop}} cycles long
}

void modm_fastcode
_delay_us(uint16_t us)
{
	if (!us) return;    // 1 cycle, or 2 when taken

%% if core.startswith("cortex-m0") or core.startswith("cortex-m7")
	asm volatile (
		".syntax unified"       "\n\t"
		"muls.n	%0, %0, %1"     "\n\t"  // get number of cycles by us * fcpu_MHz:               1-2 cycles on cm3, up to 32 cycles on cm0
	"1:  subs.n	%0, %0, #{{loop}}"     "\n\t"  // subtract the loop cycles from the input:             1 cycle
		"bpl.n	1b"             "\n\t"  // keep doing that while result is still positive:      2 cycles (when taken)
	:: "r" (us), "r" (modm::clock::fcpu_MHz));
%% else
	uint32_t start = DWT->CYCCNT;
	// prefer this for cores with fast hardware multiplication
	int32_t delay = int32_t(modm::clock::fcpu_MHz) * us - {{ overhead }};

	while (int32_t(DWT->CYCCNT - start) < delay)
		;
%% endif
}

void modm_fastcode
_delay_ms(uint16_t ms)
{
	if (!ms) return;    // 1 cycle, or 2 when taken

%% if core.startswith("cortex-m0") or core.startswith("cortex-m7")
	asm volatile (
		".syntax unified"       "\n\t"
		"muls.n	%0, %0, %1"     "\n\t"  // get number of cycles by ms * fcpu_kHz:               1-2 cycles on cm3, up to 32 cycles on cm0
	"1:  subs.n	%0, %0, #{{loop}}"     "\n\t"  // subtract the loop cycles from the input:             1 cycle
		"bpl.n	1b"             "\n\t"  // keep doing that while result is still positive:      2 cycles (when taken)
	:: "r" (ms), "r" (modm::clock::fcpu_kHz));
%% else
	uint32_t start = DWT->CYCCNT;
	int32_t delay = int32_t(modm::clock::fcpu_kHz) * ms - {{ overhead }};

	while (int32_t(DWT->CYCCNT - start) < delay)
		;
%% endif
}

}

%% if not (core.startswith("cortex-m0") or core.startswith("cortex-m7"))
void
modm_dwt_enable(void)
{
	// Enable Tracing Debug Unit
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
	DWT->CYCCNT = 0;
	// Enable CPU cycle counter
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
}

MODM_HARDWARE_INIT_ORDER(modm_dwt_enable, 100);
%% endif
