/*
 * Copyright (c) 2018, Niklas Hauser
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#include <stdint.h>
#include <modm/architecture/utils.hpp>
#include <modm/architecture/interface/assert.h>


// ----------------------------------------------------------------------------
/*
 *	Default Interrupt Vectors for Peripherals
 */
%% for isr in vector_hooks
extern void {{vector_hooks[isr]['call']}}(void);
void {{vector_hooks[isr]['name']}}_forwarder(void)
{
	{{vector_hooks[isr]['call']}}();
}

%% endfor

// ----------------------------------------------------------------------------
extern void modm_undefined_handler(int32_t);
void Undefined_Handler(void)
{
	int32_t irqn;
	asm volatile("mrs %[irqn], ipsr" :[irqn] "=r" (irqn));
	modm_undefined_handler(irqn - 16);
}
/* Provide weak aliases for each Exception handler to Undefined_Handler.
 * As they are weak aliases, any function with the same name will override
 * this definition. */
void Reset_Handler(void)						__attribute__((noreturn));
void NMI_Handler(void)							__attribute__((weak, alias("Undefined_Handler")));
void HardFault_Handler(void)					__attribute__((weak, alias("Undefined_Handler")));
%% for pos in range(4 - 16, highest_irq + 1)
%% 	if pos in vector_table
%%   if vector_table[pos] in vector_hooks
{{ ("void " ~ vector_table[pos] ~ "(void)") | lbuild.pad(47)}}__attribute__((weak, alias("{{vector_hooks[vector_table[pos]]['name']}}_forwarder")));
%%   else
{{ ("void " ~ vector_table[pos] ~ "(void)") | lbuild.pad(47)}}__attribute__((weak, alias("Undefined_Handler")));
%%   endif
%%	endif
%% endfor

// ----------------------------------------------------------------------------
typedef void (* const FunctionPointer)(void);

// defined in the linkerscript
extern uint32_t __main_stack_top[];
extern uint32_t __process_stack_top[];

// Define the vector table
modm_section(".vector_rom")
FunctionPointer vectorsRom[] =
{
	(FunctionPointer)__main_stack_top,		// -16: stack pointer
	Reset_Handler,							// -15: code entry point
	NMI_Handler,							// -14: Non Maskable Interrupt handler
	HardFault_Handler,						// -13: hard fault handler
%% for pos in range(4 - 16, highest_irq)
%% 	if pos in vector_table
	{{ (vector_table[pos] ~ ",") | lbuild.pad(39) }}// {{ (pos|string).rjust(3) }}
%% 	else
	Undefined_Handler,						// {{ (pos|string).rjust(3) }}
%% 	endif
%% endfor
};
%% if vector_table_location == "ram"
// reserve space for the remapped vector table in RAM
modm_section(".vector_ram")
FunctionPointer vectorsRam[sizeof(vectorsRom) / sizeof(FunctionPointer)];
%% endif