%# This File includes platform independent macros for Cortex-M linkerscripts
%% macro copyright()
/*
 * Copyright (c) 2011-2012, 2019, Fabian Greif
 * Copyright (c) 2012, 2015-2022, Niklas Hauser
 * Copyright (c) 2013, Sascha Schade
 * Copyright (c) 2013, 2015, Kevin LÃ¤ufer
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * ------------------------------------------------------------------------- */
%% endmacro

%% macro prefix()
OUTPUT_FORMAT("elf32-littlearm")
OUTPUT_ARCH(arm)
ENTRY(Reset_Handler)

MEMORY
{
	%% for memory in memories
	{{ memory.name | upper }} ({{ memory.access }}) : ORIGIN = {{ "0x%08X" % memory.start }}, LENGTH = {{ memory.size }}
	%% endfor
	%% for memory in cont_ram_regions
	%% if memory.cont_name != memory.name
	{{ memory.cont_name | upper }} ({{ memory.access }}) : ORIGIN = {{ "0x%08X" % memory.start }}, LENGTH = {{ memory.size }}
	%% endif
	%% endfor
	%% if linkerscript_memory
{{ linkerscript_memory | indent(first=True) }}
	%% endif
}

	%% for memory in memories
__{{memory.name}}_start = ORIGIN({{memory.name|upper}});
__{{memory.name}}_end = ORIGIN({{memory.name|upper}}) + LENGTH({{memory.name|upper}});
	%% endfor
	%#

MAIN_STACK_SIZE = {{ options[":platform:cortex-m:main_stack_size"] }};
%% endmacro


%% macro section_vector_rom(memory)
	/* Read-only vector table in {{memory}} */
	.text :
	{
		__vector_table_rom_start = .;
		__vector_table_ram_load = .;
		KEEP(*(.vector_rom))
		__vector_table_rom_end = .;
	} >{{memory}}
%% endmacro


%% macro section_vector_ram(memory, table_copy)
	/* Read-Write vector table in {{memory}} */
	%% do table_copy.append("vector_table_ram")
	.vectors (NOLOAD) :
	{
		__vector_table_ram_start = .;
		KEEP(*(.vector_ram))
		. = ALIGN(4);
		__vector_table_ram_end = .;
	} >{{memory}}
%% endmacro


%% macro section_stack(memory, start=None, suffix="")
	/* Main stack{{suffix}} in {{memory}} */
	.stack{{suffix}} (NOLOAD) :
	{
	%% if start != None
		. += {{start}};
	%% endif
		__stack{{suffix}}_start = .;

		. += MAIN_STACK_SIZE;
		. = ALIGN(8);
		__main{{suffix}}_stack_top = .;

		__stack{{suffix}}_end = .;
	} >{{memory}}
%% endmacro


%% macro section_tables(memory, copy, zero, heap)
	/* Memory layout configuration tables */
	.rodata :
	{
		. = ALIGN(4);
		__table_zero_intern_start = .;
	%% for name in zero
		LONG(__{{name}}_start)
		LONG(__{{name}}_end)
	%% endfor
		__table_zero_intern_end = .;

		__table_copy_intern_start = .;
	%% for name in copy
		LONG(__{{name}}_load)
		LONG(__{{name}}_start)
		LONG(__{{name}}_end)
	%% endfor
		__table_copy_intern_end = .;

		__table_zero_extern_start = .;
	%% if linkerscript_extern_zero
{{ linkerscript_extern_zero | indent(8, first=True) }}
	%% endif
		__table_zero_extern_end = .;

		__table_copy_extern_start = .;
	%% if linkerscript_extern_copy
{{ linkerscript_extern_copy | indent(8, first=True) }}
	%% endif
		__table_copy_extern_end = .;

		/* See `modm:architecture:memory` for bitmask */
		__table_heap_start = .;
	%% for section in heap
		LONG({{ section.prop }})
		LONG(__{{ section.name }}_start)
		LONG(__{{ section.name }}_end)
	%% endfor
	%% if linkerscript_extern_heap
{{ linkerscript_extern_heap | indent(8, first=True) }}
	%% endif
		__table_heap_end = .;
	} >{{memory}}
%% endmacro

%% macro section_load(memory, table_copy, sections)
	%% do table_copy.extend(sections)
	%% for section in sections
	%#
	.{{section}} :
	{
		__{{section}}_load = LOADADDR(.{{section}});
		__{{section}}_start = .;
		*(.{{section}} .{{section}}.*)
		. = ALIGN(4);
		__{{section}}_end = .;
	} >{{memory}}
	%% endfor
%% endmacro


%% macro section_heap(memory, name, placement=None, sections=[])
	%% for section in sections
	.{{section}} (NOLOAD) :
	{
		. = ALIGN(4);
		__{{section}}_start = .;
		*(.{{section}} .{{section}}.*)
		. = ALIGN(4);
		__{{section}}_end = .;
	} >{{ placement if placement else memory }}
	%#
	%% endfor
	.{{name}} (NOLOAD) :
	{
		. = ALIGN(4);
		__{{name}}_start = .;
		. = MAX(ABSOLUTE(.), ORIGIN({{memory}}) + LENGTH({{memory}}));
		__{{name}}_end = .;
	} >{{ placement if placement else memory }}
%% endmacro


%% macro all_heap_sections(table_copy, table_zero, table_heap, props={})
	%% for cont_region in cont_ram_regions
		%% for region in cont_region.contains
	/* Sections in {{ region.name|upper }} */
			%% if region.index
{{ section_load(cont_region.cont_name|upper + " AT >FLASH", table_copy, sections=["data_"+region.name]) }}
				%% do table_zero.append("bss_"+region.name)
			%% endif
{{ section_heap(region.name|upper, "heap_"+region.name, cont_region.cont_name|upper,
				sections=(["bss_"+region.name] if region.index else []) + ["noinit_"+region.name]) }}
			%% for name, value in props.items() if name in region.name
				%% do table_heap.insert(region.index, {"name": "heap_"+region.name, "prop": value})
			%% else
				%% do table_heap.insert(region.index, {"name": "heap_"+region.name, "prop": "0x001f"})
			%% endfor
			%#
		%% endfor
	%% endfor
%% endmacro


%% macro section_rom(memory)
	/* Read-only sections in {{memory}} */
	.text :
	{
		*(.text .text.* .gnu.linkonce.t.*)
	} >{{memory}}

	.rodata :
	{
		*(.rodata .rodata.* .gnu.linkonce.r.*)
		KEEP(*(.init))

		. = ALIGN(4);
		__init_array_start = .;
		KEEP(*(SORT(.init_array.*)))
		KEEP(*(.init_array))
		. = ALIGN(4);
		__init_array_end = .;

		__hardware_init_start = .;
		KEEP(*(SORT(.hardware_init.order_*)))
		KEEP(*(SORT(.hardware_init)))
		. = ALIGN(4);
		__hardware_init_end = .;

		__assertion_table_start = .;
		KEEP(*(.assertion))
		. = ALIGN(4);
		__assertion_table_end = .;
	} >{{memory}}

	.build_id :
	{
		__build_id = .;
		KEEP(*(.note.gnu.build-id))
	} >{{memory}}

	/* We do not call static destructors ever */
	/DISCARD/ :
	{
		*(.fini_array .fini_array.*)
	}
	%% if with_cpp_exceptions
	%#
	/* C++ exception unwind tables */
	.exidx :
	{
		. = ALIGN(4);
		__exidx_start = .;
		*(.ARM.exidx* .gnu.linkonce.armexidx.*)
		. = ALIGN(4);
		__exidx_end = .;
	} >{{memory}}

	.extab :
	{
		*(.ARM.extab* .gnu.linkonce.armextab.*)
		KEEP(*(.eh_frame*))
	} >{{memory}}
	%% else
	%#
	/* C++ exception unwind tables are discarded */
	/DISCARD/ :
	{
		*(.ARM.extab* .gnu.linkonce.armextab.*)
		*(.ARM.exidx* .gnu.linkonce.armexidx.*)
		*(.eh_frame*)
	}
	%% endif
	%% if not with_heap
	%#
	/* Catch use of dynamic memory without `modm:platform:heap` module. */
	/DISCARD/ :
	{
		*({{no_heap_section}})
	}
	%% endif
%% endmacro


%% macro section_ram(memory, rom, table_copy, table_zero, sections_data=[], sections_bss=[], sections_noinit=[])
	/* Read-write sections in {{memory}} */
	%% do table_copy.append("data")
	.data :
	{
		. = ALIGN(4);
		__data_load = LOADADDR(.data);
		__data_start = .;
		*(.data .data.* .gnu.linkonce.d.*)
		. = ALIGN(4);
		__data_end = .;
	} >{{memory}} AT >{{rom}}
	%% do table_copy.extend(sections_data)
	%% for section in sections_data
	%#
	.{{section}} :
	{
		__{{section}}_load = LOADADDR(.{{section}});
		__{{section}}_start = .;
		*(.{{section}} .{{section}}.*)
		. = ALIGN(4);
		__{{section}}_end = .;
	} >{{memory}} AT >{{rom}}
	%% endfor
	%#
	%% do table_zero.append("bss")
	.bss (NOLOAD) :
	{
		__bss_start = . ;
		*(.bss .bss.* .gnu.linkonce.b.*)
		. = ALIGN(4);
	%% for section in sections_bss
	} >{{memory}}
	%#
	.{{section}} (NOLOAD) :
	{
		__{{section}}_start = . ;
		*(.{{section}} .{{section}}.*)
		. = ALIGN(4);
		__{{section}}_end = .;
	%% endfor
		__bss_end = .;
	} >{{memory}}
	%#
	%% do sections_noinit.insert(0, "noinit")
	%% for section in sections_noinit
	%#
	.{{section}} (NOLOAD) :
	{
		__{{section}}_start = . ;
		*(.{{section}} .{{section}}.*)
		. = ALIGN(4);
		__{{section}}_end = .;
	} >{{memory}}
	%% endfor
%% endmacro


%% macro section_rom_start(rom)
	__rom_start = ORIGIN({{rom}});
%% endmacro

%% macro section_rom_end(rom)
	. = ALIGN(4);
	__rom_end = .;
%% endmacro


%% macro section_debug()
	/* DWARF debug sections */
	.debug_abbrev   0 : { *(.debug_abbrev) }
	.debug_aranges  0 : { *(.debug_aranges) }
	.debug_frame    0 : { *(.debug_frame) }
	.debug_info     0 : { *(.debug_info) }
	.debug_line     0 : { *(.debug_line) }
	.debug_loc      0 : { *(.debug_loc) }
	.debug_macinfo  0 : { *(.debug_macinfo) }
	.debug_pubnames 0 : { *(.debug_pubnames) }
	.debug_pubtypes 0 : { *(.debug_pubtypes) }
	.debug_ranges   0 : { *(.debug_ranges) }
	.debug_str      0 : { *(.debug_str) }

	.comment 0 : { *(.comment) }
	.ARM.attributes 0 : { KEEP(*(.ARM.attributes)) }
	/DISCARD/ : { *(.note.GNU-stack)  }
%% endmacro
