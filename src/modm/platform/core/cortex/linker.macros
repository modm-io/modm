%# This File includes platform independent macros for Cortex-M linkerscripts
%% macro copyright()
/*
 * Copyright (c) 2011-2012, 2019, Fabian Greif
 * Copyright (c) 2012, 2015-2018, Niklas Hauser
 * Copyright (c) 2013, Sascha Schade
 * Copyright (c) 2013, 2015, Kevin LÃ¤ufer
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * ------------------------------------------------------------------------- */
%% endmacro

%% macro prefix()
MEMORY
{
%% for memory in memories
	{{ memory.name | upper }} ({{ memory.access }}) : ORIGIN = {{ "0x%08X" % memory.start }}, LENGTH = {{ memory.size }}
%% endfor
	RAM (rwx) : ORIGIN = {{ "0x%08X" % ram_origin }}, LENGTH = {{ ram_size }}
{{ linkerscript_memory | indent(first=True) }}
}

OUTPUT_FORMAT("elf32-littlearm")
OUTPUT_ARCH(arm)

/* First executable instruction in an output file */
ENTRY(Reset_Handler)

/* the thread stack is used only for reporting hard fault conditions! It may therefore be small. */
PROCESS_STACK_SIZE  = {{ process_stack_size }};
/* the handler stack is used for main program as well as interrupts */
MAIN_STACK_SIZE     = {{ options[":platform:cortex-m:main_stack_size"] }};
/* combined stack size */
TOTAL_STACK_SIZE = MAIN_STACK_SIZE + PROCESS_STACK_SIZE;
%% endmacro


%% macro section_vector_rom(memory)
	.vector_rom :
	{
		__vector_table_rom_start = .;
		__vector_table_ram_load = .;
		/* Initial stack address, Reset and NMI handler */
		KEEP(*(.vector_rom))
		. = ALIGN(4);
	} >{{memory}}
%% endmacro


%% macro section_vector_ram(memory)
	.vector_ram (NOLOAD) :  /* Vector table in RAM, only if remapped */
	{
		__vector_table_ram_start = .;

		/* used for vectors remapped to RAM */
		KEEP(*(.vector_ram))

		. = ALIGN(4);
		__vector_table_ram_end = .;
	} >{{memory}}
%% endmacro


%% macro section_fastcode_in_flash()
	.fastcode : ALIGN(4)
	{
		*(.fastcode)
	} >FLASH
%% endmacro


%% macro section_stack(memory, start=None)
	.stack (NOLOAD) :
	{
	%% if start != None
		. = {{ start }};
	%% endif
		__stack_start = .;

		. += MAIN_STACK_SIZE;
		. = ALIGN(8);
		__main_stack_top = .;

		. += PROCESS_STACK_SIZE;
		. = ALIGN(8);
		__process_stack_top = .;

		__stack_end = .;
	} >{{memory}}
%% endmacro


%% macro section_table_zero(sections)
	.table.zero.intern : ALIGN(4)
	{
		__table_zero_intern_start = .;
	%% for section in sections
		LONG(__{{section}}_start)
		LONG(__{{section}}_end)
	%% endfor
		__table_zero_intern_end = .;
	} >FLASH
%% endmacro


%% macro section_table_copy(sections)
	%% if vector_table_location == "ram"
		%% do sections.append("vector_table_ram")
	%% endif
	.table.copy.intern : ALIGN(4)
	{
		__table_copy_intern_start = .;
	%% for section in sections
		LONG(__{{section}}_load)
		LONG(__{{section}}_start)
		LONG(__{{section}}_end)
	%% endfor
		__table_copy_intern_end = .;
	} >FLASH
%% endmacro


%% macro section_table_extern()
	.table.zero.extern : ALIGN(4)
	{
		__table_zero_extern_start = .;
{{ linkerscript_extern_zero | indent(8, first=True) }}
		__table_zero_extern_end = .;
	} >FLASH

	.table.copy.extern : ALIGN(4)
	{
		__table_copy_extern_start = .;
{{ linkerscript_extern_copy | indent(8, first=True) }}
		__table_copy_extern_end = .;
	} >FLASH
%% endmacro


%% macro section_table_heap(sections)
	/* SRAM properties bit mask (16-bit):
	 *
	 * - 0x0001: accessible via S-Bus
	 * - 0x0002: accessible via D-Bus
	 * - 0x0004: accessible via I-Bus
	 * - 0x0008: accessible via DMA
	 * - 0x0010: accessible via DMA2D
	 *
	 * - 0x1FE0: reserved
	 *
	 * - 0x2000: Fast memory (Core- or Tightly-Coupled)
	 * - 0x4000: non-volatile (or battery backed) memory
	 * - 0x8000: external memory
	 */
	.table.heap : ALIGN(4)
	{
		__table_heap_start = .;
	%% for section in sections
		LONG({{ section.prop }})
		LONG(__{{ section.name }}_start)
		LONG(__{{ section.name }}_end)
	%% endfor
{{ linkerscript_extern_heap | indent(8, first=True) }}
		__table_heap_end = .;
	} >FLASH
%% endmacro


%% macro section(memory, name)
	.{{name}} : ALIGN(4)
	{
		__{{name}}_load = LOADADDR(.{{name}});
		__{{name}}_start = .;

		*(.{{name}})

		. = ALIGN(4);
		__{{name}}_end = .;
	} >{{memory}}
%% endmacro


%% macro section_heap(memory, name)
	.{{name}} (NOLOAD) :
	{
		__{{name}}_start = .;

		. = ORIGIN({{memory}}) + LENGTH({{memory}});
		__{{name}}_end = .;
	} >{{ "RAM" if "RAM" in memory else memory }}
%% endmacro


%% macro section_rom(memory)
	.text : ALIGN(4)
	{
		*(.text .text.* .gnu.linkonce.t.*)
	} >{{memory}}

	.rodata : ALIGN(4)
	{
		*(.rodata .rodata.* .gnu.linkonce.r.*)
		KEEP(*(.init))

		. = ALIGN(4);
		PROVIDE_HIDDEN(__preinit_array_start = .);
		KEEP(*(.preinit_array))
		PROVIDE_HIDDEN(__preinit_array_end = .);

		. = ALIGN(4);
		PROVIDE_HIDDEN(__init_array_start = .);
		KEEP(*(SORT(.init_array.*)))
		KEEP(*(.init_array))
		PROVIDE_HIDDEN(__init_array_end = .);

%% if 0
		/* These are for static constructors and destructors under ELF */
		PROVIDE(__ctors_start__ = .);
		KEEP(*crtbegin.o(.ctors))
		KEEP(*(EXCLUDE_FILE (*crtend.o) .ctors))
		KEEP(*(SORT(.ctors.*)))
		KEEP(*crtend.o(.ctors))
		PROVIDE(__ctors_end__ = .);

		%# We never call destructors
		KEEP(*(.fini))

		PROVIDE_HIDDEN(__fini_array_start = .);
		KEEP(*(.fini_array))
		KEEP(*(SORT(.fini_array.*)))
		PROVIDE_HIDDEN(__fini_array_end = .);

		PROVIDE(__dtors_start__ = .);
		KEEP(*crtbegin.o(.dtors))
		KEEP(*(EXCLUDE_FILE (*crtend.o) .dtors))
		KEEP(*(SORT(.dtors.*)))
		KEEP(*crtend.o(.dtors))
		PROVIDE(__dtors_end__ = .);
%% endif
	} >{{memory}}

%% if 0
	/* Unwind tables are used to unwind the stack for C++ exceptions. */
	%# On modm these are disabled by default, so these sections are empty.
	.ARM.extab : ALIGN(4)
	{
		*(.ARM.extab* .gnu.linkonce.armextab.*)
	} >{{memory}}

	.ARM.exidx : ALIGN(4)
	{
		__exidx_start = .;
		*(.ARM.exidx* .gnu.linkonce.armexidx.*)
		__exidx_end = .;
	} >{{memory}}

	.eh_frame : ALIGN(4)
	{
		KEEP(*(.eh_frame*))
	} >{{memory}}
%% endif

	/* Hardware init table */
	.hardware_init : ALIGN(4)
	{
		__hardware_init_start = .;
		/* Table symbols are alphabetically sorted! */
		KEEP(*(SORT(.hardware_init*)))
		__hardware_init_end = .;
	} >{{memory}}

	/* Assertion handler table */
	.assertion : ALIGN(4)
	{
		__assertion_table_start = .;
		KEEP(*(.assertion))
		__assertion_table_end = .;
	} >{{memory}}
%% endmacro


%% macro section_ram(memory)
	/* initialized variables */
	.data : ALIGN(4)
	{
		__data_load = LOADADDR(.data);
		__data_start = .;
		*(.data .data.* .gnu.linkonce.d.*)
		. = ALIGN(4);
		__data_end = .;
	} >{{memory}} AT >FLASH

	/* uninitialized variables */
	.bss (NOLOAD) :
	{
		__bss_start = . ;
		*(.bss .bss.* .gnu.linkonce.b.*)
		. = ALIGN(4);
		__bss_end = .;
	} >{{memory}}

	/* Global data not cleared after reset.  */
	.noinit (NOLOAD) :
	{
		__noinit_start = .;
		*(.noinit*)
		. = ALIGN(4);
		__noinit_end = .;
	} >{{memory}}
%% endmacro


%% macro section_end()
%% if 0
	. = ALIGN(4);
	_end = . ;
	__end = . ;
	PROVIDE(end = .);
%% endif
%% endmacro


%% macro section_debug()
	/* DWARF debug sections */
	.debug_abbrev   0 : { *(.debug_abbrev) }
	.debug_aranges  0 : { *(.debug_aranges) }
	.debug_frame    0 : { *(.debug_frame) }
	.debug_info     0 : { *(.debug_info) }
	.debug_line     0 : { *(.debug_line) }
	.debug_loc      0 : { *(.debug_loc) }
	.debug_macinfo  0 : { *(.debug_macinfo) }
	.debug_pubnames 0 : { *(.debug_pubnames) }
	.debug_pubtypes 0 : { *(.debug_pubtypes) }
	.debug_ranges   0 : { *(.debug_ranges) }
	.debug_str      0 : { *(.debug_str) }

	.comment 0 : { *(.comment) }
	.ARM.attributes 0 : { KEEP(*(.ARM.attributes)) }
	/DISCARD/ : { *(.note.GNU-stack)  }
%% endmacro
