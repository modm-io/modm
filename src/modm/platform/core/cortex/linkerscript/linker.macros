%# Copyright (c) 2011-2012, Fabian Greif
%# Copyright (c) 2012, 2015-2017, Niklas Hauser
%# Copyright (c) 2013, Sascha Schade
%# Copyright (c) 2013, 2015, Kevin LÃ¤ufer
%#
%# This file is part of the modm project.
%#
%# This Source Code Form is subject to the terms of the Mozilla Public
%# License, v. 2.0. If a copy of the MPL was not distributed with this
%# file, You can obtain one at http://mozilla.org/MPL/2.0/.
%# ----------------------------------------------------------------------------

%# This File includes platform independent macros for Cortex-M linkerscripts


%% macro prefix(regions)
%% set ram_sizes = []
%% set ram_origin = []

INCLUDE peripherals.ld

MEMORY
{
%% for memory in driver["memory"]
	{{ memory["name"] | upper }} ({{ memory["access"] }}) : ORIGIN = {{ memory["start"] }}, LENGTH = {{ memory["size"] }}
	%% do regions.append(memory["name"])
	%% if 'sram1' == memory["name"]
		%% do ram_origin.append(memory["start"])
	%% endif
	%% if 'sram' in memory["name"]
		%% do ram_sizes.append(memory["size"] | int)
	%% endif
%% endfor
	RAM (rwx) : ORIGIN = {{ ram_origin[0] }}, LENGTH = {{ ram_sizes | sum }}
	{{ options["linkerscript.memory"] }}
}

OUTPUT_FORMAT("elf32-littlearm", "elf32-bigarm", "elf32-littlearm")
OUTPUT_ARCH(arm)

/* First executable instruction in an output file */
ENTRY(Reset_Handler)

/* force linker to include the syscalls from libmodm.a */
EXTERN(_sbrk_r)
EXTERN(_init)

PROVIDE(__ram_start = ORIGIN(RAM));
PROVIDE(__ram_end   = ORIGIN(RAM) + LENGTH(RAM));
PROVIDE(__rom_start = ORIGIN(FLASH));
PROVIDE(__rom_end   = ORIGIN(FLASH) + LENGTH(FLASH));

/* the thread stack is used only for reporting hard fault conditions! It may therefore be small. */
%% if hardfault_led == "disabled"
	%% set pss = 0
%% else
	%% set pss = 32
%% endif
PROCESS_STACK_SIZE  = {{ pss }};
/* the handler stack is used for main program as well as interrupts */
MAIN_STACK_SIZE     = {{ options.main_stack_size }};
/* combined stack size */
TOTAL_STACK_SIZE = MAIN_STACK_SIZE + PROCESS_STACK_SIZE;
%% endmacro


%% macro section_reset(memory)
	.reset :
	{
		__vector_table_rom_start = .;
		__vector_table_ram_load = .;
		/* Initial stack address, Reset and NMI handler */
		KEEP(*(.reset))
		. = ALIGN(4);
	} >{{memory}}
%% endmacro


%% macro section_vectors(memory)
	.vectors :  /* Vector table in RAM, only if remapped */
	{
		__vector_table_ram_start = .;

		/* used for vectors remapped to RAM */
		KEEP(*(.vectors))

		. = ALIGN(4);
		__vector_table_ram_end = .;
	} >{{memory}}
%% endmacro


%% macro section_fastcode_in_flash()
	.fastcode : ALIGN(4)
	{
		/* From the Cortex-M3 Technical Reference Manual:
		 *
		 * """
		 * 14.5 System Interface:
		 *
		 * The system interface is a 32-bit AHB-Lite bus. Instruction and vector fetches, and data and debug accesses to
		 * the System memory space, 0x20000000 - 0xDFFFFFFF, 0xE0100000 - 0xFFFFFFFF, are performed over this bus.
		 *
		 * 14.5.6 Pipelined instruction fetches:
		 *
		 * To provide a clean timing interface on the System bus, instruction and vector fetch requests to this bus are
		 * registered. This results in an additional cycle of latency because instructions fetched from the System bus
		 * take two cycles. This also means that back-to-back instruction fetches from the System bus are not possible.
		 *
		 *  Note:
		 *    Instruction fetch requests to the ICode bus are not registered.
		 *    Performance critical code must run from the ICode interface.
		 *
		 * """
		 *
		 * So for STM32's where the CCM is _not_ connected to the I-Bus, we execute .fastcode from Flash.
		 */
		*(.fastcode)
	} >FLASH
%% endmacro


%% macro section_stack(memory, start)
	.stack (NOLOAD) :
	{
	%% if start != None
		. = {{ start }};
	%% endif
		__stack_start = .;

		. += MAIN_STACK_SIZE;
		. = ALIGN(8);
		__main_stack_top = .;

		. += PROCESS_STACK_SIZE;
		. = ALIGN(8);
		__process_stack_top = .;

		__stack_end = .;
	} >{{memory}}
%% endmacro


%% macro section_table_zero(sections)
	.table.zero.intern : ALIGN(4)
	{
		__table_zero_intern_start = .;
	%% for section in sections
		LONG(__{{section}}_start)
		LONG(__{{section}}_end)
	%% endfor
		__table_zero_intern_end = .;
	} >FLASH
%% endmacro


%% macro section_table_copy(sections)
	.table.copy.intern : ALIGN(4)
	{
		__table_copy_intern_start = .;
	%% for section in sections
		LONG(__{{section}}_load)
		LONG(__{{section}}_start)
		LONG(__{{section}}_end)
	%% endfor
		__table_copy_intern_end = .;
	} >FLASH
%% endmacro


%% macro section_table_extern()
	.table.zero.extern : ALIGN(4)
	{
		__table_zero_extern_start = .;
		{{ options["linkerscript.table_extern.zero"] }}
		__table_zero_extern_end = .;
	} >FLASH

	.table.copy.extern : ALIGN(4)
	{
		__table_copy_extern_start = .;
		{{ options["linkerscript.table_extern.copy"] }}
		__table_copy_extern_end = .;
	} >FLASH
%% endmacro


%% macro section_table_heap(sections)
	/* SRAM properties bit mask (16-bit):
	 *
	 * - 0x0001: accessible via S-Bus
	 * - 0x0002: accessible via D-Bus
	 * - 0x0004: accessible via I-Bus
	 * - 0x0008: accessible via DMA
	 * - 0x0010: accessible via DMA2D
	 *
	 * - 0x1FE0: reserved
	 *
	 * - 0x2000: Fast memory (Core- or Tightly-Coupled)
	 * - 0x4000: non-volatile (or battery backed) memory
	 * - 0x8000: external memory
	 */
	.table.section_heap : ALIGN(4)
	{
		__table_heap_start = .;
	%% for section in sections
		LONG({{ section['prop'] }})
		LONG(__{{ section['name'] }}_start)
		LONG(__{{ section['name'] }}_end)
	%% endfor
		{{ options["linkerscript.table_extern.heap"] }}
		__table_heap_end = .;
	} >FLASH
%% endmacro


%% macro section(memory, name)
	.{{name}} : ALIGN(4)
	{
		__{{name}}_load = LOADADDR(.{{name}});
		__{{name}}_start = .;

		*(.{{name}})

		. = ALIGN(4);
		__{{name}}_end = .;
	} >{{memory}}
%% endmacro


%% macro section_heap(memory, name)
	.{{name}} (NOLOAD) :
	{
		__{{name}}_start = .;

		. = ORIGIN({{memory}}) + LENGTH({{memory}});
		__{{name}}_end = .;
	} >{{ "RAM" if "RAM" in memory else memory }}
%% endmacro


%% macro section_rom(memory)
	.text : ALIGN(4)
	{
		*(.text .text.* .gnu.linkonce.t.*)
	} >{{memory}}

	.rodata : ALIGN(4)
	{
		*(.rodata .rodata.* .gnu.linkonce.r.*)

		. = ALIGN(4);
		KEEP(*(.init))

		. = ALIGN(4);
		PROVIDE_HIDDEN(__preinit_array_start = .);
		KEEP(*(.preinit_array))
		PROVIDE_HIDDEN(__preinit_array_end = .);

		. = ALIGN(4);
		PROVIDE_HIDDEN(__init_array_start = .);
		KEEP(*(SORT(.init_array.*)))
		KEEP(*(.init_array))
		PROVIDE_HIDDEN(__init_array_end = .);

		. = ALIGN(4);
		KEEP(*(.fini))

		. = ALIGN(4);
		PROVIDE_HIDDEN(__fini_array_start = .);
		KEEP(*(.fini_array))
		KEEP(*(SORT(.fini_array.*)))
		PROVIDE_HIDDEN(__fini_array_end = .);

		/* These are for static constructors and destructors under ELF */
		PROVIDE(__ctors_start__ = .);
		KEEP(*crtbegin.o(.ctors))
		KEEP(*(EXCLUDE_FILE (*crtend.o) .ctors))
		KEEP(*(SORT(.ctors.*)))
		KEEP(*crtend.o(.ctors))
		PROVIDE(__ctors_end__ = .);

		/* We never call static constructors
		PROVIDE(__dtors_start__ = .);
		KEEP(*crtbegin.o(.dtors))
		KEEP(*(EXCLUDE_FILE (*crtend.o) .dtors))
		KEEP(*(SORT(.dtors.*)))
		KEEP(*crtend.o(.dtors))
		PROVIDE(__dtors_end__ = .);
		*/

		*(.init .init.*)
		*(.fini .fini.*)
	} >{{memory}}

	/* Unwind tables are used to unwind the stack for C++ exceptions.
	 * On modm these are disabled by default, so these sections are empty.
	.ARM.extab : ALIGN(4)
	{
		*(.ARM.extab* .gnu.linkonce.armextab.*)
	} >{{memory}}

	.ARM.exidx : ALIGN(4)
	{
		__exidx_start = .;
		*(.ARM.exidx* .gnu.linkonce.armexidx.*)
		__exidx_end = .;
	} >{{memory}}

	.eh_frame : ALIGN(4)
	{
		KEEP(*(.eh_frame*))
	} >{{memory}}
	 */

	/* Hardware init table */
	.hardware_init : ALIGN(4)
	{
		__hardware_init_start = .;
		/* Table symbols are alphabetically sorted! */
		KEEP(*(SORT(.hardware_init*)))
		__hardware_init_end = .;
	} >{{memory}}

	/* Assertion handler table */
	.assertion : ALIGN(4)
	{
		__assertion_table_start = .;
		KEEP(*(.assertion))
		__assertion_table_end = .;
	} >{{memory}}
%% endmacro


%% macro section_ram(memory)
	/* initialized variables */
	.data : ALIGN(4)
	{
		__data_load = LOADADDR(.data);
		__data_start = .;
		*(.data .data.* .gnu.linkonce.d.*)
		. = ALIGN(4);
		__data_end = .;
	} >{{memory}} AT >FLASH

	/* uninitialized variables */
	.bss :
	{
		__bss_start = . ;
		*(.bss .bss.* .gnu.linkonce.b.*)
		. = ALIGN(4);
		__bss_end = .;
	} >{{memory}}

	/* Global data not cleared after reset.  */
	.noinit (NOLOAD) :
	{
		__noinit_start = .;
		*(.noinit*)
		. = ALIGN(4);
		__noinit_end = .;
	} >{{memory}}
%% endmacro


%% macro section_end()
/*
	. = ALIGN(4);
	_end = . ;
	__end = . ;
	PROVIDE(end = .);
*/
%% endmacro


%% macro section_debug()
	/* Stabs debugging sections.  */
	.stab          0 : { *(.stab) }
	.stabstr       0 : { *(.stabstr) }
	.stab.excl     0 : { *(.stab.excl) }
	.stab.exclstr  0 : { *(.stab.exclstr) }
	.stab.index    0 : { *(.stab.index) }
	.stab.indexstr 0 : { *(.stab.indexstr) }
	.comment       0 : { *(.comment) }

	/* DWARF debug sections.
	 Symbols in the DWARF debugging sections are relative to the beginning
	 of the section so we begin them at 0.  */

	/* DWARF 1 */
	.debug          0 : { *(.debug) }
	.line           0 : { *(.line) }
	/* GNU DWARF 1 extensions */
	.debug_srcinfo  0 : { *(.debug_srcinfo) }
	.debug_sfnames  0 : { *(.debug_sfnames) }
	/* DWARF 1.1 and DWARF 2 */
	.debug_aranges  0 : { *(.debug_aranges) }
	.debug_pubnames 0 : { *(.debug_pubnames) }
	/* DWARF 2 */
	.debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
	.debug_abbrev   0 : { *(.debug_abbrev) }
	.debug_line     0 : { *(.debug_line) }
	.debug_frame    0 : { *(.debug_frame) }
	.debug_str      0 : { *(.debug_str) }
	.debug_loc      0 : { *(.debug_loc) }
	.debug_macinfo  0 : { *(.debug_macinfo) }
	/* SGI/MIPS DWARF 2 extensions */
	.debug_weaknames 0 : { *(.debug_weaknames) }
	.debug_funcnames 0 : { *(.debug_funcnames) }
	.debug_typenames 0 : { *(.debug_typenames) }
	.debug_varnames  0 : { *(.debug_varnames) }
	.debug_varnames  0 : { *(.debug_varnames) }

	.note.gnu.arm.ident 0 : { KEEP(*(.note.gnu.arm.ident)) }
	.ARM.attributes 0 : { KEEP(*(.ARM.attributes)) }
	/DISCARD/ : { *(.note.GNU-stack)  }
%% endmacro
