#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2016-2018, Niklas Hauser
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

def get_properties(env):
    device = env[":target"]
    driver = device.get_driver("tim")
    properties = device.properties
    properties["target"] = device.identifier
    properties["partname"] = device.partname
    properties["driver"] = driver
    return properties

def get_connectors(instance):
    if instance in [1, 8]:
        return ["Channel1", "Channel1N", "Channel2", "Channel2N",
                "Channel3", "Channel3N", "Channel4", "Channel4N",
                "ExternalTrigger", "BreakIn"]
    elif instance in [2, 3, 4, 5, 19]:
        return ["Channel1", "Channel2", "Channel3", "Channel4", "ExternalTrigger"]
    elif instance in [9, 12]:
        return ["Channel1", "Channel2"]
    elif instance in [10, 11, 13, 14]:
        return ["Channel1"]
    elif instance in [15, 16, 17]:
        return ["Channel1", "Channel1N", "Channel2", "BreakIn"]
    return []

class Instance(Module):
    def __init__(self, driver, instance):
        self.driver = driver
        self.instance = int(instance)

    def init(self, module):
        module.name = str(self.instance)
        module.description = "Timer {} instance".format(self.instance)

    def prepare(self, module, options):
        module.depends(":platform:timer")
        return True

    def build(self, env):
        properties = get_properties(env)
        properties["id"] = int(self.instance)

        properties["connectors"] = get_connectors(self.instance)
        properties["apb_post"] = "1" if properties["target"]["family"] in ["l4"] else ""

        env.substitutions = properties
        env.outbasepath = "modm/src/modm/platform/timer"

        source_timer = "general_purpose"
        if self.instance in [1, 8]:
            source_timer = "advanced"
        elif self.instance in [6, 7, 18]:
            source_timer = "basic"

        env.template(source_timer + ".hpp.in", "timer_{}.hpp".format(self.instance))
        env.template(source_timer + ".cpp.in", "timer_{}.cpp".format(self.instance))


def init(module):
    module.name = "timer"
    module.parent = "platform"

def prepare(module, options):
    device = options[":target"]
    if not device.has_driver("tim:stm32*"):
        return False

    module.depends(
        ":architecture:register",
        ":cmsis:device",
        ":platform:gpio")

    for driver in device.get_all_drivers("tim"):
        for instance in driver["instance"]:
            module.add_submodule(Instance(driver, instance))

    return True

def build(env):
    env.substitutions = get_properties(env)
    env.outbasepath = "modm/src/modm/platform/timer"

    env.template("basic_base.hpp.in")
    env.template("general_purpose_base.hpp.in")
    env.template("advanced_base.hpp.in")
