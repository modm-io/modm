/*
 * Copyright (c) 2009, Martin Rosekeit
 * Copyright (c) 2009-2012, 2016-2017, Fabian Greif
 * Copyright (c) 2011-2012, Georgi Grinshpun
 * Copyright (c) 2013, 2016, Kevin LÃ¤ufer
 * Copyright (c) 2014, Sascha Schade
 * Copyright (c) 2014, 2016-2017, Niklas Hauser
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#include "timer_{{ id }}.hpp"
#include <modm/platform/clock/rcc.hpp>

// ----------------------------------------------------------------------------
void
modm::platform::Timer{{ id }}::clockEnable()
{
	enable();
}

void
modm::platform::Timer{{ id }}::enable()
{
	Rcc::enable<Peripheral::Tim{{id}}>();
}

void
modm::platform::Timer{{ id }}::disable()
{
	TIM{{ id }}->CR1 = 0;
	TIM{{ id }}->DIER = 0;
	TIM{{ id }}->CCER = 0;

	Rcc::disable<Peripheral::Tim{{id}}>();
}

bool
modm::platform::Timer{{ id }}::isEnabled()
{
	return Rcc::isEnabled<Peripheral::Tim{{id}}>();
}

// ----------------------------------------------------------------------------
void
modm::platform::Timer{{ id }}::setMode(Mode mode, SlaveMode slaveMode,
		SlaveModeTrigger slaveModeTrigger, MasterMode masterMode,
		bool enableOnePulseMode, bool bufferAutoReloadRegister,
		bool limitUpdateEventRequestSource)
{
	// disable timer
	TIM{{ id }}->CR1 = 0;
	TIM{{ id }}->CR2 = 0;

	%% if id != 9 and id != 12
	if (slaveMode == SlaveMode::Encoder1 || \
		slaveMode == SlaveMode::Encoder2 || \
		slaveMode == SlaveMode::Encoder3)
	{
		// Prescaler has to be 1 when using the quadrature decoder
		setPrescaler(1);
	}
	%% endif

	uint32_t cr1 = static_cast<uint32_t>(mode);
	if(bufferAutoReloadRegister)
	{
		cr1 |= TIM_CR1_ARPE;
	}
	if(limitUpdateEventRequestSource)
	{
		cr1 |= TIM_CR1_URS;
	}
	if (enableOnePulseMode) {
		TIM{{ id }}->CR1 = cr1 | TIM_CR1_OPM;
	} else {
		TIM{{ id }}->CR1 = cr1;
	}
	TIM{{ id }}->CR2 = static_cast<uint32_t>(masterMode);
	TIM{{ id }}->SMCR = static_cast<uint32_t>(slaveMode)
						| static_cast<uint32_t>(slaveModeTrigger);
}

// ----------------------------------------------------------------------------
void
modm::platform::Timer{{ id }}::configureInputChannel(uint32_t channel, uint8_t filter) {
		channel -= 1;	// 1..4 -> 0..3

	// disable channel
	TIM{{ id }}->CCER &= ~(TIM_CCER_CC1E << (channel * 4));

	uint32_t flags = static_cast<uint32_t>(filter&0xf) << 4;

	if (channel <= 1)
	{
		const uint32_t offset = 8 * channel;

		flags <<= offset;
		flags |= TIM{{ id }}->CCMR1 & ~(0xf0 << offset);

		TIM{{ id }}->CCMR1 = flags;
	}
	else {
		const uint32_t offset = 8 * (channel - 2);

		flags <<= offset;
		flags |= TIM{{ id }}->CCMR2 & ~(0xf0 << offset);

		TIM{{ id }}->CCMR2 = flags;
	}
	TIM{{ id }}->CCER |= TIM_CCER_CC1E << (channel * 4);
}

void
modm::platform::Timer{{ id }}::configureInputChannel(uint32_t channel,
		InputCaptureMapping input, InputCapturePrescaler prescaler,
		InputCapturePolarity polarity, uint8_t filter,
		bool xor_ch1_3)
{
	channel -= 1;	// 1..4 -> 0..3

	// disable channel
	TIM{{ id }}->CCER &= ~((TIM_CCER_CC1NP | TIM_CCER_CC1P | TIM_CCER_CC1E) << (channel * 4));

	uint32_t flags = static_cast<uint32_t>(input);
	flags |= static_cast<uint32_t>(prescaler) << 2;
	flags |= (static_cast<uint32_t>(filter) & 0xf) << 4;

	if (channel <= 1)
	{
		uint32_t offset = 8 * channel;

		flags <<= offset;
		flags |= TIM{{ id }}->CCMR1 & ~(0xff << offset);

		TIM{{ id }}->CCMR1 = flags;

		if(channel == 0) {
			if(xor_ch1_3)
				TIM{{ id }}->CR2 |= TIM_CR2_TI1S;
			else
				TIM{{ id }}->CR2 &= ~TIM_CR2_TI1S;
		}
	}
	else {
		uint32_t offset = 8 * (channel - 2);

		flags <<= offset;
		flags |= TIM{{ id }}->CCMR2 & ~(0xff << offset);

		TIM{{ id }}->CCMR2 = flags;
	}

	TIM{{ id }}->CCER |=
		(TIM_CCER_CC1E | static_cast<uint32_t>(polarity)) << (channel * 4);
}

// ----------------------------------------------------------------------------
void
modm::platform::Timer{{ id }}::configureOutputChannel(uint32_t channel,
		OutputCompareMode_t mode, Value compareValue, PinState out,
		bool enableComparePreload)
{
	channel -= 1;	// 1..4 -> 0..3

	// disable channel
	TIM{{ id }}->CCER &= ~((TIM_CCER_CC1NP | TIM_CCER_CC1P | TIM_CCER_CC1E) << (channel * 4));

	setCompareValue(channel + 1, compareValue);

	uint32_t flags = mode.value;
	if(enableComparePreload)
	{
		// enable preload (the compare value is loaded at each update event)
		flags |= TIM_CCMR1_OC1PE;
	}

	if (channel <= 1)
	{
		uint32_t offset = 8 * channel;

		flags <<= offset;
		flags |= TIM{{ id }}->CCMR1 & ~(0xff << offset);

		TIM{{ id }}->CCMR1 = flags;
	}
	else {
		uint32_t offset = 8 * (channel - 2);

		flags <<= offset;
		flags |= TIM{{ id }}->CCMR2 & ~(0xff << offset);

		TIM{{ id }}->CCMR2 = flags;
	}

	if (mode != OutputCompareMode::Inactive && out == PinState::Enable) {
		TIM{{ id }}->CCER |= (TIM_CCER_CC1E) << (channel * 4);
	}
}

void
modm::platform::Timer{{ id }}::configureOutputChannel(uint32_t channel,
OutputCompareMode mode, Value compareValue,
PinState out, OutputComparePolarity polarity,
OutputComparePreload preload)
{
	// disable output
	TIM{{ id }}->CCER &= ~(0xf << ((channel-1) * 4));
	setCompareValue(channel, compareValue);
	configureOutputChannel(channel, mode, out, polarity,  PinState::Disable, OutputComparePolarity::ActiveHigh, preload);
}

void
modm::platform::Timer{{ id }}::configureOutputChannel(uint32_t channel,
OutputCompareMode mode,
PinState out, OutputComparePolarity polarity,
PinState out_n, OutputComparePolarity polarity_n,
OutputComparePreload preload)
{
%% if id in [15, 16, 17]
	modm_assert(channel == 1, "Timer{{ id }}", "This timer has complementary output only on channel 1!", "{{ id }}");
%% endif

	channel -= 1;	// 1..4 -> 0..3

	// disable output
	TIM{{ id }}->CCER &= ~(0xf << (channel * 4));

	uint32_t flags = static_cast<uint32_t>(mode) | static_cast<uint32_t>(preload);

	if (channel <= 1)
	{
		const uint32_t offset = 8 * channel;

		flags <<= offset;
		flags |= TIM{{ id }}->CCMR1 & ~(0xff << offset);

		TIM{{ id }}->CCMR1 = flags;
	}
	else {
		const uint32_t offset = 8 * (channel - 2);

		flags <<= offset;
		flags |= TIM{{ id }}->CCMR2 & ~(0xff << offset);

		TIM{{ id }}->CCMR2 = flags;
	}

	// CCER Flags (Enable/Polarity)
	flags = (static_cast<uint32_t>(polarity_n) << 2) |
			(static_cast<uint32_t>(out_n)      << 2) |
			 static_cast<uint32_t>(polarity) | static_cast<uint32_t>(out);

	TIM{{ id }}->CCER |= flags << (channel * 4);
}

// ----------------------------------------------------------------------------
void
modm::platform::Timer{{ id }}::enableInterruptVector(bool enable, uint32_t priority)
{
%% for vector in vectors
	if (enable)
	{
		NVIC_SetPriority({{ vector }}_IRQn, priority);
		NVIC_EnableIRQ({{ vector }}_IRQn);
	}
	else
	{
		NVIC_DisableIRQ({{ vector }}_IRQn);
	}
%% endfor
}

// ----------------------------------------------------------------------------
%% if ((id <= 5) or (id in [8, 9, 12]))
bool
modm::platform::Timer{{ id }}::isChannelConfiguredAsInput(uint32_t channel)
{
	bool isInput = false;
	switch (channel) {
		case 1:
			isInput = TIM{{ id }}->CCMR1 & TIM_CCMR1_CC1S;
			break;
		case 2:
			isInput = TIM{{ id }}->CCMR1 & TIM_CCMR1_CC2S;
			break;
%% if (id <= 5)
		case 3:
			isInput = TIM{{ id }}->CCMR2 & TIM_CCMR2_CC3S;
			break;
		case 4:
			isInput = TIM{{ id }}->CCMR2 & TIM_CCMR2_CC4S;
			break;
%% endif
		default:
			break;
	}
	return isInput;
}
%% endif
