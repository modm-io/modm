/*
 * Copyright (c) 2009, Martin Rosekeit
 * Copyright (c) 2009-2012, 2017, Fabian Greif
 * Copyright (c) 2011, 2014, Georgi Grinshpun
 * Copyright (c) 2013, 2016, Kevin LÃ¤ufer
 * Copyright (c) 2014-2017, Niklas Hauser
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#include "timer_{{ id }}.hpp"
#include <modm/platform/clock/rcc.hpp>

// ----------------------------------------------------------------------------
void
modm::platform::Timer{{ id }}::enable()
{
	Rcc::enable<Peripheral::Tim{{id}}>();
}

void
modm::platform::Timer{{ id }}::disable()
{
	TIM{{ id }}->CR1 = 0;
	TIM{{ id }}->DIER = 0;
	TIM{{ id }}->CCER = 0;

	Rcc::disable<Peripheral::Tim{{id}}>();
}

// ----------------------------------------------------------------------------
void
modm::platform::Timer{{ id }}::setMode(Mode mode, SlaveMode slaveMode,
		SlaveModeTrigger slaveModeTrigger, MasterMode masterMode,
		bool enableOnePulseMode
%% if advanced_extended
		, MasterMode2 masterMode2
%% endif
		)
{
	// disable timer
	TIM{{ id }}->CR1 = 0;
	TIM{{ id }}->CR2 = 0;

	if (slaveMode == SlaveMode::Encoder1 ||
		slaveMode == SlaveMode::Encoder2 ||
		slaveMode == SlaveMode::Encoder3)
	{
		setPrescaler(1);
	}

	// ARR Register is buffered, only Under/Overflow generates update interrupt
	uint32_t cr1 = TIM_CR1_ARPE | TIM_CR1_URS | static_cast<uint32_t>(mode);
	if (enableOnePulseMode) {
		TIM{{ id }}->CR1 = cr1 | TIM_CR1_OPM;
	} else {
		TIM{{ id }}->CR1 = cr1;
	}
%% if advanced_extended
	TIM{{ id }}->CR2 = 	static_cast<uint32_t>(masterMode) |
						static_cast<uint32_t>(masterMode2);
%% else
	TIM{{ id }}->CR2 = static_cast<uint32_t>(masterMode);
%% endif
	TIM{{ id }}->SMCR = static_cast<uint32_t>(slaveMode) |
						static_cast<uint32_t>(slaveModeTrigger);
}

// ----------------------------------------------------------------------------
void
modm::platform::Timer{{ id }}::configureInputChannel(uint32_t channel, uint8_t filter) {
		channel -= 1;	// 1..4 -> 0..3

	// disable channel
	TIM{{ id }}->CCER &= ~(TIM_CCER_CC1E << (channel * 4));

	uint32_t flags = static_cast<uint32_t>(filter&0xf) << 4;

	if (channel <= 1)
	{
		const uint32_t offset = 8 * channel;

		flags <<= offset;
		flags |= TIM{{ id }}->CCMR1 & ~(0xf0 << offset);

		TIM{{ id }}->CCMR1 = flags;
	}
	else {
		const uint32_t offset = 8 * (channel - 2);

		flags <<= offset;
		flags |= TIM{{ id }}->CCMR2 & ~(0xf0 << offset);

		TIM{{ id }}->CCMR2 = flags;
	}
	TIM{{ id }}->CCER |= TIM_CCER_CC1E << (channel * 4);
}

void
modm::platform::Timer{{ id }}::configureInputChannel(uint32_t channel,
		InputCaptureMapping input, InputCapturePrescaler prescaler,
		InputCapturePolarity polarity, uint8_t filter,
		bool xor_ch1_3)
{
	channel -= 1;	// 1..4 -> 0..3

	// disable channel
	TIM{{ id }}->CCER &= ~((TIM_CCER_CC1NP | TIM_CCER_CC1P | TIM_CCER_CC1E) << (channel * 4));

	uint32_t flags = static_cast<uint32_t>(input);
	flags |= static_cast<uint32_t>(prescaler) << 2;
	flags |= static_cast<uint32_t>(filter&0xf) << 4;

	if (channel <= 1)
	{
		const uint32_t offset = 8 * channel;

		flags <<= offset;
		flags |= TIM{{ id }}->CCMR1 & ~(0xff << offset);

		TIM{{ id }}->CCMR1 = flags;

		if(channel == 0) {
			if(xor_ch1_3)
				TIM{{ id }}->CR2 |= TIM_CR2_TI1S;
			else
				TIM{{ id }}->CR2 &= ~TIM_CR2_TI1S;
		}
	}
%% if advanced_extended
	else if (channel <= 3) {
%% else
	else {
%% endif
		const uint32_t offset = 8 * (channel - 2);

		flags <<= offset;
		flags |= TIM{{ id }}->CCMR2 & ~(0xff << offset);

		TIM{{ id }}->CCMR2 = flags;
	}
%% if advanced_extended
	else {
		const uint32_t offset = 8 * (channel - 4);

		flags <<= offset;
		flags |= TIM{{ id }}->CCMR3 & ~(0xff << offset);

		TIM{{ id }}->CCMR3 = flags;
	}
%% endif

	TIM{{ id }}->CCER |= (TIM_CCER_CC1E | static_cast<uint32_t>(polarity)) << (channel * 4);
}

// ----------------------------------------------------------------------------
void
modm::platform::Timer{{ id }}::configureOutputChannel(uint32_t channel,
		OutputCompareMode mode, Value compareValue, PinState out)
{
	channel -= 1;	// 1..4 -> 0..3

	// disable output
	TIM{{ id }}->CCER &= ~(0xf << (channel * 4));

	setCompareValue(channel + 1, compareValue);

	// enable preload (the compare value is loaded at each update event)
	uint32_t flags = static_cast<uint32_t>(mode) | TIM_CCMR1_OC1PE;

	if (channel <= 1)
	{
		const uint32_t offset = 8 * channel;

		flags <<= offset;
		flags |= TIM{{ id }}->CCMR1 & ~(0xff << offset);

		TIM{{ id }}->CCMR1 = flags;
	}
%% if advanced_extended
	else if (channel <= 3) {
%% else
	else {
%% endif
		const uint32_t offset = 8 * (channel - 2);

		flags <<= offset;
		flags |= TIM{{ id }}->CCMR2 & ~(0xff << offset);

		TIM{{ id }}->CCMR2 = flags;
	}
%% if advanced_extended
	else {
		const uint32_t offset = 8 * (channel - 4);

		flags <<= offset;
		flags |= TIM{{ id }}->CCMR3 & ~(0xff << offset);

		TIM{{ id }}->CCMR3 = flags;
	}
%% endif

	if ((mode != OutputCompareMode::Inactive) and (out == PinState::Enable)) {
		TIM{{ id }}->CCER |= (TIM_CCER_CC1E) << (channel * 4);
	}
}

void
modm::platform::Timer{{ id }}::configureOutputChannel(uint32_t channel,
OutputCompareMode mode, Value compareValue, 
PinState out, OutputComparePolarity polarity,
PinState out_n, OutputComparePolarity polarity_n,
OutputComparePreload preload)
{
	// disable output
	TIM{{ id }}->CCER &= ~(0xf << ((channel-1) * 4));
	setCompareValue(channel, compareValue);
	configureOutputChannel(channel, mode, out, polarity, out_n, polarity_n, preload);
}

void
modm::platform::Timer{{ id }}::configureOutputChannel(uint32_t channel,
OutputCompareMode mode,
PinState out, OutputComparePolarity polarity,
PinState out_n, OutputComparePolarity polarity_n,
OutputComparePreload preload)
{
	channel -= 1;	// 1..4 -> 0..3

	// disable output
	TIM{{ id }}->CCER &= ~(0xf << (channel * 4));

	uint32_t flags = static_cast<uint32_t>(mode) | static_cast<uint32_t>(preload);

	if (channel <= 1)
	{
		const uint32_t offset = 8 * channel;

		flags <<= offset;
		flags |= TIM{{ id }}->CCMR1 & ~(0xff << offset);

		TIM{{ id }}->CCMR1 = flags;
	}
%% if advanced_extended
	else if (channel <= 3) {
%% else
	else {
%% endif
		const uint32_t offset = 8 * (channel - 2);

		flags <<= offset;
		flags |= TIM{{ id }}->CCMR2 & ~(0xff << offset);

		TIM{{ id }}->CCMR2 = flags;
	}
%% if advanced_extended
	else {
		const uint32_t offset = 8 * (channel - 4);

		flags <<= offset;
		flags |= TIM{{ id }}->CCMR3 & ~(0xff << offset);

		TIM{{ id }}->CCMR3 = flags;
	}
%% endif

	// CCER Flags (Enable/Polarity)
	flags = (static_cast<uint32_t>(polarity_n) << 2) |
			(static_cast<uint32_t>(out_n)      << 2) |
			 static_cast<uint32_t>(polarity) | static_cast<uint32_t>(out);

	TIM{{ id }}->CCER |= flags << (channel * 4);
}

void
modm::platform::Timer{{ id }}::configureOutputChannel(uint32_t channel,
uint32_t modeOutputPorts)
{
	channel -= 1;	// 1..4 -> 0..3

	{
		uint32_t flags = modeOutputPorts & (0x70);

		if (channel <= 1)
		{
			uint32_t offset = 8 * channel;

			flags <<= offset;
			flags |= TIM{{ id }}->CCMR1 & ~(TIM_CCMR1_OC1M << offset);
			TIM{{ id }}->CCMR1 = flags;
		}
%% if advanced_extended
		else if (channel <= 3) {
%% else
		else {
%% endif
			uint32_t offset = 8 * (channel - 2);

			flags <<= offset;
			flags |= TIM{{ id }}->CCMR2 & ~(TIM_CCMR1_OC1M << offset);

			TIM{{ id }}->CCMR2 = flags;
		}
%% if advanced_extended
		else {
			uint32_t offset = 8 * (channel - 4);

			flags <<= offset;
			flags |= TIM{{ id }}->CCMR3 & ~(TIM_CCMR1_OC1M << offset);

			TIM{{ id }}->CCMR3 = flags;
		}
%% endif
	}

	uint32_t flags = (modeOutputPorts & (0xf)) << (channel * 4);
	flags |= TIM{{ id }}->CCER & ~(0xf << (channel * 4));
	TIM{{ id }}->CCER = flags;
}

// ----------------------------------------------------------------------------
void
modm::platform::Timer{{ id }}::enableInterruptVector(Interrupt interrupt, bool enable, uint32_t priority)
{
%% for vector, flags in vectors.items()
	if(interrupt & ({% for flag in flags %}Interrupt::{{ flag }}{% if not loop.last %} | {% endif %}{% endfor %}))
	{
		if (enable)
		{
			NVIC_SetPriority({{ vector }}_IRQn, priority);
			NVIC_EnableIRQ({{ vector }}_IRQn);
		}
		else
		{
			NVIC_DisableIRQ({{ vector }}_IRQn);
		}
	}
%% endfor
}
