/*
 * Copyright (c) 2009, Georgi Grinshpun
 * Copyright (c) 2009-2013, Fabian Greif
 * Copyright (c) 2010, Martin Rosekeit
 * Copyright (c) 2011, 2014-2017, Niklas Hauser
 * Copyright (c) 2013-2014, Kevin LÃ¤ufer
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#ifndef MODM_STM32_TIMER_{{ id }}_HPP
#define MODM_STM32_TIMER_{{ id }}_HPP

#include "basic_base.hpp"
#include <modm/platform/gpio/connector.hpp>

namespace modm::platform
{

/**
 * @brief		Basic Timer {{ id }}
 *
 * Interrupt handler:
 * \code
 * MODM_ISR(TIM{{ id }})
 * {
 *     Timer{{ id }}::resetInterruptFlags(Timer{{ id }}::FLAG_UPDATE);
 *
 *     ...
 * }
 * \endcode
 *
 {% if id == 6 -%}
 * For the STM32F2xx and STM32F4xx:
 * \code
 * MODM_ISR(TIM{{ id }}_DAC)
 * {
 *     Timer{{ id }}::resetInterruptFlags(Timer{{ id }}::FLAG_UPDATE);
 *
 *     ...
 * }
 * \endcode
 {%- endif %}
 *
 * @author		Fabian Greif
 * @ingroup		modm_platform_timer
 */
class Timer{{ id }} : public BasicTimer
{
public:
	// This type is the internal size of the counter.
	using Value = uint16_t;

	template< class... Signals >
	static void
	connect()
	{
		using Connector = GpioConnector<Peripheral::Tim{{ id }}, Signals...>;
		Connector::connect();
	}

	static void
	enable();

	static void
	disable();

	static bool
	isEnabled();

	static inline void
	pause()
	{
		TIM{{ id }}->CR1 &= ~TIM_CR1_CEN;
	}

	static inline void
	start()
	{
		TIM{{ id }}->CR1 |= TIM_CR1_CEN;
	}

	static void
	setMode(Mode mode);

	static inline void
	setPrescaler(uint16_t prescaler)
	{
		// Because a prescaler of zero is not possible the actual
		// prescaler value is \p prescaler - 1 (see Datasheet)
		TIM{{ id }}->PSC = prescaler - 1;
	}

	static uint16_t
	getPrescaler()
	{
		return TIM{{ id }}->PSC + 1;
	}

	static inline void
	setOverflow(Value overflow)
	{
		TIM{{ id }}->ARR = overflow;
	}

	static inline Value
	getOverflow()
	{
		return TIM{{ id }}->ARR;
	}

	template<class SystemClock>
	static constexpr uint32_t
	getClockFrequency()
	{
		return SystemClock::Timer{{ id }};
	}

	template<class SystemClock, class Rep, class Period>
	static Value
	setPeriod(std::chrono::duration<Rep, Period> duration, bool autoApply = true)
	{
		// This will be inaccurate for non-smooth frequencies (last six digits unequal to zero)
		const uint32_t cycles = duration.count() * SystemClock::Timer{{ id }} * Period::num / Period::den;
		const uint16_t prescaler = (cycles + std::numeric_limits<Value>::max() - 1) / std::numeric_limits<Value>::max();	// always round up
		const Value overflow = cycles / prescaler - 1;

		setPrescaler(prescaler);
		setOverflow(overflow);

		// Generate Update Event to apply the new settings for ARR
		if (autoApply) {
			applyAndReset();
		}

		return overflow;
	}

	static inline void
	generateEvent(Event ev)
	{
		TIM{{ id }}->EGR = static_cast<uint32_t>(ev);
	}

	static inline void
	applyAndReset()
	{
		// Generate Update Event to apply the new settings for ARR
		generateEvent(Event::Update);
	}

	static inline Value
	getValue()
	{
		return TIM{{ id }}->CNT;
	}

	static inline void
	setValue(Value value)
	{
		TIM{{ id }}->CNT = value;
	}

	static inline bool
	isCountingUp()
	{
		return true;
	}

	static inline bool
	isCountingDown()
	{
		return false;
	}

	static constexpr bool
	hasAdvancedPwmControl()
	{
		return false;
	}

	static void
	enableInterruptVector(bool enable, uint32_t priority);

	static inline void
	enableInterrupt(Interrupt_t interrupt)
	{
		TIM{{ id }}->DIER |= interrupt.value;
	}

	static inline void
	disableInterrupt(Interrupt_t interrupt)
	{
		TIM{{ id }}->DIER &= ~interrupt.value;
	}

	static inline InterruptFlag_t
	getInterruptFlags()
	{
		return InterruptFlag_t(TIM{{ id }}->SR);
	}

	static void
	acknowledgeInterruptFlags(InterruptFlag_t interrupt)
	{
		// Flags are cleared by writing a zero to the flag position.
		// Writing a one is ignored.
		TIM{{ id }}->SR = ~interrupt.value;
	}
};

}	// namespace modm::platform

#endif // MODM_STM32_TIMER_{{ id }}_HPP
