#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2021, Jeff McBride
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

props = {}
class Instance(Module):
    def __init__(self, driver, instance, channel):
        self.driver = driver
        self.instance = int(instance)
        self.channel = channel
        self.vectors = None

    def init(self, module):
        module.name = str(self.instance)
        module.description = "Instance {}".format(self.instance)

    def prepare(self, module, options):
        return True

    def build(self, env):
        global props
        props["id"] = self.instance
        props["module"] = int(self.instance / 3)
        props["channel"] = self.channel

        env.substitutions = props
        env.outbasepath = "modm/src/modm/platform/timer"
        env.template("timer_channel.hpp.in", "timer_channel_{}.hpp".format(self.instance))

def init(module):
    module.name = ":platform:timer"
    module.description = "Timers (TC)"

def prepare(module, options):
    device = options[":target"]
    if not device.has_driver("tc:samg*"):
        return False

    module.depends(
        ":cmsis:device",
        ":platform:gpio")

    timers = device.get_all_drivers("tc:samg*")
    for driver in timers:
        for instance in driver["instance"]:
            instance = int(instance)
            # Each TC instance has 3 channels, and we create an independent driver for each
            for channel in range(3):
                module.add_submodule(Instance(driver, instance*3+channel, channel))

    global props
    device = options[":target"]
    props["target"] = device.identifier

    return True

def build(env):
    env.outbasepath = "modm/src/modm/platform/timer"
    env.copy("timer_channel_base.hpp")