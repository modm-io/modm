#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2016-2018, Niklas Hauser
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

def get_properties(env):
    device = env[":target"]
    driver = device.get_driver("tc")
    properties = device.properties
    properties["target"] = device.identifier
    properties["partname"] = device.partname
    return properties

class Instance(Module):
    def __init__(self, driver, instance):
        self.driver = driver
        self.instance = int(instance)

    def init(self, module):
        module.name = str(self.instance)
        module.description = "Instance of {} #{}".format(self.driver["type"], self.instance)

    def prepare(self, module, options):
        module.depends(":platform:timer")
        return True

    def build(self, env):
        properties = get_properties(env)
        properties["id"] = int(self.instance)
        properties["driver"] = self.driver

        env.substitutions = properties
        env.outbasepath = "modm/src/modm/platform/timer"

        source_timer = self.driver["type"]
        env.template(source_timer + ".hpp.in", "timer_{}.hpp".format(self.instance))
        env.template(source_timer + ".cpp.in", "timer_{}.cpp".format(self.instance))


def init(module):
    module.name = "timer"
    module.parent = "platform"
    module.description = "Timers/Counters (TC)"

def prepare(module, options):
    device = options[":target"]
    if not device.has_driver("tc:tc*"):
        return False
    if device.identifier.string not in ["atmega328p", "atmega32u4", "atmega2560"]:
        return False
    module.depends(
        ":architecture:register",
        ":platform:gpio")

    for driver in device.get_all_drivers("tc"):
        for instance in driver["instance"]:
            module.add_submodule(Instance(driver, instance))

    return True

def build(env):
    env.substitutions = get_properties(env)
    env.outbasepath = "modm/src/modm/platform/timer"

    env.template("tc8_base.hpp.in")
    #env.template("tc8_base.cpp.in")
    env.template("tc16_base.hpp.in")
    env.template("tc10_base.hpp.in")
    env.template("tc8_async_base.hpp.in")
