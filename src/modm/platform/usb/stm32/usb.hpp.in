/*
* Copyright (c) 2020, Erik Henriksson
* Copyright (c) 2020, Niklas Hauser
*
* This file is part of the modm project.
*
* This Source Code Form is subject to the terms of the Mozilla Public
* License, v. 2.0. If a copy of the MPL was not distributed with this
* file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
// ----------------------------------------------------------------------------

#pragma once

#include <modm/platform/device.hpp>
#include <modm/platform/gpio/connector.hpp>

%% set name = "Usb" ~ port | capitalize

namespace modm::platform
{

/// @ingroup modm_platform_usb modm_platform_usb_{{port}}
class {{ name }}
{
public:
	template< class SystemClock >
	static void
	initialize(uint8_t priority=3)
	{
		static_assert(SystemClock::Usb == 48_MHz, "{{ name }} must have a 48MHz clock!");
%% if target.family in ["g0", "l4", "l5"]
#ifdef PWR_CR2_USV
		PWR->CR2 |= PWR_CR2_USV;
#endif
%% endif
		Rcc::enable<Peripheral::{{ peripheral }}>();
%% if is_remap
		SYSCFG->CFGR1 |= SYSCFG_CFGR1_USB_IT_RMP;
%% endif
%% for irq in irqs | sort
		NVIC_SetPriority({{ irq }}_IRQn, priority);
%% endfor
	}

	template< class... Signals >
	static void
	connect()
	{
		using Connector = GpioConnector<Peripheral::{{ peripheral }}, Signals...>;
%% if port == "fs"
		using Dp = typename Connector::template GetSignal< Gpio::Signal::Dp >;
		using Dm = typename Connector::template GetSignal< Gpio::Signal::Dm >;
%% if is_otg
		using Id = typename Connector::template GetSignal< Gpio::Signal::Id >;
%% endif
		static_assert(((Connector::template IsValid<Dp> and Connector::template IsValid<Dm>) and sizeof...(Signals) >= 2),
					  "{{ name }}::connect() requires at least one Dp and one Dm signal!");

%% if is_otg
		Id::configure(Gpio::OutputType::OpenDrain, Gpio::OutputSpeed::High);
		Id::configure(Gpio::InputType::PullUp);
%% endif
%% endif
		Connector::connect();
	}
};

} // namespace modm::platform
