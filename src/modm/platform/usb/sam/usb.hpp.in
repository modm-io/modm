/*
* Copyright (c) 2020, Erik Henriksson
* Copyright (c) 2020, Niklas Hauser
*
* This file is part of the modm project.
*
* This Source Code Form is subject to the terms of the Mozilla Public
* License, v. 2.0. If a copy of the MPL was not distributed with this
* file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
// ----------------------------------------------------------------------------

#pragma once

#include <modm/math/tolerance.hpp>
#include <modm/platform/device.hpp>
#include <modm/platform/gpio/connector.hpp>


namespace modm::platform
{

/// @ingroup modm_platform_usb
class Usb
{
public:
	template< class SystemClock >
	static void
	initialize(uint8_t priority=3)
	{
%% if target["family"] == "g5x"
		// only the USB device mode is supported for now
		static_assert(modm::isValueInTolerance(48_MHz, SystemClock::Usb, 0.25_pct),
				"The USB clock frequency must be within 0.25\% of 48MHz!");
		// Select DM/DP function for PA21/22
		MATRIX->CCFG_SYSIO &= ~(CCFG_SYSIO_SYSIO11 | CCFG_SYSIO_SYSIO10);
		// Put USB in device mode
		MATRIX->CCFG_USBMR = CCFG_USBMR_USBMODE;
		// Enable the 48MHz clock
		PMC->PMC_SCER = PMC_SCER_UDP;
		// Enable the CPU clock
		ClockGen::enable<ClockPeripheral::Udp>();
		NVIC_SetPriority(UDP_IRQn, priority);
%% else
		static_assert(SystemClock::Usb == 48_MHz, "Usb must have a 48MHz clock!");
		PeripheralClock<Peripherals::Usb>::enable();
%% if target["family"] == "d5x/e5x"
		NVIC_SetPriority(USB_0_IRQn, priority);
		NVIC_SetPriority(USB_1_IRQn, priority);
		NVIC_SetPriority(USB_2_IRQn, priority);
		NVIC_SetPriority(USB_3_IRQn, priority);
%% else
		NVIC_SetPriority(USB_IRQn, priority);
%% endif
%% endif
	}

// SAMG does not provide a connect method for USB. It's not defined in the SVD,
// and the USB pins are fixed. Instead, calling Usb::initialize() switches the
// IO pin function to the USB controller.
%% if target["family"] != "g5x"
	template<class... Pins>
	static void
	connect()
	{
		using DpPin = GetPin_t<PeripheralPin::Dp, Pins...>;
		using DmPin = GetPin_t<PeripheralPin::Dm, Pins...>;
		static_assert(!std::is_same_v<typename DpPin::Base, typename DmPin::Base>,
					  "Dp and Dm cannot use the same pin!");
		using Usb = Peripherals::Usb;
		using DpConnector = typename DpPin::template Connector<Usb, Usb::Dp>;
		using DmConnector = typename DmPin::template Connector<Usb, Usb::Dm>;
		DpConnector::connect();
		DmConnector::connect();
	}
%% endif
};

} // namespace modm::platform
