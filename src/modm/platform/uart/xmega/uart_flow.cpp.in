/*
 * Copyright (c) 2013-2014, 2016-2017, Niklas Hauser
 * Copyright (c) 2017, Fabian Greif
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#include <modm/architecture/platform/avr/xmega.hpp>

#include <modm/architecture/driver/atomic/queue.hpp>
#include <modm/architecture/interface/atomic_lock.hpp>

#include <modm/architecture/interface/gpio.hpp>
#include <modm/architecture/platform/avr/xmega/gpio.hpp>

#include "uart_{{ id.lower() }}.hpp"

#ifdef USART{{ id }}_RXC_vect

#if UART{{ id }}_RTS_PIN >= 0
// RTS_PIN = -1 deactivates flow control

namespace
{
	static modm::atomic::Queue<uint8_t, UART{{ id }}_RX_BUFFER_SIZE> rxBuffer;
	static modm::atomic::Queue<uint8_t, UART{{ id }}_TX_BUFFER_SIZE> txBuffer;

	GPIO_INPUT (RXD, {{ id[0] }}, {{ number * 4 + 2 }});
	GPIO_OUTPUT(TXD, {{ id[0] }}, {{ number * 4 + 3 }});

	GPIO_INPUT (RTS, UART{{ id }}_RTS_PORT, UART{{ id }}_RTS_PIN);
	GPIO_OUTPUT(CTS, UART{{ id }}_CTS_PORT, UART{{ id }}_CTS_PIN);

	uint8_t error;
}

// ----------------------------------------------------------------------------
#if UART{{ id }}_RTS_PIN != -1
MODM_ISR(USART{{ id }}_RXC)
{
	// first save the errors
	error |= USART{{ id }}_STATUS & (USART_FERR_bm | USART_BUFOVF_bm | USART_PERR_bm);

	// then read the buffer
	uint8_t data = USART{{ id }}_DATA;

	if (!rxBuffer.push(data)) {
		// TODO: Error handling if internal buffer is full.
	}

	// If the internal buffer is now nearly full set CTS to high to inhibit
	// remote from sending new data. As the remote may not stop instantenously
	// it is important to stop before the buffer is completely full.
	if (rxBuffer.isNearlyFull()) {
		CTS::set();
	}
}

// ----------------------------------------------------------------------------
ISR(USART{{ id }}_DRE_vect)
{
	if (txBuffer.isEmpty())
	{
		// transmission finished, disable DRE interrupt
		USART{{ id }}_CTRLA = USART_RXCINTLVL_MED_gc;
	}
	else {
		// check if RTS is high which indicates that the remote device is ready
		// to accept data
		if (RTS::read())
		{
			// RTS of remote device high: do not send new data.
			// Disable DRE interrupt
			// TODO: Setup interrupt for rising edge of RTS to resume sending.
			USART{{ id }}_CTRLA = USART_RXCINTLVL_MED_gc;
		}
		else
		{
			// RTS of remote device low: ready to receive new data.
			// get one byte from buffer and write it to the UART buffer
			// which starts the transmission
			USART{{ id }}_DATA = txBuffer.get();
			txBuffer.pop();
		}
	}
}
#endif


// ----------------------------------------------------------------------------
void
modm::platform::BufferedUartFlow{{ id }}::initialize()
{
	TXD::set();
	TXD::setOutput();

	RXD::setInput();

	// RTS and CTS pins, ready for reception in few cycles.
	CTS::setOutput(modm::Gpio::Low);
	RTS::setInput(modm::platform::PULLUP);

	// interrupts should be disabled during initialisation
	atomic::Lock lock;

	// enable receive complete interrupt
	USART{{ id }}.CTRLA = USART_RXCINTLVL_MED_gc;

	// setting the frame size to 8 bit
	USART{{ id }}.CTRLC = USART_CHSIZE_8BIT_gc;

	// enable both, receiver and transmitter
	USART{{ id }}.CTRLB |= USART_RXEN_bm | USART_TXEN_bm;
}

// ----------------------------------------------------------------------------
void
modm::platform::BufferedUartFlow{{ id }}::write(uint8_t c)
{
	while ( !txBuffer.push(c) ) {
		// wait for a free slot in the buffer
	}

	// Either a byte was enqueued to the buffer or it was not possible because
	// the buffer was full. In both cases there is something to send now.

	// disable interrupts
	atomic::Lock lock;

	// enable DRE interrupt
	USART{{ id }}_CTRLA = USART_RXCINTLVL_MED_gc | USART_DREINTLVL_MED_gc;
}

// ----------------------------------------------------------------------------
void
modm::platform::BufferedUartFlow{{ id }}::write(const uint8_t *s, uint8_t n)
{
	while (n-- != 0) {
		BufferedUartFlow{{ id }}::write(*s++);
	}
}

// ----------------------------------------------------------------------------
bool
modm::platform::BufferedUartFlow{{ id }}::read(uint8_t& c)
{
	if (rxBuffer.isNearlyEmpty()) {
		// When the buffer is nearly empty allow remote device to send again.
		// This will create a continous flow of data.
		CTS::reset();
	}

	// Small hack: When the AVR stopped transmission due to a high RTS signal try to resume
	// transmission now when RTS is low again and there is something to send.
	// TODO: can be removed if RTS interrupt is included.
	if (!RTS::read() && !txBuffer.isEmpty()) {
		// enable DRE interrupt to resume transmission
		USART{{ id }}_CTRLA = USART_RXCINTLVL_MED_gc | USART_DREINTLVL_MED_gc;
	}

	if (rxBuffer.isEmpty()) {
		// no data in buffer anymore
		CTS::reset();
		return false;
	}
	else {
		c = rxBuffer.get();
		rxBuffer.pop();
		return true;
	}
}

// ----------------------------------------------------------------------------
uint8_t
modm::platform::BufferedUartFlow{{ id }}::read(uint8_t *buffer, uint8_t n)
{
	uint8_t i;
	for (i = 0; i < n; ++i)
	{
		if (rxBuffer.isEmpty()) {
			CTS::reset();
			return i;
		}
		else {
			*buffer++ = rxBuffer.get();
			rxBuffer.pop();

			if (rxBuffer.isNearlyEmpty()) {
				// When the buffer is nearly empty allow remote device to send again.
				// This will create a continous flow of data.
				CTS::reset();
			}
		}
	}

	return i;
}

// ----------------------------------------------------------------------------
uint8_t
modm::platform::BufferedUartFlow{{ id }}::readErrorFlags()
{
	return error;
}

void
modm::platform::BufferedUartFlow{{ id }}::resetErrorFlags()
{
	error = 0;
}

// ----------------------------------------------------------------------------
uint8_t
modm::platform::BufferedUartFlow{{ id }}::flushReceiveBuffer()
{
	uint8_t count = rxBuffer.getSize();
	rxBuffer.clear();

	uint8_t c;
	while (USART{{ id }}_STATUS & USART_RXCIF_bm) {
		c = USART{{ id }}_DATA;
	}

	return count;
}

//uint8_t
//modm::platform::BufferedUartFlow{{ id }}::flushTransmitBuffer()
//{
//	uint8_t count = txBuffer.getSize();
//	txBuffer.clear();
//
//	return count;
//}


#endif
#endif	// USART{{ id }}_RXC_vect
