#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2016-2017, Niklas Hauser
# Copyright (c) 2017, Fabian Greif
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

def get_properties(env):
    device = env[":target"]
    driver = device.get_driver("uart")
    properties = device.properties
    properties["target"] = device.identifier
    properties["partname"] = device.partname
    properties["driver"] = driver
    return properties

def load_options(module):
    module.add_option(
        BooleanOption(
            name="buffered",
            description="",
            default=True))
    module.add_option(
        NumericOption(
            name="buffer.tx",
            description="",
            minimum=1, maximum=254,
            default=16))
    module.add_option(
        NumericOption(
            name="buffer.rx",
            description="",
            minimum=1, maximum=254,
            default=8))

class Instance(Module):
    def __init__(self, instance):
        self.instance = instance

    def init(self, module):
        module.name = str(self.instance)
        module.description = "UART {} instance".format(self.instance)

    def prepare(self, module, options):
        module.depends(":platform:uart")
        load_options(module)
        return True

    def build(self, env):
        properties = get_properties(env)
        properties["id"] = self.instance

        env.substitutions = properties
        env.outbasepath = "modm/src/modm/platform/uart"

        env.template("uart.hpp.in", "uart_{}.hpp".format(self.instance.lower()))
        env.template("uart_buffered_tx.cpp.in", "uart_{}_buffered_tx.cpp".format(self.instance.lower()))
        env.template("uart_buffered_rx.cpp.in", "uart_{}_buffered_rx.cpp".format(self.instance.lower()))


def init(module):
    module.name = "uart"
    module.parent = "platform"

def prepare(module, options):
    device = options[":target"]
    if not device.has_driver("uart:xmega"):
        return False

    module.depends(":platform:core")

    driver = device.get_driver("uart")
    if "instance" in driver:
        for instance in listify(driver["instance"]):
            module.add_submodule(Instance(instance))
    else:
        load_options(module)

    return True

def build(env):
    env.substitutions = get_properties(env)
    env.outbasepath = "modm/src/modm/platform/uart"

    env.copy("uart_baudrate.hpp")
