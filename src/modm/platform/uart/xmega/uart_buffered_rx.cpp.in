/*
 * Copyright (c) 2013-2014, 2016-2017, Niklas Hauser
 * Copyright (c) 2017, Fabian Greif
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#include <modm/architecture/driver/atomic/queue.hpp>
#include <modm/architecture/interface/atomic_lock.hpp>

#include "uart_{{ id.lower() }}.hpp"

static modm::atomic::Queue<uint8_t, {{ options["buffer.rx"] }}> rxBuffer;
static uint8_t error;

// ----------------------------------------------------------------------------
MODM_ISR(USART{{ id }}_RXC)
{
	// first save the errors
	error |= USART{{ id }}_STATUS & (USART_FERR_bm | USART_BUFOVF_bm | USART_PERR_bm);
	// then read the buffer
	uint8_t data = USART{{ id }}_DATA;
	// push it into the buffer
	rxBuffer.push(data);
}

// ----------------------------------------------------------------------------
void
modm::platform::Uart{{ id }}::initializeWithFractionalBaudrate(uint16_t bsel, uint8_t bscale)
{
	atomic::Lock lock;

	USART{{ id }}.BAUDCTRLA = static_cast<uint8_t>(bsel & 0xff);
	USART{{ id }}.BAUDCTRLB = static_cast<uint8_t>((bscale << USART_BSCALE0_bp) | (bsel >> 8));

	// enable receive complete interrupt
	USART{{ id }}.CTRLA = USART_RXCINTLVL_MED_gc;

	// setting the frame size to 8 bit
	USART{{ id }}.CTRLC = USART_CHSIZE_8BIT_gc;

	// enable both, receiver and transmitter
	USART{{ id }}.CTRLB |= USART_RXEN_bm | USART_TXEN_bm;
}

// MARK: - read
bool
modm::platform::Uart{{ id }}::read(uint8_t& data)
{
	if (rxBuffer.isEmpty())
		return false;

	data = rxBuffer.get();
	rxBuffer.pop();

	return true;
}

std::size_t
modm::platform::Uart{{ id }}::read(uint8_t *buffer, std::size_t length)
{
	for (std::size_t i = 0; i < length; ++i)
	{
		if (rxBuffer.isEmpty()) {
			return length;
		}
		else {
			*buffer++ = rxBuffer.get();
			rxBuffer.pop();
		}
	}

	return length;
}

// MARK: - discard
std::size_t
modm::platform::Uart{{ id }}::discardReceiveBuffer()
{
	std::size_t count = rxBuffer.getSize();
	rxBuffer.clear();

	uint8_t c;
	while (USART{{ id }}_STATUS & USART_RXCIF_bm)
	{
		c = USART{{ id }}_DATA;
		(void) c;
	}

	return count;
}

// MARK: - error
uint8_t
modm::platform::Uart{{ id }}::getErrorFlags()
{
	return error;
}

void
modm::platform::Uart{{ id }}::acknowledgeErrorFlags()
{
	error = 0;
}

