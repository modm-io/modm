/*
 * Copyright (c) 2009, Martin Rosekeit
 * Copyright (c) 2009-2012, 2017, Fabian Greif
 * Copyright (c) 2010, Georgi Grinshpun
 * Copyright (c) 2011-2014, 2016-2017, Niklas Hauser
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#include <modm/architecture/driver/atomic/queue.hpp>
#include <modm/architecture/interface/atomic_lock.hpp>

#include "uart_{{ id.lower() }}.hpp"

static modm::atomic::Queue<uint8_t, {{ options["buffer.tx"] }}> txBuffer;

// ----------------------------------------------------------------------------
MODM_ISR(USART{{ id }}_DRE)
{
	if (txBuffer.isEmpty())
	{
		// transmission finished, disable DRE interrupt
		USART{{ id }}_CTRLA = USART_RXCINTLVL_MED_gc;
	}
	else {
		// get one byte from buffer and write it to the UART buffer
		// which starts the transmission
		USART{{ id }}_DATA = txBuffer.get();
		txBuffer.pop();
	}
}

// MARK: - write blocking
void
modm::platform::Uart{{ id }}::writeBlocking(uint8_t data)
{
	// wait until there is some place in the buffer
	while (!write(data))
		;

	// wait until everything has been sent
	while (!isWriteFinished())
		;
}

void
modm::platform::Uart{{ id }}::writeBlocking(const uint8_t *data, std::size_t length)
{
	// first push everything into the buffer
	for (std::size_t i = 0; i < length; ++i)
	{
		while (!write(*data++))
			;
	}

	// then wait
	while (!isWriteFinished())
		;
}

void
modm::platform::Uart{{ id }}::flushWriteBuffer()
{
	// just wait until the last byte has been sent
	while (!isWriteFinished())
		;
}

// MARK: - write
bool
modm::platform::Uart{{ id }}::write(uint8_t data)
{
	if (!txBuffer.push(data))
		return false;

	::modm::atomic::Lock lock;

	// enable DRE interrupt
	USART{{ id }}_CTRLA = USART_RXCINTLVL_MED_gc | USART_DREINTLVL_MED_gc;

	return true;
}

std::size_t
modm::platform::Uart{{ id }}::write(const uint8_t *data, std::size_t length)
{
	for (std::size_t i = 0; i < length; ++i)
	{
		if (!write(*data++))
		{
			return i;
		}
	}

	return length;
}

bool
modm::platform::Uart{{ id }}::isWriteFinished()
{
	return (txBuffer.isEmpty() && (USART{{ id }}_STATUS & USART_DREIF_bm));
}

// MARK: - discard
std::size_t
modm::platform::Uart{{ id }}::discardTransmitBuffer()
{
	{
		::modm::atomic::Lock lock;
		USART{{ id }}_CTRLA = USART_RXCINTLVL_MED_gc;
	}

	std::size_t count = txBuffer.getSize();
	txBuffer.clear();

	return count;
}

