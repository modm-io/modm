/*
 * Copyright (c) 2009, Martin Rosekeit
 * Copyright (c) 2009-2011, Fabian Greif
 * Copyright (c) 2010-2011, 2013, Georgi Grinshpun
 * Copyright (c) 2013-2014, Sascha Schade
 * Copyright (c) 2013, 2016, Kevin Läufer
 * Copyright (c) 2013-2017, Niklas Hauser
 * Copyright (c) 2018, Lucas Mösch
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

%% set name = uart_name ~ id
%% set hal = uart_name ~ "Hal" ~ id

#include "../device.hpp"
#include "uart_hal_{{ id }}.hpp"
#include "uart_{{ id }}.hpp"

%% if options["buffered"]
#include <modm/architecture/interface/atomic_lock.hpp>
#include <modm/architecture/driver/atomic/queue.hpp>

namespace
{
	static modm::atomic::Queue<uint8_t, {{ options["buffer.rx"] }}> rxBuffer;
	static modm::atomic::Queue<uint8_t, {{ options["buffer.tx"] }}> txBuffer;
}
%% endif

%% if options["buffered"]
void
modm::platform::{{ name }}::initializeBuffered(uint32_t interruptPriority)
{
	{{ hal }}::enableInterruptVector(true, interruptPriority);
	{{ hal }}::enableInterrupt(Interrupt::RxNotEmpty);
}
%% endif

void
modm::platform::{{ name }}::writeBlocking(uint8_t data)
{
	while(!{{ hal }}::isTransmitRegisterEmpty());
	{{ hal }}::write(data);
}

void
modm::platform::{{ name }}::writeBlocking(const uint8_t *data, std::size_t length)
{
	while (length-- != 0) {
		writeBlocking(*data++);
	}
}

void
modm::platform::{{ name }}::flushWriteBuffer()
{
%% if options["buffered"]
	while(!isWriteFinished());
%% else
	return;
%% endif
}

bool
modm::platform::{{ name }}::write(uint8_t data)
{
%% if options["buffered"]
	if(txBuffer.isEmpty() && {{ hal }}::isTransmitRegisterEmpty()) {
		{{ hal }}::write(data);
	} else {
		if (!txBuffer.push(data))
			return false;
		// Disable interrupts while enabling the transmit interrupt
		atomic::Lock lock;
		// Transmit Data Register Empty Interrupt Enable
		{{ hal }}::enableInterrupt(Interrupt::TxEmpty);
	}
	return true;
%% else
	if({{ hal }}::isTransmitRegisterEmpty()) {
		{{ hal }}::write(data);
		return true;
	} else {
		return false;
	}
%% endif
}

std::size_t
modm::platform::{{ name }}::write(const uint8_t *data, std::size_t length)
{
	uint32_t i = 0;
	for (; i < length; ++i)
	{
		if (!write(*data++)) {
			return i;
		}
	}
	return i;
}

bool
modm::platform::{{ name }}::isWriteFinished()
{
%% if options["buffered"]
	return txBuffer.isEmpty() && {{ hal }}::isTransmitRegisterEmpty();
%% else
	return {{ hal }}::isTransmitRegisterEmpty();
%% endif
}

std::size_t
modm::platform::{{ name }}::discardTransmitBuffer()
{
%% if options["buffered"]
	std::size_t count = 0;
	// disable interrupt since buffer will be cleared
	{{ hal }}::disableInterrupt({{ hal }}::Interrupt::TxEmpty);
	while(!txBuffer.isEmpty()) {
		++count;
		txBuffer.pop();
	}
	return count;
%% else
	return 0;
%% endif
}

bool
modm::platform::{{ name }}::read(uint8_t &data)
{
%% if options["buffered"]
	if (rxBuffer.isEmpty()) {
		return false;
	} else {
		data = rxBuffer.get();
		rxBuffer.pop();
		return true;
	}
%% else
	if({{ hal }}::isReceiveRegisterNotEmpty()) {
		{{ hal }}::read(data);
		return true;
	} else {
		return false;
	}
%% endif
}

std::size_t
modm::platform::{{ name }}::read(uint8_t *data, std::size_t length)
{
%% if options["buffered"]
	uint32_t i = 0;
	for (; i < length; ++i)
	{
		if (rxBuffer.isEmpty()) {
			return i;
		} else {
			*data++ = rxBuffer.get();
			rxBuffer.pop();
		}
	}
	return i;
%% else
	(void)length; // avoid compiler warning
	if(read(*data)) {
		return 1;
	} else {
		return 0;
	}
%% endif
}

std::size_t
modm::platform::{{ name }}::discardReceiveBuffer()
{
%% if options["buffered"]
	std::size_t count = 0;
	while(!rxBuffer.isEmpty()) {
		++count;
		rxBuffer.pop();
	}
	return count;
%% else
	return 0;
%% endif
}


%% if options["buffered"]
%% set hal = "modm::platform::" ~ hal
%% if id in shared_irq_ids
void
modm::platform::{{ name }}::irq()
%% else
MODM_ISR_HOOKS({{ name | upper }})
%% endif
{
	if ({{ hal }}::isReceiveRegisterNotEmpty()) {
		// TODO: save the errors
		uint8_t data;
		{{ hal }}::read(data);
		rxBuffer.push(data);
	}
	if ({{ hal }}::isTransmitRegisterEmpty()) {
		if (txBuffer.isEmpty()) {
			// transmission finished, disable TxEmpty interrupt
			{{ hal }}::disableInterrupt({{ hal }}::Interrupt::TxEmpty);
		}
		else {
			{{ hal }}::write(txBuffer.get());
			txBuffer.pop();
		}
	}
}
%% endif
