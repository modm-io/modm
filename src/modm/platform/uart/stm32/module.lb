#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2016-2018, Niklas Hauser
# Copyright (c) 2017, Fabian Greif
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

props = {}

class Instance(Module):
    def __init__(self, instance):
        self.instance = instance

    def init(self, module):
        module.name = self.instance.name
        module.description = "Instance {}".format(self.instance)

    def prepare(self, module, options):
        module.depends(":platform:uart")

        module.add_option(
            BooleanOption(
                name="buffered",
                description="",
                default=True))
        module.add_option(
            NumericOption(
                name="buffer.tx",
                description="",
                minimum=1, maximum=2 ** 16 - 2,
                default=250))
        module.add_option(
            NumericOption(
                name="buffer.rx",
                description="",
                minimum=1, maximum=2 ** 16 - 2,
                default=16))

        return True

    def build(self, env):
        device = env[":target"].identifier
        global props
        props["driver"] = self.instance.driver
        props["id"] = self.instance.number
        props["features"] = self.instance.features()
        props["uart_name"] = self.instance.driver.name.capitalize()

        env.substitutions = props
        env.outbasepath = "modm/src/modm/platform/uart"

        env.template("uart_hal.hpp.in", "uart_hal_{}.hpp".format(self.instance))
        env.template("uart_hal_impl.hpp.in", "uart_hal_{}_impl.hpp".format(self.instance))
        env.template("uart.hpp.in", "uart_{}.hpp".format(self.instance))
        env.template("uart.cpp.in", "uart_{}.cpp".format(self.instance))

        props["instances"].append(self.instance.number)


def init(module):
    module.name = ":platform:uart"
    module.description = "Universal Asynchronous Receiver Transmitter (UART)"

def prepare(module, options):
    device = options[":target"]
    if not (device.has_driver("uart:stm32*") or device.has_driver("usart:stm32*")):
        return False

    module.depends(
        ":architecture:atomic",
        ":architecture:interrupt",
        ":architecture:register",
        ":architecture:uart",
        ":math:algorithm",
        ":cmsis:device",
        ":platform:gpio",
        ":platform:rcc")

    global props
    drivers = device.drivers("usart", "uart")
    props["extended_driver"] = ("extended" in drivers[0].type)
    props["shared_features"] = features = drivers[0].features()
    props["over8_sampling"] = "over8" in features
    props["tcbgt"] = "tcbgt" in features
    props["half_duplex"] = "half-duplex" in features
    props["7_bit"] = "7-bit" in features
    props["target"] = device.identifier
    props["instances"] = []

    shared_irqs = device.core.shared_irqs("USART")
    props["shared_irq"] = next(iter(shared_irqs.keys()), None)
    props["shared_irq_ids"] = shared_irqs.get(props["shared_irq"], [])

    for driver in drivers:
        for instance in driver.instances():
            module.add_submodule(Instance(instance))

    return True

def build(env):
    device = env[":target"]

    global props
    env.substitutions = props
    env.outbasepath = "modm/src/modm/platform/uart"
    env.template("uart_base.hpp.in")
    env.template("uart_baudrate.hpp.in")
    if any(i in props["shared_irq_ids"] for i in props["instances"]):
        env.template("uart_shared.cpp.in")
