/*
 * Copyright (c) 2020, Erik Henriksson
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#pragma once

#include <stdint.h>
#include <modm/architecture/interface/peripheral.hpp>
#include "../device.hpp"
#include "uart_base.hpp"
#include "modm/platform/clock/gclk.hpp"

namespace modm::platform
{

/**
 * Universal asynchronous receiver transmitter (UartHal{{ id }})
 *
 * Very basic implementation that exposes more hardware features than
 * the regular Usart classes.
 *
 * @author		Erik Henriksson
 * @ingroup		modm_platform_uart
 */
class UartHal{{ id }} : public UartBase, /** @cond */protected modm::PeripheralDriver/** @endcond */
{
private:
	/**
	 * Disable Parity or Enable Odd/Even Parity
	 *
	 * This method assumes 8 databits + 1 parity bit
	 * Remember to enable the clock but not the UART peripheral
	 * before setting the party.
	 */
	static inline void
	setParity(const Parity parity);

public:
	/// Enables the hw module
	static inline void
	enable();

	/// Disables the hw module
	static inline void
	disable();

	/// RResets the hw module
	static inline void
	reset();

	/**
	* Initialize Uart HAL Peripheral
	*
	* Enables clocks, the UART peripheral (but neither TX nor RX)
	* Sets baudrate and parity.
	*/
	template< class SystemClock, baudrate_t baudrate, percent_t tolerance=pct(1) >
	static void
	initialize(Parity parity = Parity::Disabled);

	/**
	 * \brief	Write a single byte to the transmit register
	 *
	 * @warning 	This method does NOT do any sanity checks!!
	 *				It is your responsibility to check if the register
	 *				is empty!
	 */
	static inline void
	write(uint8_t data);

	/**
	 * Saves the value of the receive register to data
	 *
	 * @warning 	This method does NOT do any sanity checks!!
	 *				It is your responsibility to check if the register
	 *				contains something useful!
	 */
	static inline void
	read(uint8_t &data);

	/// Enable/Disable Transmitter
	static inline void
	setTransmitterEnable(const bool enable);

	/// Enable/Disable Receiver
	static inline void
	setReceiverEnable(bool enable);

	/// Set the UE (USART enable) bit
	static inline void
	enableOperation();

	/// Clear the UE (USART enable) bit
	static inline void
	disableOperation();

	/// Returns true if data has been received
	static inline bool
	isReceiveRegisterNotEmpty();

	/// Returns true if data can be written
	static inline bool
	isTransmitRegisterEmpty();

	/// Configure mapping between rx pin functions and IO pads
	static inline void
	setRxPinout(RxPinout rxPinout);

	/// Configure mapping between tx pin functions and IO pads
	static inline void
	setTxPinout(TxPinout txPinout);
};

}	// namespace modm::platform

#include "uart_hal_{{ id }}_impl.hpp"
