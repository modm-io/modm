/*
 * Copyright (c) 2020, Erik Henriksson
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

%% set name = "UartHal" ~ id
%% set sercom = sercom_name ~ id
%% set peripheral = sercom | upper
#include <modm/math/algorithm/prescaler.hpp>

namespace modm::platform
{

// ----------------------------------------------------------------------------
void
{{ name }}::setParity(const Parity parity)
{
	if (parity != Parity::Disabled) {
		{{ peripheral }}->USART.CTRLA.bit.FORM = 0x1; // Enable parity.
		{{ peripheral }}->USART.CTRLB.bit.PMODE = uint32_t(parity);
	} else {
		{{ peripheral }}->USART.CTRLA.bit.FORM = 0x0; // Disable parity.
	}
}

void
{{ name }}::enable()
{
	{{ peripheral }}->USART.CTRLA.bit.ENABLE = true;	// Uart Enable
	while({{ peripheral }}->USART.SYNCBUSY.bit.ENABLE); // Wait for sync.
}

void
{{ name }}::disable()
{
	{{ peripheral }}->USART.CTRLA.bit.ENABLE = false;	// Uart Disable
	while({{ peripheral }}->USART.SYNCBUSY.bit.ENABLE); // Wait for sync.
}

void
{{ name }}::reset()
{
	{{ peripheral }}->USART.CTRLA.bit.SWRST = true;	// Uart Reset
	while({{ peripheral }}->USART.SYNCBUSY.bit.SWRST); // Wait for sync.
}

template<class SystemClock, modm::baudrate_t baudrate, modm::percent_t tolerance>
void
{{ name }}::initialize(Parity parity)
{
	// Enable peripheral clock in power manager.
	PeripheralClock<Peripherals::{{sercom_name}}<{{id}}>>::enable();
	// Reset USART
	reset();
	// Set clock mode internal
	{{ peripheral }}->USART.CTRLA.bit.MODE = 0x1;
	// Set asynchronous mode
	{{ peripheral }}->USART.CTRLA.bit.CMODE = 0x0;
	// Set character size to 8 bits
	{{ peripheral }}->USART.CTRLB.bit.CHSIZE = 0x0;
	// Set Data order to LSB first
	{{ peripheral }}->USART.CTRLA.bit.DORD = 0x1;
	// Set parity
	setParity(parity);
	// Set stop bits to 1
	{{ peripheral }}->USART.CTRLB.bit.SBMODE = 0x0;

	// Oversampling 8x or 16x
	constexpr uint32_t scalar = (baudrate * 16l > SystemClock::{{ sercom | capitalize }}) ? 8 : 16;
	{{ peripheral }}->USART.CTRLA.bit.SAMPR = (scalar == 16) ? 0x1 : 0x3;
	// Prescaler 13 bit integer, 3 bit fractional
	constexpr auto result = Prescaler::from_range(
			SystemClock::{{ sercom | capitalize }}/(scalar/8), baudrate, 1, (1ul << 16) - 1ul);
	assertBaudrateInTolerance< result.frequency, baudrate, tolerance >();
	{{ peripheral }}->USART.BAUD.FRAC.BAUD = result.prescaler >> 3;
	{{ peripheral }}->USART.BAUD.FRAC.FP = result.prescaler & 0b111;

	// Enable USART
	setReceiverEnable(true);
	setTransmitterEnable(true);
	enable();
}


void
{{ name }}::write(uint8_t data)
{
	{{ peripheral }}->USART.DATA.reg = data;
}

void
{{ name }}::read(uint8_t &data)
{
	data = {{ peripheral }}->USART.DATA.reg;
}

void
{{ name }}::setTransmitterEnable(const bool enable)
{
	{{ peripheral }}->USART.CTRLB.bit.TXEN = enable;
}

void
{{ name }}::setReceiverEnable(bool enable)
{
	{{ peripheral }}->USART.CTRLB.bit.RXEN = enable;
}

void
{{ name }}::enableOperation()
{
	enable();
}

void
{{ name }}::disableOperation()
{
	disable();
}

bool
{{ name }}::isReceiveRegisterNotEmpty()
{
	return {{ peripheral }}->USART.INTFLAG.bit.RXC;
}

bool
{{ name }}::isTransmitRegisterEmpty()
{
	return {{ peripheral }}->USART.INTFLAG.bit.DRE;
}

void
{{ name }}::setRxPinout(RxPinout rxPinout)
{
	{{ peripheral }}->USART.CTRLA.bit.RXPO = static_cast<uint8_t>(rxPinout);
}

void
{{ name }}::setTxPinout(TxPinout txPinout)
{
	{{ peripheral }}->USART.CTRLA.bit.TXPO = static_cast<uint8_t>(txPinout);
}

}	// namespace modm::platform
