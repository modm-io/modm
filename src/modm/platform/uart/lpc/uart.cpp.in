/*
 * Copyright (c) 2012, 2016-2017, Sascha Schade
 * Copyright (c) 2013-2014, Kevin LÃ¤ufer
 * Copyright (c) 2013-2017, Niklas Hauser
 * Copyright (c) 2017, Fabian Greif
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

%% set name = uart_name ~ id

#include "../device.hpp"
#include "uart_{{ id }}.hpp"
#include "lpc11_uart_registers.hpp"

%% if options["buffer.rx"] > 16 or options["buffer.tx"] > 16
#include <modm/architecture/interface/atomic_lock.hpp>
#include <modm/architecture/driver/atomic/queue.hpp>
%% endif

// ----------------------------------------------------------------------------

namespace
{
// If requested buffer size is larger than hardware buffer size create a
// software queue for the remaining bytes.
%% if options["buffer.rx"] > 16
	static modm::atomic::Queue<uint8_t, {{ options["buffer.rx"] - 16}}> rxBuffer;
%% endif
%% if options["buffer.tx"] > 16
	static modm::atomic::Queue<uint8_t, {{ options["buffer.tx"] - 16 }}> txBuffer;
%% endif

	/**
	 * The FIFO only tells when it is entirly empty by setting THRE.
	 * So after putting one char to the FIFO it is not possible to know
	 * how many other chars can be send to the FIFO.
	 * NXP wisely did not include a flag FIFO-is-full.
	 */
	static uint8_t
	charsLeft = 16;
}

// ----------------------------------------------------------------------------
void
modm::platform::{{ name }}::initialize(uint32_t baudrate)
{
	atomic::Lock lock;

	/*  UART I/O config. PIO1_6 and PIO1_7 are always Rx/Tx */
	LPC_IOCON->PIO1_6 &= ~0x07;
	LPC_IOCON->PIO1_6 |= 0x01;     /* UART RXD */
	LPC_IOCON->PIO1_7 &= ~0x07;
	LPC_IOCON->PIO1_7 |= 0x01;     /* UART TXD */

	/* Enable UART clock */
	LPC_SYSCON->SYSAHBCLKCTRL |= (1<<12);
	LPC_SYSCON->UARTCLKDIV = 0x1;     /* divided by 1 */

	LPC_UART->LCR = LCR_DLAB;
	uint32_t regVal = LPC_SYSCON->UARTCLKDIV;
	uint32_t   Fdiv = (((48'000'000 * LPC_SYSCON->SYSAHBCLKDIV)/regVal)/16)/baudrate ; //390;
	LPC_UART->DLM = Fdiv >>    8;
	LPC_UART->DLL = Fdiv  & 0xff;
	//LPC_UART->DLM = 0;
	//LPC_UART->DLL = 26;

	LPC_UART->LCR = LCR_WLS_8_BIT;		/* 8 bits, no Parity, 1 Stop bit, DLAB = 0 */

	/* Enable and reset TX and RX FIFO. */
	LPC_UART->FCR = FCR_TXFIFORES | FCR_RXFIFORES | FCR_FIFOEN;

	/* Read to clear the line status. */
	regVal = LPC_UART->LSR;

	/* Ensure a clean start, no data in either TX or RX FIFO. */
	while (( LPC_UART->LSR & (LSR_THRE|LSR_TEMT)) != (LSR_THRE|LSR_TEMT) );
	while ( LPC_UART->LSR & LSR_RDR )
	{
		regVal = LPC_UART->RBR;	/* Dump data from RX FIFO */
	}

%% if options["buffer.rx"] > 16
	/* If RX buffering with more than 16 bytes is requested a software queue
	 * must be used for receiving. This involves the Rx Interrupt only. */
	LPC_UART->IER = IER_RBRIE;
%% endif

%% if options["buffer.tx"] > 16 or options["buffer.rx"] > 16
	/* Enable the UART Interrupt */
	NVIC_EnableIRQ(UART_IRQn);
%% endif

	// TODO Care about Line status and its interrupt.
}

void
modm::platform::{{ name }}::writeBlocking(uint8_t data)
{
	while (not write(data));
}

void
modm::platform::{{ name }}::writeBlocking(const uint8_t *data, std::size_t length)
{
	while (length--)
	{
		writeBlocking(*data++);
	}
}

void
modm::platform::{{ name }}::flushWriteBuffer()
{
	while(not isWriteFinished())
		;
}

// ----------------------------------------------------------------------------
bool
modm::platform::{{ name }}::write(uint8_t data)
{
%% if options["buffer.tx"] <= 16
	// No software buffer necessary, use hardware buffer only.
	if (LPC_UART->LSR & LSR_THRE)
	{
		// If the FIFO is empty 16 bytes can be send.
		charsLeft = 16;
	}

	if (charsLeft > 0)
	{
		// There is at least charsLeft bytes free in the FIFO
		LPC_UART->THR = data;
		--charsLeft;
		return true;
	}
	// Well, it's not known how many chars are really available in the FIFO.
	// Since the FIFO was completly empty 16 bytes have been sent to the FIFO.
	// Even though some bytes are already transmitted and some space is
	// available again we only can detect if the FIFO is completely empty.
	return false;
%% else
	atomic::Lock lock;
	// Use hardware buffer and additional software buffer.
	LPC_UART->IER |= IER_THREIE;

	if (txBuffer.isEmpty() and charsLeft > 0)
	{
		// If software buffer is empty try to write to hardware buffer directly.
		// Do not write to hardware buffer while there is some data in the
		// software buffer to maintain byte order.
		// There is at least charsLeft bytes free in the FIFO
		LPC_UART->THR = data;
		--charsLeft;
		return true; // success
	}

	// Hardware buffer is full, so try software buffer.
	// Software buffer is empty so this will succeed.
	// Hardware buffer is not empty so at least one Tx interrupt
	// will be generated soon.

	return txBuffer.push(data);
%% endif
}

// ----------------------------------------------------------------------------
std::size_t
modm::platform::{{ name }}::write(const uint8_t *buffer, std::size_t length)
{
	std::size_t written(0);

%% if options["buffer.tx"] <= 16
	// No software buffer necessary, use hardware buffer only.
	if (LPC_UART->LSR & LSR_THRE)
	{
		// If the FIFO is empty 16 bytes can be send.
		charsLeft = 16;
	}

	// Copy max(charsLeft, length) chars from buffer to hardware FIFO.
	while ((charsLeft > 0) and (written < length))
	{
		LPC_UART->THR = *buffer++;
		written++;
		--charsLeft;
	}
%% else
	atomic::Lock lock;
	// Use hardware buffer and additional software buffer.
	LPC_UART->IER |= IER_THREIE;

	if (txBuffer.isEmpty())
	{
		// If software buffer is completly empty try to write to hardware buffer directly.
		// Do not write to hardware buffer while there is some data in the
		// software buffer to maintain byte order.

		// First Copy max(charsLeft, length) chars from buffer to hardware FIFO.
		while ((charsLeft > 0) and (written < length))
		{
			LPC_UART->THR = *buffer++;
			written++;
			--charsLeft;
		}
	}

	// If there is remaining data, put it into the software buffer
	while (written < length)
	{
		if (not txBuffer.push(*buffer++)) break;
		written++;
	}
%% endif
	return written;
}

bool
modm::platform::{{ name }}::isWriteFinished()
{
%% if options["buffer.tx"] > 16
	return txBuffer.isEmpty() and (LPC_UART->LSR & LSR_THRE);
%% else
	return (LPC_UART->LSR & LSR_THRE);
%% endif
}

std::size_t
modm::platform::{{ name }}::discardTransmitBuffer()
{
%% if options["buffer.tx"] > 16
	atomic::Lock lock;
	std::size_t count(0);
	// disable interrupt since buffer will be cleared
	LPC_UART->IER &= ~IER_THREIE;
	while(txBuffer.isNotEmpty())
	{
		++count;
		txBuffer.pop();
	}
	return count;
%% else
	return 0;
%% endif
}

bool
modm::platform::{{ name }}::read(uint8_t& data)
{
%% if options["buffer.rx"] > 16
	if (rxBuffer.isNotEmpty())
	{
		data = rxBuffer.get();
		rxBuffer.pop();
		// if the hardware buffer has been used, copy all into rxBuffer
		while(LPC_UART->LSR & LSR_RDR and rxBuffer.isNotFull())
		{
			rxBuffer.push(LPC_UART->RBR);
		}
		if (rxBuffer.isNotFull())
		{
			atomic::Lock lock;
			LPC_UART->IER |= IER_RBRIE;
		}
		return true;
	}
%% else
	if (LPC_UART->LSR & LSR_RDR)
	{
		// Receive data available
		data = LPC_UART->RBR;
		return true;
	}
%% endif
	return false;
}

std::size_t
modm::platform::{{ name }}::read(uint8_t *buffer, std::size_t length)
{
	std::size_t ret = 0;

	while (ret < length)
	{
		if (not read(*buffer++)) break;
		ret++;
	}

	return ret;
}

std::size_t
modm::platform::{{ name }}::discardReceiveBuffer()
{
	std::size_t count(0);
%% if options["buffer.rx"] > 16
	while(rxBuffer.isNotEmpty())
	{
		++count;
		rxBuffer.pop();
	}
%% endif
	while(LPC_UART->LSR & LSR_RDR)
	{
		(void)LPC_UART->RBR;
		++count;
	}
	return count;
}

// ----------------------------------------------------------------------------
MODM_ISR(UART)
{
	// read IIR to clear Interrupt Status and mask
	uint8_t IIRValue = LPC_UART->IIR & IIR_INTID_MASK;

	switch (IIRValue)
	{
	case IIR_INTID_RDA:
%% if options["buffer.rx"] > 16
		// Receive data available: Move data to queue.
		// As the Rx Interrupt is disabled when the rxBuffer is full it should
		// never happen that this is called with rxBuffer full.
		rxBuffer.push(LPC_UART->RBR);

		if (rxBuffer.isFull()) {
			// Disable Rx Interrupt so that the hardware buffer is used, too.
			// Enable Rx Interrupt in read() as soon as rxBuffer is not full anymore.
			LPC_UART->IER &= ~(IER_RBRIE);
		}
%% endif
		break;
	case IIR_INTID_THRE:
%% if options["buffer.tx"] > 16
		// Transmit Holding Register Empty == FIFO completly empty.
		// Write up to 16 bytes to FIFO.
		charsLeft = 16;

		if (txBuffer.isEmpty()) {
			// Transmission to FIFO finished, FIFO empty, software buffer empty.
			// No need to switch off TRHE interrupt.
			return;
		}

		while (txBuffer.isNotEmpty() and (charsLeft-- > 0))
		{
			// Write to the hardware buffer
			LPC_UART->THR = txBuffer.get();
			txBuffer.pop();
		}
%% endif
		break;
	case IIR_INTID_CTI:		// Character Time-out
	case IIR_INTID_MI:		// Modem interrupt
	case IIR_INTID_RLS:		// Receive line status
	default:				// don't care
		break;
	}
}
