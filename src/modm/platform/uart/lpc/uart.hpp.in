/*
 * Copyright (c) 2012, Fabian Greif
 * Copyright (c) 2012, 2017, Sascha Schade
 * Copyright (c) 2013-2014, Kevin LÃ¤ufer
 * Copyright (c) 2014-2017, Niklas Hauser
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

%% set name = uart_name ~ id

#ifndef MODM_LPC11_UART_{{ id }}_HPP
#define MODM_LPC11_UART_{{ id }}_HPP

#include <modm/architecture/interface/uart.hpp>
#include <modm/platform/gpio/connector.hpp>
#include <modm/architecture/interface/interrupt.hpp>

namespace modm::platform
{
/**
 * Universal asynchronous receiver transmitter (UART1)
 *
 * This implementation uses the hardware buffer and the software buffer.
 * A software buffer is only used if more than 16 bytes of buffering
 * is requested.
 *
 * The hardware implementation by NXP is flawed. See
 *   http://knowledgebase.nxp.com/showthread.php?t=2231
 *
 * There is no FIFO-not-full flag. It's only possible to check if the
 * FIFO is completely empty. This makes it impossible to add data
 * to the FIFO after the first byte is put into the FIFO.
 *
 * After detecting that the FIFO is empty (THRE interrupt) the
 * charsLeft variable is set to 16 (= size of FIFO) and some accounting
 * is done in this class.
 *
 * The interrupt occurence is strongly reduced compared to STM devices.
 * In STM devices after each char transmitted an interrupt is called.
 * In this implementation only every 16 bytes an interrupt is generated.
 *
 * @ingroup	lpc11xx
 * @author		Strongly Typed
 * @author		Niklas Hauser
 */
class {{ name }} : public modm::Uart
{
	static void
	initialize(uint32_t baudrate);

public:
	// Expose jinja template parameters to be checked by e.g. drivers or application
	static constexpr size_t RxBufferSize = {{ options["buffer.rx"] }};
	static constexpr size_t TxBufferSize = {{ options["buffer.tx"] }};

public:
	template< template<Peripheral _> class... Signals >
	static void
	connect(Gpio::InputType InputTypeRx = Gpio::InputType::PullUp)
	{
		using Connector = GpioConnector<Peripheral::{{ name }}, Signals...>;
		using Tx = typename Connector::template GetSignal< Gpio::Signal::Tx >;
		using Rx = typename Connector::template GetSignal< Gpio::Signal::Rx >;
		static_assert(((Connector::template IsValid<Tx> and Connector::template IsValid<Rx>) and sizeof...(Signals) == 2) or
					  ((Connector::template IsValid<Tx> or  Connector::template IsValid<Rx>) and sizeof...(Signals) == 1),
					  "{{ name }}::connect() requires one Tx and/or one Rx signal!");

		// Connector::disconnect();
		Tx::setOutput(Gpio::OutputType::PushPull);
		Rx::setInput(InputTypeRx);
		Connector::connect();
	}

	template< class SystemClock, baudrate_t baudrate, percent_t tolerance=pct(1) >
	static void modm_always_inline
	initialize()
	{
		initialize(baudrate);
	}

	static void
	writeBlocking(uint8_t data);

	static void
	writeBlocking(const uint8_t *data, std::size_t length);

	static void
	flushWriteBuffer();

	static bool
	write(uint8_t data);

	static std::size_t
	write(const uint8_t *data, std::size_t length);

	static bool
	isWriteFinished();

	static std::size_t
	discardTransmitBuffer();

	static bool
	read(uint8_t &data);

	static std::size_t
	read(uint8_t *buffer, std::size_t length);

	static std::size_t
	discardReceiveBuffer();
};

}	// modm::platform namespace

#endif // MODM_LPC11_UART_{{ id }}_HPP
