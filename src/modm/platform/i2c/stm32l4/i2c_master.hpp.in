// coding: utf-8
/*
 * Copyright (c) 2017, Niklas Hauser
 * Copyright (c) 2017, Sascha Schade
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#ifndef MODM_STM32_I2C_{{ id }}_HPP
#define MODM_STM32_I2C_{{ id }}_HPP

#include <modm/architecture/interface/i2c_master.hpp>
#include <modm/architecture/interface/clock.hpp>
#include <modm/platform/gpio/connector.hpp>

/**
 * @ingroup 	{{partname}}
 * @defgroup	{{partname}}_i2c I2C
 */

namespace modm
{

namespace platform
{

/**
 * I2cMaster implementation of I2C{{ id }} module.
 *
 * Interrupts must be enabled.
 *
 * @author		Georgi Grinshpun
 * @author		Niklas Hauser
 * @author		Sascha Schade (strongly-typed)
 * @ingroup		{{partname}}_i2c
 */
class I2cMaster{{ id }} : public ::modm::I2cMaster
{
public:
	static constexpr size_t TransactionBufferSize = {{ options["buffer.transaction"] }};

public:
	template< template<Peripheral _> class... Signals, ResetDevices reset = ResetDevices::Standard>
	static void
	connect(PullUps pullups = PullUps::External)
	{
		using Connector = GpioConnector<Peripheral::I2c{{ id }}, Signals...>;
		using Scl = typename Connector::template GetSignal<Gpio::Signal::Scl>;
		using Sda = typename Connector::template GetSignal<Gpio::Signal::Sda>;
		static_assert(sizeof...(Signals) == 2 and
					  Connector::template IsValid<Scl> and Connector::template IsValid<Sda>,
					  "I2cMaster{{id}}::connect() requires one Scl and one Sda signal!");
		const Gpio::InputType input =
			(pullups == PullUps::Internal) ? Gpio::InputType::PullUp : Gpio::InputType::Floating;

		Connector::disconnect();
		Scl::configure(input);
		Sda::configure(input);
		Scl::setOutput(Gpio::OutputType::OpenDrain);
		Sda::setOutput(Gpio::OutputType::OpenDrain);
		if (reset != ResetDevices::NoReset) resetDevices<Scl, uint32_t(reset)>();
		Connector::connect();
	}

	/**
	 * Set up the I2C module for master operation.
	 *
	 * @param	rate
	 *		`Standard` or `Fast`, `High` datarate is not supported
	 */
	template<class SystemClock, uint32_t baudrate=Baudrate::Standard,
			uint16_t tolerance = modm::Tolerance::FivePercent >
	static modm_always_inline void
	initialize()
	{
		// FIXME: Hard coded to 100 kHz at 48 MHz CPU
		static_assert(baudrate == Baudrate::Standard, "FIXME: Hard coded to 100 kHz at 48 MHz CPU.");
		static_assert(SystemClock::I2c{{ id }} == modm::clock::MHz48, "FIXME: Hard coded to 100 kHz at 48 MHz CPU.");
		initializeWithPrescaler(/* freq, trise, prescaler */);
	}

	// start documentation inherited
	static bool
	start(I2cTransaction *transaction, ConfigurationHandler handler = nullptr);

	static Error
	getErrorState();

	static void
	reset();
	// end documentation inherited

private:
	static void
	initializeWithPrescaler(/* uint8_t peripheralFrequency, uint8_t riseTime, uint16_t prescaler */);
};

} // namespace platform

} // namespace modm

#endif // MODM_STM32_I2C_{{ id }}_HPP
