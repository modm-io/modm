/*
 * Copyright (c) 2009-2011, 2017, Fabian Greif
 * Copyright (c) 2011, Georgi Grinshpun
 * Copyright (c) 2011-2017, Niklas Hauser
 * Copyright (c) 2012, 2017, Sascha Schade
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#ifndef MODM_ATXMEGA_I2C_MASTER_{{ id }}_HPP
#define MODM_ATXMEGA_I2C_MASTER_{{ id }}_HPP

#include <avr/io.h>

#include <modm/architecture/interface/i2c_master.hpp>


namespace modm
{

namespace platform
{

/**
 * Asynchronous I2C master module for Port {{ id }}.
 *
 * Interrupts must be enabled.
 *
 * @author Niklas Hauser
 * @ingroup	xmega
 */
class I2cMaster{{ id }} : public ::modm::I2cMaster
{
public:
	static constexpr size_t TransactionBufferSize = {{ parameters.transaction_buffer }};

public:
	/**
	 * Set up the I2C module for master operation.
	 *
	 * @param	baudrate
	 *		`Standard` or `Fast`, `High` datarate is not supported by the Xmega
	 */
	template<class SystemClock, baudrate_t baudrate=kHz(100), percent_t tolerance=pct(5) >
	static void
	initialize()
	{
		static_assert(baudrate <= 400'000, "The Xmega does not support I2C baudrates above 400kHz.");
		static_assert(F_CPU/10 >= baudrate, "The CPU frequency needs to be at least 10x higher than I2C baudrate.");

		// set the baud rate register
		constexpr uint8_t baud = (F_CPU / (2 * baudrate)) - 5;
		assertBaudrateInTolerance<
				/* clostest available baudrate */ (F_CPU / (2*(baud + 5))),
				/* desired baudrate */ baudrate,
				tolerance >();

		initializeWithBaud(baud);
	}

	// start documentation inherited
	static bool
	start(modm::I2cDelegate *delegate);

	static bool
	startBlocking(modm::I2cDelegate *delegate);

	static Error
	getErrorState();

	static void
	reset(DetachCause cause=DetachCause::SoftwareReset);
	// end documentation inherited

private:
	static void
	initializeWithBaud(uint8_t baud);
};

} // namespace platform

} // namespace modm

#endif // MODM_ATXMEGA_I2C_MASTER_{{ id }}_HPP
