/*
 * Copyright (c) 2018, Niklas Hauser
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#include "gpio_sampler.hpp"
#include <modm/architecture/interface/interrupt.hpp>
#include <modm/platform.hpp>
#include <modm/debug/logger.hpp>

using IrqHandler = void(*)();
%% if vectors_location == "rom"
modm_fastdata
IrqHandler exti_vectors[{{ extis | length }}] = {nullptr};

%% for vector in extis
MODM_ISR({{ vector }})
{
	exti_vectors[{{ loop.index0 }}]();
}
%% endfor
%% endif

const IRQn_Type
irq_map[{{ extis | length }}] =
{
%% for vector in extis
	{{ vector }}_IRQn,
%% endfor
};

namespace modm
{

modm_fastdata
void *GpioSampler::context{nullptr};

void
GpioSampler::reset(Interrupt vector)
{
	const size_t index = int(vector);
	NVIC_DisableIRQ(irq_map[index]);
	NVIC_SetPriority(irq_map[index], 0);
}

void
GpioSampler::setHandler(Interrupt vector, IrqHandler handler)
{
	const size_t index = int(vector);
	if (index >= {{ extis | length }}) return;
%% if vectors_location == "ram"
	NVIC_SetVector(irq_map[index], (uint32_t) handler);
%% else
	exti_vectors[index] = handler;
%% endif
	NVIC_EnableIRQ(irq_map[index]);
}

GpioSampler::Channel::Channel()
{}
void
GpioSampler::Channel::allocate(size_t max_samples)
{
	max_count = max_samples + 1;
	data = new Type[max_samples + 1];
}
GpioSampler::Channel::~Channel()
{
	delete[] data;
}

void
GpioSampler::Channel::reset()
{
	count = 0;
}

void
GpioSampler::Channel::dump() const
{
	for (size_t ii=0; ii<count; ii++) {
		Type d = diff(ii);
		MODM_LOG_DEBUG.printf("%3u %9ld %6ld (%ldus)\n", ii, (*this)[ii], d, int32_t(int64_t(d * 1000000) / SystemCoreClock));
	}
	MODM_LOG_DEBUG << modm::endl;
}

void
GpioSampler::Channel::add(Type time)
{
	if (count < max_count) data[count++] = time;
}

const GpioSampler::Type&
GpioSampler::Channel::operator[](size_t index) const
{
	return data[(index < count) ? index : (count - 1)];
}

bool
GpioSampler::Channel::read(size_t index) const
{
	return ((*this)[index] & 1);
}

GpioSampler::Type
GpioSampler::Channel::diff(size_t index) const
{
	if (index == 0) return 0;
	return (*this)[index] - (*this)[index - 1];
}

} // namespace modm::platform
